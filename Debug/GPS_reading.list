
GPS_reading.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008334  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08008500  08008500  00018500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008778  08008778  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008778  08008778  00018778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008780  08008780  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008780  08008780  00018780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008784  08008784  00018784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008788  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000524  20000078  08008800  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  08008800  0002059c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120d5  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002458  00000000  00000000  0003217d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  000345d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  00035340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002225b  00000000  00000000  00035ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000119f5  00000000  00000000  00058253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce0dc  00000000  00000000  00069c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00137d24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c3c  00000000  00000000  00137d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000078 	.word	0x20000078
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080084e4 	.word	0x080084e4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000007c 	.word	0x2000007c
 8000204:	080084e4 	.word	0x080084e4

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__aeabi_uldivmod>:
 8000b80:	b953      	cbnz	r3, 8000b98 <__aeabi_uldivmod+0x18>
 8000b82:	b94a      	cbnz	r2, 8000b98 <__aeabi_uldivmod+0x18>
 8000b84:	2900      	cmp	r1, #0
 8000b86:	bf08      	it	eq
 8000b88:	2800      	cmpeq	r0, #0
 8000b8a:	bf1c      	itt	ne
 8000b8c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b90:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b94:	f000 b96e 	b.w	8000e74 <__aeabi_idiv0>
 8000b98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba0:	f000 f806 	bl	8000bb0 <__udivmoddi4>
 8000ba4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bac:	b004      	add	sp, #16
 8000bae:	4770      	bx	lr

08000bb0 <__udivmoddi4>:
 8000bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb4:	9d08      	ldr	r5, [sp, #32]
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	468c      	mov	ip, r1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f040 8083 	bne.w	8000cc6 <__udivmoddi4+0x116>
 8000bc0:	428a      	cmp	r2, r1
 8000bc2:	4617      	mov	r7, r2
 8000bc4:	d947      	bls.n	8000c56 <__udivmoddi4+0xa6>
 8000bc6:	fab2 f282 	clz	r2, r2
 8000bca:	b142      	cbz	r2, 8000bde <__udivmoddi4+0x2e>
 8000bcc:	f1c2 0020 	rsb	r0, r2, #32
 8000bd0:	fa24 f000 	lsr.w	r0, r4, r0
 8000bd4:	4091      	lsls	r1, r2
 8000bd6:	4097      	lsls	r7, r2
 8000bd8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bdc:	4094      	lsls	r4, r2
 8000bde:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000be2:	0c23      	lsrs	r3, r4, #16
 8000be4:	fbbc f6f8 	udiv	r6, ip, r8
 8000be8:	fa1f fe87 	uxth.w	lr, r7
 8000bec:	fb08 c116 	mls	r1, r8, r6, ip
 8000bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf4:	fb06 f10e 	mul.w	r1, r6, lr
 8000bf8:	4299      	cmp	r1, r3
 8000bfa:	d909      	bls.n	8000c10 <__udivmoddi4+0x60>
 8000bfc:	18fb      	adds	r3, r7, r3
 8000bfe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c02:	f080 8119 	bcs.w	8000e38 <__udivmoddi4+0x288>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 8116 	bls.w	8000e38 <__udivmoddi4+0x288>
 8000c0c:	3e02      	subs	r6, #2
 8000c0e:	443b      	add	r3, r7
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c18:	fb08 3310 	mls	r3, r8, r0, r3
 8000c1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c24:	45a6      	cmp	lr, r4
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x8c>
 8000c28:	193c      	adds	r4, r7, r4
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c2e:	f080 8105 	bcs.w	8000e3c <__udivmoddi4+0x28c>
 8000c32:	45a6      	cmp	lr, r4
 8000c34:	f240 8102 	bls.w	8000e3c <__udivmoddi4+0x28c>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	443c      	add	r4, r7
 8000c3c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c40:	eba4 040e 	sub.w	r4, r4, lr
 8000c44:	2600      	movs	r6, #0
 8000c46:	b11d      	cbz	r5, 8000c50 <__udivmoddi4+0xa0>
 8000c48:	40d4      	lsrs	r4, r2
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	b902      	cbnz	r2, 8000c5a <__udivmoddi4+0xaa>
 8000c58:	deff      	udf	#255	; 0xff
 8000c5a:	fab2 f282 	clz	r2, r2
 8000c5e:	2a00      	cmp	r2, #0
 8000c60:	d150      	bne.n	8000d04 <__udivmoddi4+0x154>
 8000c62:	1bcb      	subs	r3, r1, r7
 8000c64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c68:	fa1f f887 	uxth.w	r8, r7
 8000c6c:	2601      	movs	r6, #1
 8000c6e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c72:	0c21      	lsrs	r1, r4, #16
 8000c74:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c7c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c80:	428b      	cmp	r3, r1
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0xe4>
 8000c84:	1879      	adds	r1, r7, r1
 8000c86:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0xe2>
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	f200 80e9 	bhi.w	8000e64 <__udivmoddi4+0x2b4>
 8000c92:	4684      	mov	ip, r0
 8000c94:	1ac9      	subs	r1, r1, r3
 8000c96:	b2a3      	uxth	r3, r4
 8000c98:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c9c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ca0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ca4:	fb08 f800 	mul.w	r8, r8, r0
 8000ca8:	45a0      	cmp	r8, r4
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0x10c>
 8000cac:	193c      	adds	r4, r7, r4
 8000cae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x10a>
 8000cb4:	45a0      	cmp	r8, r4
 8000cb6:	f200 80d9 	bhi.w	8000e6c <__udivmoddi4+0x2bc>
 8000cba:	4618      	mov	r0, r3
 8000cbc:	eba4 0408 	sub.w	r4, r4, r8
 8000cc0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc4:	e7bf      	b.n	8000c46 <__udivmoddi4+0x96>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d909      	bls.n	8000cde <__udivmoddi4+0x12e>
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	f000 80b1 	beq.w	8000e32 <__udivmoddi4+0x282>
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	fab3 f683 	clz	r6, r3
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	d14a      	bne.n	8000d7c <__udivmoddi4+0x1cc>
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0x140>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 80b8 	bhi.w	8000e60 <__udivmoddi4+0x2b0>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb61 0103 	sbc.w	r1, r1, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	468c      	mov	ip, r1
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0a8      	beq.n	8000c50 <__udivmoddi4+0xa0>
 8000cfe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d02:	e7a5      	b.n	8000c50 <__udivmoddi4+0xa0>
 8000d04:	f1c2 0320 	rsb	r3, r2, #32
 8000d08:	fa20 f603 	lsr.w	r6, r0, r3
 8000d0c:	4097      	lsls	r7, r2
 8000d0e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d12:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d16:	40d9      	lsrs	r1, r3
 8000d18:	4330      	orrs	r0, r6
 8000d1a:	0c03      	lsrs	r3, r0, #16
 8000d1c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d20:	fa1f f887 	uxth.w	r8, r7
 8000d24:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2c:	fb06 f108 	mul.w	r1, r6, r8
 8000d30:	4299      	cmp	r1, r3
 8000d32:	fa04 f402 	lsl.w	r4, r4, r2
 8000d36:	d909      	bls.n	8000d4c <__udivmoddi4+0x19c>
 8000d38:	18fb      	adds	r3, r7, r3
 8000d3a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d3e:	f080 808d 	bcs.w	8000e5c <__udivmoddi4+0x2ac>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 808a 	bls.w	8000e5c <__udivmoddi4+0x2ac>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	443b      	add	r3, r7
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b281      	uxth	r1, r0
 8000d50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5c:	fb00 f308 	mul.w	r3, r0, r8
 8000d60:	428b      	cmp	r3, r1
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x1c4>
 8000d64:	1879      	adds	r1, r7, r1
 8000d66:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d6a:	d273      	bcs.n	8000e54 <__udivmoddi4+0x2a4>
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	d971      	bls.n	8000e54 <__udivmoddi4+0x2a4>
 8000d70:	3802      	subs	r0, #2
 8000d72:	4439      	add	r1, r7
 8000d74:	1acb      	subs	r3, r1, r3
 8000d76:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d7a:	e778      	b.n	8000c6e <__udivmoddi4+0xbe>
 8000d7c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d80:	fa03 f406 	lsl.w	r4, r3, r6
 8000d84:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d88:	431c      	orrs	r4, r3
 8000d8a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d92:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d96:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d9a:	431f      	orrs	r7, r3
 8000d9c:	0c3b      	lsrs	r3, r7, #16
 8000d9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000da2:	fa1f f884 	uxth.w	r8, r4
 8000da6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000daa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dae:	fb09 fa08 	mul.w	sl, r9, r8
 8000db2:	458a      	cmp	sl, r1
 8000db4:	fa02 f206 	lsl.w	r2, r2, r6
 8000db8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x220>
 8000dbe:	1861      	adds	r1, r4, r1
 8000dc0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dc4:	d248      	bcs.n	8000e58 <__udivmoddi4+0x2a8>
 8000dc6:	458a      	cmp	sl, r1
 8000dc8:	d946      	bls.n	8000e58 <__udivmoddi4+0x2a8>
 8000dca:	f1a9 0902 	sub.w	r9, r9, #2
 8000dce:	4421      	add	r1, r4
 8000dd0:	eba1 010a 	sub.w	r1, r1, sl
 8000dd4:	b2bf      	uxth	r7, r7
 8000dd6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dda:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dde:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000de2:	fb00 f808 	mul.w	r8, r0, r8
 8000de6:	45b8      	cmp	r8, r7
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x24a>
 8000dea:	19e7      	adds	r7, r4, r7
 8000dec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000df0:	d22e      	bcs.n	8000e50 <__udivmoddi4+0x2a0>
 8000df2:	45b8      	cmp	r8, r7
 8000df4:	d92c      	bls.n	8000e50 <__udivmoddi4+0x2a0>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4427      	add	r7, r4
 8000dfa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dfe:	eba7 0708 	sub.w	r7, r7, r8
 8000e02:	fba0 8902 	umull	r8, r9, r0, r2
 8000e06:	454f      	cmp	r7, r9
 8000e08:	46c6      	mov	lr, r8
 8000e0a:	4649      	mov	r1, r9
 8000e0c:	d31a      	bcc.n	8000e44 <__udivmoddi4+0x294>
 8000e0e:	d017      	beq.n	8000e40 <__udivmoddi4+0x290>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x27a>
 8000e12:	ebb3 020e 	subs.w	r2, r3, lr
 8000e16:	eb67 0701 	sbc.w	r7, r7, r1
 8000e1a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e1e:	40f2      	lsrs	r2, r6
 8000e20:	ea4c 0202 	orr.w	r2, ip, r2
 8000e24:	40f7      	lsrs	r7, r6
 8000e26:	e9c5 2700 	strd	r2, r7, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	462e      	mov	r6, r5
 8000e34:	4628      	mov	r0, r5
 8000e36:	e70b      	b.n	8000c50 <__udivmoddi4+0xa0>
 8000e38:	4606      	mov	r6, r0
 8000e3a:	e6e9      	b.n	8000c10 <__udivmoddi4+0x60>
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	e6fd      	b.n	8000c3c <__udivmoddi4+0x8c>
 8000e40:	4543      	cmp	r3, r8
 8000e42:	d2e5      	bcs.n	8000e10 <__udivmoddi4+0x260>
 8000e44:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e48:	eb69 0104 	sbc.w	r1, r9, r4
 8000e4c:	3801      	subs	r0, #1
 8000e4e:	e7df      	b.n	8000e10 <__udivmoddi4+0x260>
 8000e50:	4608      	mov	r0, r1
 8000e52:	e7d2      	b.n	8000dfa <__udivmoddi4+0x24a>
 8000e54:	4660      	mov	r0, ip
 8000e56:	e78d      	b.n	8000d74 <__udivmoddi4+0x1c4>
 8000e58:	4681      	mov	r9, r0
 8000e5a:	e7b9      	b.n	8000dd0 <__udivmoddi4+0x220>
 8000e5c:	4666      	mov	r6, ip
 8000e5e:	e775      	b.n	8000d4c <__udivmoddi4+0x19c>
 8000e60:	4630      	mov	r0, r6
 8000e62:	e74a      	b.n	8000cfa <__udivmoddi4+0x14a>
 8000e64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e68:	4439      	add	r1, r7
 8000e6a:	e713      	b.n	8000c94 <__udivmoddi4+0xe4>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	443c      	add	r4, r7
 8000e70:	e724      	b.n	8000cbc <__udivmoddi4+0x10c>
 8000e72:	bf00      	nop

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <MPU9250_OnActivate>:

static uint8_t _buffer[21];
static uint8_t _mag_adjust[3];

__weak void MPU9250_OnActivate()
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	//HAL_Delay(10);
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
	...

08000e88 <MPU9250_Activate>:

static inline void MPU9250_Activate()
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
	MPU9250_OnActivate();
 8000e8c:	f7ff fff4 	bl	8000e78 <MPU9250_OnActivate>
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e96:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <MPU9250_Activate+0x18>)
 8000e98:	f003 f878 	bl	8003f8c <HAL_GPIO_WritePin>
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40020000 	.word	0x40020000

08000ea4 <MPU9250_Deactivate>:

static inline void MPU9250_Deactivate()
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eae:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <MPU9250_Deactivate+0x14>)
 8000eb0:	f003 f86c 	bl	8003f8c <HAL_GPIO_WritePin>
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40020000 	.word	0x40020000

08000ebc <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af02      	add	r7, sp, #8
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 8000eca:	f107 020f 	add.w	r2, r7, #15
 8000ece:	1df9      	adds	r1, r7, #7
 8000ed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <SPIx_WriteRead+0x38>)
 8000eda:	f004 fff1 	bl	8005ec0 <HAL_SPI_TransmitReceive>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <SPIx_WriteRead+0x2c>
	{
		return -1;
 8000ee4:	23ff      	movs	r3, #255	; 0xff
 8000ee6:	e000      	b.n	8000eea <SPIx_WriteRead+0x2e>
	}
	else
	{
	}
	return receivedbyte;
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200004fc 	.word	0x200004fc

08000ef8 <MPU_SPI_Write>:

void MPU_SPI_Write (uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	70fb      	strb	r3, [r7, #3]
 8000f04:	4613      	mov	r3, r2
 8000f06:	803b      	strh	r3, [r7, #0]
	MPU9250_Activate();
 8000f08:	f7ff ffbe 	bl	8000e88 <MPU9250_Activate>
	SPIx_WriteRead(WriteAddr);
 8000f0c:	78fb      	ldrb	r3, [r7, #3]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ffd4 	bl	8000ebc <SPIx_WriteRead>
	while(NumByteToWrite>=0x01)
 8000f14:	e00a      	b.n	8000f2c <MPU_SPI_Write+0x34>
	{
		SPIx_WriteRead(*pBuffer);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ffce 	bl	8000ebc <SPIx_WriteRead>
		NumByteToWrite--;
 8000f20:	883b      	ldrh	r3, [r7, #0]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	607b      	str	r3, [r7, #4]
	while(NumByteToWrite>=0x01)
 8000f2c:	883b      	ldrh	r3, [r7, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d1f1      	bne.n	8000f16 <MPU_SPI_Write+0x1e>
	}
	MPU9250_Deactivate();
 8000f32:	f7ff ffb7 	bl	8000ea4 <MPU9250_Deactivate>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <MPU_SPI_Read>:

void MPU_SPI_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	70fb      	strb	r3, [r7, #3]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	803b      	strh	r3, [r7, #0]
	MPU9250_Activate();
 8000f50:	f7ff ff9a 	bl	8000e88 <MPU9250_Activate>
	uint8_t data = ReadAddr | READWRITE_CMD;
 8000f54:	2280      	movs	r2, #128	; 0x80
 8000f56:	78fb      	ldrb	r3, [r7, #3]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&MPU9250_SPI, &data, 1, HAL_MAX_DELAY);
 8000f5e:	f107 010f 	add.w	r1, r7, #15
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f66:	2201      	movs	r2, #1
 8000f68:	4809      	ldr	r0, [pc, #36]	; (8000f90 <MPU_SPI_Read+0x50>)
 8000f6a:	f004 fd5c 	bl	8005a26 <HAL_SPI_Transmit>
	HAL_Delay(1);
 8000f6e:	2001      	movs	r0, #1
 8000f70:	f002 fc96 	bl	80038a0 <HAL_Delay>
	HAL_SPI_Receive(&MPU9250_SPI, pBuffer, NumByteToRead, HAL_MAX_DELAY);
 8000f74:	883a      	ldrh	r2, [r7, #0]
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	4804      	ldr	r0, [pc, #16]	; (8000f90 <MPU_SPI_Read+0x50>)
 8000f7e:	f004 fe8e 	bl	8005c9e <HAL_SPI_Receive>
	MPU9250_Deactivate();
 8000f82:	f7ff ff8f 	bl	8000ea4 <MPU9250_Deactivate>
}
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200004fc 	.word	0x200004fc

08000f94 <writeRegister>:

/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	460a      	mov	r2, r1
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Write(&data, subAddress, 1);
 8000fa4:	79f9      	ldrb	r1, [r7, #7]
 8000fa6:	1dbb      	adds	r3, r7, #6
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ffa4 	bl	8000ef8 <MPU_SPI_Write>
	HAL_Delay(10);
 8000fb0:	200a      	movs	r0, #10
 8000fb2:	f002 fc75 	bl	80038a0 <HAL_Delay>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	603a      	str	r2, [r7, #0]
 8000fc8:	71fb      	strb	r3, [r7, #7]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Read(dest, subAddress, count);
 8000fce:	79bb      	ldrb	r3, [r7, #6]
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	6838      	ldr	r0, [r7, #0]
 8000fd8:	f7ff ffb2 	bl	8000f40 <MPU_SPI_Read>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for write
	writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 8000ff4:	2325      	movs	r3, #37	; 0x25
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ffca 	bl	8000f94 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 8001000:	2226      	movs	r2, #38	; 0x26
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	4619      	mov	r1, r3
 8001006:	4610      	mov	r0, r2
 8001008:	f7ff ffc4 	bl	8000f94 <writeRegister>

	// store the data for write
	writeRegister(I2C_SLV0_DO,data);
 800100c:	2263      	movs	r2, #99	; 0x63
 800100e:	79bb      	ldrb	r3, [r7, #6]
 8001010:	4619      	mov	r1, r3
 8001012:	4610      	mov	r0, r2
 8001014:	f7ff ffbe 	bl	8000f94 <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 8001018:	2227      	movs	r2, #39	; 0x27
 800101a:	2380      	movs	r3, #128	; 0x80
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4619      	mov	r1, r3
 8001024:	4610      	mov	r0, r2
 8001026:	f7ff ffb5 	bl	8000f94 <writeRegister>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	603a      	str	r2, [r7, #0]
 800103c:	71fb      	strb	r3, [r7, #7]
 800103e:	460b      	mov	r3, r1
 8001040:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for read
	writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 8001042:	2025      	movs	r0, #37	; 0x25
 8001044:	220c      	movs	r2, #12
 8001046:	2380      	movs	r3, #128	; 0x80
 8001048:	4313      	orrs	r3, r2
 800104a:	b2db      	uxtb	r3, r3
 800104c:	4619      	mov	r1, r3
 800104e:	f7ff ffa1 	bl	8000f94 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 8001052:	2226      	movs	r2, #38	; 0x26
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	4619      	mov	r1, r3
 8001058:	4610      	mov	r0, r2
 800105a:	f7ff ff9b 	bl	8000f94 <writeRegister>

	// enable I2C and request the bytes
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 800105e:	2027      	movs	r0, #39	; 0x27
 8001060:	2280      	movs	r2, #128	; 0x80
 8001062:	79bb      	ldrb	r3, [r7, #6]
 8001064:	4313      	orrs	r3, r2
 8001066:	b2db      	uxtb	r3, r3
 8001068:	4619      	mov	r1, r3
 800106a:	f7ff ff93 	bl	8000f94 <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 800106e:	2001      	movs	r0, #1
 8001070:	f002 fc16 	bl	80038a0 <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(EXT_SENS_DATA_00,count,dest);
 8001074:	2049      	movs	r0, #73	; 0x49
 8001076:	79bb      	ldrb	r3, [r7, #6]
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	4619      	mov	r1, r3
 800107c:	f7ff ff9f 	bl	8000fbe <readRegisters>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(){
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I,1,_buffer);
 800108c:	2375      	movs	r3, #117	; 0x75
 800108e:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <whoAmI+0x18>)
 8001090:	2101      	movs	r1, #1
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff93 	bl	8000fbe <readRegisters>

	// return the register value
	return _buffer[0];
 8001098:	4b01      	ldr	r3, [pc, #4]	; (80010a0 <whoAmI+0x18>)
 800109a:	781b      	ldrb	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000094 	.word	0x20000094

080010a4 <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readAK8963Registers(AK8963_WHO_AM_I,1,_buffer);
 80010a8:	2300      	movs	r3, #0
 80010aa:	4a04      	ldr	r2, [pc, #16]	; (80010bc <whoAmIAK8963+0x18>)
 80010ac:	2101      	movs	r1, #1
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff ffbf 	bl	8001032 <readAK8963Registers>
	// return the register value
	return _buffer[0];
 80010b4:	4b01      	ldr	r3, [pc, #4]	; (80010bc <whoAmIAK8963+0x18>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000094 	.word	0x20000094

080010c0 <MPU9250_Init>:

/*---------------------------------------------------------------*/
/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init()
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 80010c6:	236b      	movs	r3, #107	; 0x6b
 80010c8:	2201      	movs	r2, #1
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff61 	bl	8000f94 <writeRegister>
	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 80010d2:	236a      	movs	r3, #106	; 0x6a
 80010d4:	2220      	movs	r2, #32
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff5b 	bl	8000f94 <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 80010de:	2324      	movs	r3, #36	; 0x24
 80010e0:	220d      	movs	r2, #13
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff55 	bl	8000f94 <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80010ea:	230a      	movs	r3, #10
 80010ec:	2200      	movs	r2, #0
 80010ee:	4611      	mov	r1, r2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ff77 	bl	8000fe4 <writeAK8963Register>
	// reset the MPU9250
	writeRegister(PWR_MGMNT_1,PWR_RESET);
 80010f6:	236b      	movs	r3, #107	; 0x6b
 80010f8:	2280      	movs	r2, #128	; 0x80
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff49 	bl	8000f94 <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(100);
 8001102:	2064      	movs	r0, #100	; 0x64
 8001104:	f002 fbcc 	bl	80038a0 <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
 8001108:	230b      	movs	r3, #11
 800110a:	2201      	movs	r2, #1
 800110c:	4611      	mov	r1, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff68 	bl	8000fe4 <writeAK8963Register>
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 8001114:	236b      	movs	r3, #107	; 0x6b
 8001116:	2201      	movs	r2, #1
 8001118:	4611      	mov	r1, r2
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff ff3a 	bl	8000f94 <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI();
 8001120:	f7ff ffb2 	bl	8001088 <whoAmI>
 8001124:	4603      	mov	r3, r0
 8001126:	71fb      	strb	r3, [r7, #7]
	if((who != 0x71) &&( who != 0x73))
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2b71      	cmp	r3, #113	; 0x71
 800112c:	d004      	beq.n	8001138 <MPU9250_Init+0x78>
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	2b73      	cmp	r3, #115	; 0x73
 8001132:	d001      	beq.n	8001138 <MPU9250_Init+0x78>
	{
		return 1;
 8001134:	2301      	movs	r3, #1
 8001136:	e06c      	b.n	8001212 <MPU9250_Init+0x152>
	}

	// enable accelerometer and gyro
	writeRegister(PWR_MGMNT_2,SEN_ENABLE);
 8001138:	236c      	movs	r3, #108	; 0x6c
 800113a:	2200      	movs	r2, #0
 800113c:	4611      	mov	r1, r2
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff28 	bl	8000f94 <writeRegister>

	// setting accel range to 16G as default
	writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_16G);
 8001144:	231c      	movs	r3, #28
 8001146:	2218      	movs	r2, #24
 8001148:	4611      	mov	r1, r2
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff22 	bl	8000f94 <writeRegister>

	// setting the gyro range to 2000DPS as default
	writeRegister(GYRO_CONFIG,GYRO_FS_SEL_250DPS);
 8001150:	231b      	movs	r3, #27
 8001152:	2200      	movs	r2, #0
 8001154:	4611      	mov	r1, r2
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff1c 	bl	8000f94 <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(ACCEL_CONFIG2,DLPF_184);
 800115c:	231d      	movs	r3, #29
 800115e:	2201      	movs	r2, #1
 8001160:	4611      	mov	r1, r2
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ff16 	bl	8000f94 <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(CONFIG,DLPF_184);
 8001168:	231a      	movs	r3, #26
 800116a:	2201      	movs	r2, #1
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff10 	bl	8000f94 <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(SMPDIV,0x00);
 8001174:	2319      	movs	r3, #25
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff0b 	bl	8000f94 <writeRegister>

	// enable I2C master mode
	writeRegister(USER_CTRL,I2C_MST_EN);
 800117e:	236a      	movs	r3, #106	; 0x6a
 8001180:	2220      	movs	r2, #32
 8001182:	4611      	mov	r1, r2
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff05 	bl	8000f94 <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL,I2C_MST_CLK);
 800118a:	2324      	movs	r3, #36	; 0x24
 800118c:	220d      	movs	r2, #13
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff feff 	bl	8000f94 <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 0x48 )
 8001196:	f7ff ff85 	bl	80010a4 <whoAmIAK8963>
 800119a:	4603      	mov	r3, r0
 800119c:	2b48      	cmp	r3, #72	; 0x48
 800119e:	d001      	beq.n	80011a4 <MPU9250_Init+0xe4>
	{
		return 1;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e036      	b.n	8001212 <MPU9250_Init+0x152>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80011a4:	230a      	movs	r3, #10
 80011a6:	2200      	movs	r2, #0
 80011a8:	4611      	mov	r1, r2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff1a 	bl	8000fe4 <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 80011b0:	2064      	movs	r0, #100	; 0x64
 80011b2:	f002 fb75 	bl	80038a0 <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM);
 80011b6:	230a      	movs	r3, #10
 80011b8:	220f      	movs	r2, #15
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff11 	bl	8000fe4 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80011c2:	2064      	movs	r0, #100	; 0x64
 80011c4:	f002 fb6c 	bl	80038a0 <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(AK8963_ASA, 3, _mag_adjust);
 80011c8:	2310      	movs	r3, #16
 80011ca:	4a14      	ldr	r2, [pc, #80]	; (800121c <MPU9250_Init+0x15c>)
 80011cc:	2103      	movs	r1, #3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff ff2f 	bl	8001032 <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80011d4:	230a      	movs	r3, #10
 80011d6:	2200      	movs	r2, #0
 80011d8:	4611      	mov	r1, r2
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff02 	bl	8000fe4 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80011e0:	2064      	movs	r0, #100	; 0x64
 80011e2:	f002 fb5d 	bl	80038a0 <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2);
 80011e6:	230a      	movs	r3, #10
 80011e8:	2216      	movs	r2, #22
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fef9 	bl	8000fe4 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80011f2:	2064      	movs	r0, #100	; 0x64
 80011f4:	f002 fb54 	bl	80038a0 <HAL_Delay>

	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 80011f8:	236b      	movs	r3, #107	; 0x6b
 80011fa:	2201      	movs	r2, #1
 80011fc:	4611      	mov	r1, r2
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fec8 	bl	8000f94 <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(AK8963_HXL,7,_buffer);
 8001204:	2303      	movs	r3, #3
 8001206:	4a06      	ldr	r2, [pc, #24]	; (8001220 <MPU9250_Init+0x160>)
 8001208:	2107      	movs	r1, #7
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff11 	bl	8001032 <readAK8963Registers>

	// successful init, return 0
	return 0;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200000ac 	.word	0x200000ac
 8001220:	20000094 	.word	0x20000094

08001224 <MPU9250_GetData>:
	writeRegister(SMPDIV, srd);
}

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(int16_t* AccData, int16_t* MagData, int16_t* GyroData)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
	// grab the data from the MPU9250
	readRegisters(ACCEL_OUT, 21, _buffer);
 8001230:	233b      	movs	r3, #59	; 0x3b
 8001232:	4a63      	ldr	r2, [pc, #396]	; (80013c0 <MPU9250_GetData+0x19c>)
 8001234:	2115      	movs	r1, #21
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fec1 	bl	8000fbe <readRegisters>

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 800123c:	4b60      	ldr	r3, [pc, #384]	; (80013c0 <MPU9250_GetData+0x19c>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	b21a      	sxth	r2, r3
 8001244:	4b5e      	ldr	r3, [pc, #376]	; (80013c0 <MPU9250_GetData+0x19c>)
 8001246:	785b      	ldrb	r3, [r3, #1]
 8001248:	b21b      	sxth	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	b21a      	sxth	r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	801a      	strh	r2, [r3, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 8001252:	4b5b      	ldr	r3, [pc, #364]	; (80013c0 <MPU9250_GetData+0x19c>)
 8001254:	789b      	ldrb	r3, [r3, #2]
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	b219      	sxth	r1, r3
 800125a:	4b59      	ldr	r3, [pc, #356]	; (80013c0 <MPU9250_GetData+0x19c>)
 800125c:	78db      	ldrb	r3, [r3, #3]
 800125e:	b21a      	sxth	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	3302      	adds	r3, #2
 8001264:	430a      	orrs	r2, r1
 8001266:	b212      	sxth	r2, r2
 8001268:	801a      	strh	r2, [r3, #0]
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 800126a:	4b55      	ldr	r3, [pc, #340]	; (80013c0 <MPU9250_GetData+0x19c>)
 800126c:	791b      	ldrb	r3, [r3, #4]
 800126e:	021b      	lsls	r3, r3, #8
 8001270:	b219      	sxth	r1, r3
 8001272:	4b53      	ldr	r3, [pc, #332]	; (80013c0 <MPU9250_GetData+0x19c>)
 8001274:	795b      	ldrb	r3, [r3, #5]
 8001276:	b21a      	sxth	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	3304      	adds	r3, #4
 800127c:	430a      	orrs	r2, r1
 800127e:	b212      	sxth	r2, r2
 8001280:	801a      	strh	r2, [r3, #0]
	GyroData[0] = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 8001282:	4b4f      	ldr	r3, [pc, #316]	; (80013c0 <MPU9250_GetData+0x19c>)
 8001284:	7a1b      	ldrb	r3, [r3, #8]
 8001286:	021b      	lsls	r3, r3, #8
 8001288:	b21a      	sxth	r2, r3
 800128a:	4b4d      	ldr	r3, [pc, #308]	; (80013c0 <MPU9250_GetData+0x19c>)
 800128c:	7a5b      	ldrb	r3, [r3, #9]
 800128e:	b21b      	sxth	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b21a      	sxth	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8001298:	4b49      	ldr	r3, [pc, #292]	; (80013c0 <MPU9250_GetData+0x19c>)
 800129a:	7a9b      	ldrb	r3, [r3, #10]
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	b219      	sxth	r1, r3
 80012a0:	4b47      	ldr	r3, [pc, #284]	; (80013c0 <MPU9250_GetData+0x19c>)
 80012a2:	7adb      	ldrb	r3, [r3, #11]
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3302      	adds	r3, #2
 80012aa:	430a      	orrs	r2, r1
 80012ac:	b212      	sxth	r2, r2
 80012ae:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 80012b0:	4b43      	ldr	r3, [pc, #268]	; (80013c0 <MPU9250_GetData+0x19c>)
 80012b2:	7b1b      	ldrb	r3, [r3, #12]
 80012b4:	021b      	lsls	r3, r3, #8
 80012b6:	b219      	sxth	r1, r3
 80012b8:	4b41      	ldr	r3, [pc, #260]	; (80013c0 <MPU9250_GetData+0x19c>)
 80012ba:	7b5b      	ldrb	r3, [r3, #13]
 80012bc:	b21a      	sxth	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3304      	adds	r3, #4
 80012c2:	430a      	orrs	r2, r1
 80012c4:	b212      	sxth	r2, r2
 80012c6:	801a      	strh	r2, [r3, #0]

	int16_t magx = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 80012c8:	4b3d      	ldr	r3, [pc, #244]	; (80013c0 <MPU9250_GetData+0x19c>)
 80012ca:	7bdb      	ldrb	r3, [r3, #15]
 80012cc:	021b      	lsls	r3, r3, #8
 80012ce:	b21a      	sxth	r2, r3
 80012d0:	4b3b      	ldr	r3, [pc, #236]	; (80013c0 <MPU9250_GetData+0x19c>)
 80012d2:	7b9b      	ldrb	r3, [r3, #14]
 80012d4:	b21b      	sxth	r3, r3
 80012d6:	4313      	orrs	r3, r2
 80012d8:	82fb      	strh	r3, [r7, #22]
	int16_t magy = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 80012da:	4b39      	ldr	r3, [pc, #228]	; (80013c0 <MPU9250_GetData+0x19c>)
 80012dc:	7c5b      	ldrb	r3, [r3, #17]
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	4b37      	ldr	r3, [pc, #220]	; (80013c0 <MPU9250_GetData+0x19c>)
 80012e4:	7c1b      	ldrb	r3, [r3, #16]
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	4313      	orrs	r3, r2
 80012ea:	82bb      	strh	r3, [r7, #20]
	int16_t magz = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 80012ec:	4b34      	ldr	r3, [pc, #208]	; (80013c0 <MPU9250_GetData+0x19c>)
 80012ee:	7cdb      	ldrb	r3, [r3, #19]
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	4b32      	ldr	r3, [pc, #200]	; (80013c0 <MPU9250_GetData+0x19c>)
 80012f6:	7c9b      	ldrb	r3, [r3, #18]
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	4313      	orrs	r3, r2
 80012fc:	827b      	strh	r3, [r7, #18]

	MagData[0] = (int16_t)((float)magx * ((float)(_mag_adjust[0] - 128) / 256.0f + 1.0f));
 80012fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001302:	ee07 3a90 	vmov	s15, r3
 8001306:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800130a:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <MPU9250_GetData+0x1a0>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	3b80      	subs	r3, #128	; 0x80
 8001310:	ee07 3a90 	vmov	s15, r3
 8001314:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001318:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 80013c8 <MPU9250_GetData+0x1a4>
 800131c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001320:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001324:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800132c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001330:	ee17 3a90 	vmov	r3, s15
 8001334:	b21a      	sxth	r2, r3
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	801a      	strh	r2, [r3, #0]
	MagData[1] = (int16_t)((float)magy * ((float)(_mag_adjust[1] - 128) / 256.0f + 1.0f));
 800133a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800133e:	ee07 3a90 	vmov	s15, r3
 8001342:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001346:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <MPU9250_GetData+0x1a0>)
 8001348:	785b      	ldrb	r3, [r3, #1]
 800134a:	3b80      	subs	r3, #128	; 0x80
 800134c:	ee07 3a90 	vmov	s15, r3
 8001350:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001354:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 80013c8 <MPU9250_GetData+0x1a4>
 8001358:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800135c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001360:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	3302      	adds	r3, #2
 800136c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001370:	ee17 2a90 	vmov	r2, s15
 8001374:	b212      	sxth	r2, r2
 8001376:	801a      	strh	r2, [r3, #0]
	MagData[2] = (int16_t)((float)magz * ((float)(_mag_adjust[2] - 128) / 256.0f + 1.0f));
 8001378:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800137c:	ee07 3a90 	vmov	s15, r3
 8001380:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MPU9250_GetData+0x1a0>)
 8001386:	789b      	ldrb	r3, [r3, #2]
 8001388:	3b80      	subs	r3, #128	; 0x80
 800138a:	ee07 3a90 	vmov	s15, r3
 800138e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001392:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 80013c8 <MPU9250_GetData+0x1a4>
 8001396:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800139a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800139e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80013a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	3304      	adds	r3, #4
 80013aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ae:	ee17 2a90 	vmov	r2, s15
 80013b2:	b212      	sxth	r2, r2
 80013b4:	801a      	strh	r2, [r3, #0]
}
 80013b6:	bf00      	nop
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000094 	.word	0x20000094
 80013c4:	200000ac 	.word	0x200000ac
 80013c8:	43800000 	.word	0x43800000

080013cc <am2320_Init>:
 */


#include "am2320.h"

Am2320_HandleTypeDef am2320_Init(I2C_HandleTypeDef* i2c_handle,uint8_t device_address) {
 80013cc:	b490      	push	{r4, r7}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	4613      	mov	r3, r2
 80013d8:	71fb      	strb	r3, [r7, #7]
	Am2320_HandleTypeDef AM2320_;
	AM2320_.i2c_handle = i2c_handle;
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	613b      	str	r3, [r7, #16]
	AM2320_.device_address = device_address;
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	753b      	strb	r3, [r7, #20]
	return AM2320_;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	461c      	mov	r4, r3
 80013e6:	f107 0310 	add.w	r3, r7, #16
 80013ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	3720      	adds	r7, #32
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc90      	pop	{r4, r7}
 80013f8:	4770      	bx	lr
	...

080013fc <am2320_ReadValue>:

uint8_t am2320_ReadValue(Am2320_HandleTypeDef *am2320) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af02      	add	r7, sp, #8
 8001402:	6078      	str	r0, [r7, #4]
	uint8_t registers[3] = { 0x03, 0x00, 0x04 };
 8001404:	4a26      	ldr	r2, [pc, #152]	; (80014a0 <am2320_ReadValue+0xa4>)
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	4611      	mov	r1, r2
 800140e:	8019      	strh	r1, [r3, #0]
 8001410:	3302      	adds	r3, #2
 8001412:	0c12      	lsrs	r2, r2, #16
 8001414:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(am2320->i2c_handle, am2320->device_address, 0x00, 0,
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6818      	ldr	r0, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	791b      	ldrb	r3, [r3, #4]
 800141e:	b299      	uxth	r1, r3
 8001420:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2300      	movs	r3, #0
 8001428:	2200      	movs	r2, #0
 800142a:	f002 ff0d 	bl	8004248 <HAL_I2C_Master_Transmit>
	HAL_MAX_DELAY);
	HAL_Delay(1);
 800142e:	2001      	movs	r0, #1
 8001430:	f002 fa36 	bl	80038a0 <HAL_Delay>
	if (HAL_I2C_Master_Transmit(am2320->i2c_handle, am2320->device_address,registers, 3, HAL_MAX_DELAY) != HAL_OK) {
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6818      	ldr	r0, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	791b      	ldrb	r3, [r3, #4]
 800143c:	b299      	uxth	r1, r3
 800143e:	f107 020c 	add.w	r2, r7, #12
 8001442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	2303      	movs	r3, #3
 800144a:	f002 fefd 	bl	8004248 <HAL_I2C_Master_Transmit>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <am2320_ReadValue+0x5c>
		return 1;
 8001454:	2301      	movs	r3, #1
 8001456:	e01f      	b.n	8001498 <am2320_ReadValue+0x9c>
	}
	HAL_Delay(2);
 8001458:	2002      	movs	r0, #2
 800145a:	f002 fa21 	bl	80038a0 <HAL_Delay>
	if (HAL_I2C_Master_Receive(am2320->i2c_handle, am2320->device_address,am2320->data, 8, HAL_MAX_DELAY) != HAL_OK) {
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6818      	ldr	r0, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	791b      	ldrb	r3, [r3, #4]
 8001466:	b299      	uxth	r1, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	1d5a      	adds	r2, r3, #5
 800146c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	2308      	movs	r3, #8
 8001474:	f002 ffe6 	bl	8004444 <HAL_I2C_Master_Receive>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <am2320_ReadValue+0x86>
		return 2;
 800147e:	2302      	movs	r3, #2
 8001480:	e00a      	b.n	8001498 <am2320_ReadValue+0x9c>
	}
	if (am2320->data[1] != 0x04 && am2320->data[0] != 0x03) {
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	799b      	ldrb	r3, [r3, #6]
 8001486:	2b04      	cmp	r3, #4
 8001488:	d005      	beq.n	8001496 <am2320_ReadValue+0x9a>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	795b      	ldrb	r3, [r3, #5]
 800148e:	2b03      	cmp	r3, #3
 8001490:	d001      	beq.n	8001496 <am2320_ReadValue+0x9a>
		return 3;
 8001492:	2303      	movs	r3, #3
 8001494:	e000      	b.n	8001498 <am2320_ReadValue+0x9c>
	}
	return 0;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	08008500 	.word	0x08008500

080014a4 <am2320_GetTemperatureAndHumidity>:

void am2320_GetTemperatureAndHumidity(Am2320_HandleTypeDef *am2320, float *temperature,float *humidity) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
	int read = am2320_ReadValue(am2320);
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f7ff ffa3 	bl	80013fc <am2320_ReadValue>
 80014b6:	4603      	mov	r3, r0
 80014b8:	613b      	str	r3, [r7, #16]
	if (read) {
		// Simple exception handling
	}
	int16_t temp_temperature = (am2320->data[5] | am2320->data[4] << 8);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	7a9b      	ldrb	r3, [r3, #10]
 80014be:	b21a      	sxth	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	7a5b      	ldrb	r3, [r3, #9]
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	4313      	orrs	r3, r2
 80014ca:	82fb      	strh	r3, [r7, #22]
	if (temp_temperature & 0x8000) {
 80014cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	da06      	bge.n	80014e2 <am2320_GetTemperatureAndHumidity+0x3e>
		temp_temperature = -(int16_t) (temp_temperature & 0x7fff);
 80014d4:	8afb      	ldrh	r3, [r7, #22]
 80014d6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80014da:	b29b      	uxth	r3, r3
 80014dc:	425b      	negs	r3, r3
 80014de:	b29b      	uxth	r3, r3
 80014e0:	82fb      	strh	r3, [r7, #22]
	} else {
		temp_temperature = (int16_t) temp_temperature;
	}
	*temperature = (float) temp_temperature / 10.0;
 80014e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014e6:	ee07 3a90 	vmov	s15, r3
 80014ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ee:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80014f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	edc3 7a00 	vstr	s15, [r3]
	*humidity = (float) (am2320->data[3] | am2320->data[2] << 8) / 10.0;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	7a1b      	ldrb	r3, [r3, #8]
 8001500:	461a      	mov	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	79db      	ldrb	r3, [r3, #7]
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	4313      	orrs	r3, r2
 800150a:	ee07 3a90 	vmov	s15, r3
 800150e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001512:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001516:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	edc3 7a00 	vstr	s15, [r3]
}
 8001520:	bf00      	nop
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <reverse>:
/* USER CODE BEGIN 0 */
// Reverses a string 'str' of length 'len'
//void parseRMC(uint8_t in[][11], uint8_t size)

void reverse(char* str, int len)
{
 8001528:	b480      	push	{r7}
 800152a:	b087      	sub	sp, #28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	3b01      	subs	r3, #1
 800153a:	613b      	str	r3, [r7, #16]
    while (i < j) {
 800153c:	e018      	b.n	8001570 <reverse+0x48>
        temp = str[i];
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	4413      	add	r3, r2
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	441a      	add	r2, r3
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	440b      	add	r3, r1
 8001554:	7812      	ldrb	r2, [r2, #0]
 8001556:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	701a      	strb	r2, [r3, #0]
        i++;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	3301      	adds	r3, #1
 8001568:	617b      	str	r3, [r7, #20]
        j--;
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	3b01      	subs	r3, #1
 800156e:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	429a      	cmp	r2, r3
 8001576:	dbe2      	blt.n	800153e <reverse+0x16>
    }
}
 8001578:	bf00      	nop
 800157a:	bf00      	nop
 800157c:	371c      	adds	r7, #28
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <intToStr>:
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.

int intToStr(int x, char str[], int d)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
    int i = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
    if(x<0)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	da21      	bge.n	80015e2 <intToStr+0x5a>
        x = x*-1;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	425b      	negs	r3, r3
 80015a2:	60fb      	str	r3, [r7, #12]
    while (x) {
 80015a4:	e01d      	b.n	80015e2 <intToStr+0x5a>
        str[i++] = (x % 10) + '0';
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <intToStr+0x98>)
 80015aa:	fb83 1302 	smull	r1, r3, r3, r2
 80015ae:	1099      	asrs	r1, r3, #2
 80015b0:	17d3      	asrs	r3, r2, #31
 80015b2:	1ac9      	subs	r1, r1, r3
 80015b4:	460b      	mov	r3, r1
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	440b      	add	r3, r1
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	1ad1      	subs	r1, r2, r3
 80015be:	b2ca      	uxtb	r2, r1
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	1c59      	adds	r1, r3, #1
 80015c4:	6179      	str	r1, [r7, #20]
 80015c6:	4619      	mov	r1, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	440b      	add	r3, r1
 80015cc:	3230      	adds	r2, #48	; 0x30
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4a12      	ldr	r2, [pc, #72]	; (8001620 <intToStr+0x98>)
 80015d6:	fb82 1203 	smull	r1, r2, r2, r3
 80015da:	1092      	asrs	r2, r2, #2
 80015dc:	17db      	asrs	r3, r3, #31
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	60fb      	str	r3, [r7, #12]
    while (x) {
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1de      	bne.n	80015a6 <intToStr+0x1e>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 80015e8:	e007      	b.n	80015fa <intToStr+0x72>
        str[i++] = '0';
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	1c5a      	adds	r2, r3, #1
 80015ee:	617a      	str	r2, [r7, #20]
 80015f0:	461a      	mov	r2, r3
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	4413      	add	r3, r2
 80015f6:	2230      	movs	r2, #48	; 0x30
 80015f8:	701a      	strb	r2, [r3, #0]
    while (i < d)
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	429a      	cmp	r2, r3
 8001600:	dbf3      	blt.n	80015ea <intToStr+0x62>

    reverse(str, i);
 8001602:	6979      	ldr	r1, [r7, #20]
 8001604:	68b8      	ldr	r0, [r7, #8]
 8001606:	f7ff ff8f 	bl	8001528 <reverse>
    str[i] = '\0';
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	4413      	add	r3, r2
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
    return i;
 8001614:	697b      	ldr	r3, [r7, #20]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	66666667 	.word	0x66666667
 8001624:	00000000 	.word	0x00000000

08001628 <ftoa>:

void ftoa(float n, char* res, int beforepoint, int afterpoint, char sign)
{
 8001628:	b5b0      	push	{r4, r5, r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001632:	6138      	str	r0, [r7, #16]
 8001634:	60f9      	str	r1, [r7, #12]
 8001636:	60ba      	str	r2, [r7, #8]
 8001638:	71fb      	strb	r3, [r7, #7]
    // Extract integer part
    short isnegative = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	84fb      	strh	r3, [r7, #38]	; 0x26
    if(n<0)
 800163e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001642:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164a:	d501      	bpl.n	8001650 <ftoa+0x28>
        isnegative = 1;
 800164c:	2301      	movs	r3, #1
 800164e:	84fb      	strh	r3, [r7, #38]	; 0x26

    int ipart = (int)n;
 8001650:	edd7 7a05 	vldr	s15, [r7, #20]
 8001654:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001658:	ee17 3a90 	vmov	r3, s15
 800165c:	623b      	str	r3, [r7, #32]

    // Extract floating part
    float fpart = n - (float)ipart;
 800165e:	6a3b      	ldr	r3, [r7, #32]
 8001660:	ee07 3a90 	vmov	s15, r3
 8001664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001668:	ed97 7a05 	vldr	s14, [r7, #20]
 800166c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001670:	edc7 7a07 	vstr	s15, [r7, #28]

    // convert integer part to string
    int i = intToStr(ipart, res, beforepoint);
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	6939      	ldr	r1, [r7, #16]
 8001678:	6a38      	ldr	r0, [r7, #32]
 800167a:	f7ff ff85 	bl	8001588 <intToStr>
 800167e:	61b8      	str	r0, [r7, #24]

    // check for display option after point
    if (afterpoint != 0) {
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d03e      	beq.n	8001704 <ftoa+0xdc>
        res[i] = '.'; // add dot
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4413      	add	r3, r2
 800168c:	222e      	movs	r2, #46	; 0x2e
 800168e:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 8001690:	69f8      	ldr	r0, [r7, #28]
 8001692:	f7fe ff1d 	bl	80004d0 <__aeabi_f2d>
 8001696:	4604      	mov	r4, r0
 8001698:	460d      	mov	r5, r1
 800169a:	68b8      	ldr	r0, [r7, #8]
 800169c:	f7fe ff06 	bl	80004ac <__aeabi_i2d>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	ec43 2b11 	vmov	d1, r2, r3
 80016a8:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8001710 <ftoa+0xe8>
 80016ac:	f005 ff66 	bl	800757c <pow>
 80016b0:	ec53 2b10 	vmov	r2, r3, d0
 80016b4:	4620      	mov	r0, r4
 80016b6:	4629      	mov	r1, r5
 80016b8:	f7fe ff62 	bl	8000580 <__aeabi_dmul>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	f7ff fa0c 	bl	8000ae0 <__aeabi_d2f>
 80016c8:	4603      	mov	r3, r0
 80016ca:	61fb      	str	r3, [r7, #28]

        intToStr((int)fpart, res + i + 1, afterpoint);
 80016cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80016d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	3301      	adds	r3, #1
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4413      	add	r3, r2
 80016dc:	68ba      	ldr	r2, [r7, #8]
 80016de:	4619      	mov	r1, r3
 80016e0:	ee17 0a90 	vmov	r0, s15
 80016e4:	f7ff ff50 	bl	8001588 <intToStr>
        if(sign){
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00a      	beq.n	8001704 <ftoa+0xdc>
			if(isnegative)
 80016ee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <ftoa+0xd6>
				res[0] = '-';
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	222d      	movs	r2, #45	; 0x2d
 80016fa:	701a      	strb	r2, [r3, #0]
			else
				res[0] = '+';
        }
    }
}
 80016fc:	e002      	b.n	8001704 <ftoa+0xdc>
				res[0] = '+';
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	222b      	movs	r2, #43	; 0x2b
 8001702:	701a      	strb	r2, [r3, #0]
}
 8001704:	bf00      	nop
 8001706:	3728      	adds	r7, #40	; 0x28
 8001708:	46bd      	mov	sp, r7
 800170a:	bdb0      	pop	{r4, r5, r7, pc}
 800170c:	f3af 8000 	nop.w
 8001710:	00000000 	.word	0x00000000
 8001714:	40240000 	.word	0x40240000

08001718 <HAL_UARTEx_RxEventCallback>:

/*void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	HAL_UART_Receive_IT(&huart2, buff, sizeof(buff));
}*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	807b      	strh	r3, [r7, #2]
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	DataRecieved = Size;
 8001724:	4a04      	ldr	r2, [pc, #16]	; (8001738 <HAL_UARTEx_RxEventCallback+0x20>)
 8001726:	887b      	ldrh	r3, [r7, #2]
 8001728:	8013      	strh	r3, [r2, #0]
	//HAL_UARTEx_ReceiveToIdle_IT(&huart2, buff, sizeof(buff));
	//hal_st1 = HAL_UARTEx_ReceiveToIdle_IT(&huart1, GPSbuffer, sizeof(GPSbuffer));

}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	200000b0 	.word	0x200000b0

0800173c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	uint32_t er = huart->ErrorCode;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	60fb      	str	r3, [r7, #12]
}
 800174a:	bf00      	nop
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <parseFrame>:
/*void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
	DataRecieved = 1;
}*/


void parseFrame(uint8_t* GPSparse, uint8_t* msg, uint8_t* framelen, uint8_t nframes, uint8_t maxlen, uint8_t linenumber){
 8001756:	b480      	push	{r7}
 8001758:	b087      	sub	sp, #28
 800175a:	af00      	add	r7, sp, #0
 800175c:	60f8      	str	r0, [r7, #12]
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	70fb      	strb	r3, [r7, #3]
    int parsepos = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < nframes; i++){
 8001768:	2300      	movs	r3, #0
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	e042      	b.n	80017f4 <parseFrame+0x9e>
      while(!((GPSparse[200*linenumber + parsepos] == ',') || (GPSparse[200*linenumber + parsepos] == '*'))){ //dokud se nenarazi na oddelovac ,
        msg[i*maxlen + framelen[i]] = GPSparse[200*linenumber + parsepos];
 800176e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001772:	22c8      	movs	r2, #200	; 0xc8
 8001774:	fb02 f203 	mul.w	r2, r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	4413      	add	r3, r2
 800177c:	461a      	mov	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	441a      	add	r2, r3
 8001782:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001786:	6939      	ldr	r1, [r7, #16]
 8001788:	fb01 f303 	mul.w	r3, r1, r3
 800178c:	6939      	ldr	r1, [r7, #16]
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	4401      	add	r1, r0
 8001792:	7809      	ldrb	r1, [r1, #0]
 8001794:	440b      	add	r3, r1
 8001796:	4619      	mov	r1, r3
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	440b      	add	r3, r1
 800179c:	7812      	ldrb	r2, [r2, #0]
 800179e:	701a      	strb	r2, [r3, #0]
        framelen[i]++;
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	781a      	ldrb	r2, [r3, #0]
 80017a8:	3201      	adds	r2, #1
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	701a      	strb	r2, [r3, #0]
        parsepos++;
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	3301      	adds	r3, #1
 80017b2:	617b      	str	r3, [r7, #20]
      while(!((GPSparse[200*linenumber + parsepos] == ',') || (GPSparse[200*linenumber + parsepos] == '*'))){ //dokud se nenarazi na oddelovac ,
 80017b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017b8:	22c8      	movs	r2, #200	; 0xc8
 80017ba:	fb02 f203 	mul.w	r2, r2, r3
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	4413      	add	r3, r2
 80017c2:	461a      	mov	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4413      	add	r3, r2
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b2c      	cmp	r3, #44	; 0x2c
 80017cc:	d00c      	beq.n	80017e8 <parseFrame+0x92>
 80017ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017d2:	22c8      	movs	r2, #200	; 0xc8
 80017d4:	fb02 f203 	mul.w	r2, r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	4413      	add	r3, r2
 80017dc:	461a      	mov	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	4413      	add	r3, r2
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b2a      	cmp	r3, #42	; 0x2a
 80017e6:	d1c2      	bne.n	800176e <parseFrame+0x18>
      }
      parsepos++;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	3301      	adds	r3, #1
 80017ec:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < nframes; i++){
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	3301      	adds	r3, #1
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	78fb      	ldrb	r3, [r7, #3]
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	dbdb      	blt.n	80017b4 <parseFrame+0x5e>
    }
  parsepos = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
}
 8001800:	bf00      	nop
 8001802:	371c      	adds	r7, #28
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <mainParse>:

void mainParse(uint8_t* buffer, uint8_t* parse, uint8_t linelen, uint8_t* nsat){
 800180c:	b480      	push	{r7}
 800180e:	b08b      	sub	sp, #44	; 0x2c
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	4613      	mov	r3, r2
 800181a:	71fb      	strb	r3, [r7, #7]
	uint8_t k[15] = {};		//k-ty znak v n-tem radku
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	f107 0318 	add.w	r3, r7, #24
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	f8c3 2007 	str.w	r2, [r3, #7]
	uint16_t iter = 0;		//iteracni promenna
 800182e:	2300      	movs	r3, #0
 8001830:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t n = 0;			//n-ty radek
 8001832:	2300      	movs	r3, #0
 8001834:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	while(iter < DataRecieved){
 8001838:	e072      	b.n	8001920 <mainParse+0x114>
		if(!(buffer[iter] == '\n') || (buffer[iter] == '\r')){ //dokud nenastane konec radku
 800183a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	4413      	add	r3, r2
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b0a      	cmp	r3, #10
 8001844:	d105      	bne.n	8001852 <mainParse+0x46>
 8001846:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b0d      	cmp	r3, #13
 8001850:	d14c      	bne.n	80018ec <mainParse+0xe0>
			parse[n*linelen +  k[n]] = buffer[iter];
 8001852:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	441a      	add	r2, r3
 8001858:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800185c:	79f9      	ldrb	r1, [r7, #7]
 800185e:	fb01 f303 	mul.w	r3, r1, r3
 8001862:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8001866:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800186a:	4401      	add	r1, r0
 800186c:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8001870:	440b      	add	r3, r1
 8001872:	4619      	mov	r1, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	440b      	add	r3, r1
 8001878:	7812      	ldrb	r2, [r2, #0]
 800187a:	701a      	strb	r2, [r3, #0]
			if((k[n] == 7) && (parse[n*linelen + 5] == 'V')){ //hledani GSV zpravy, 7. znak je pocet satelitu
 800187c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001880:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001884:	4413      	add	r3, r2
 8001886:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800188a:	2b07      	cmp	r3, #7
 800188c:	d11f      	bne.n	80018ce <mainParse+0xc2>
 800188e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001892:	79fa      	ldrb	r2, [r7, #7]
 8001894:	fb02 f303 	mul.w	r3, r2, r3
 8001898:	3305      	adds	r3, #5
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	4413      	add	r3, r2
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b56      	cmp	r3, #86	; 0x56
 80018a2:	d114      	bne.n	80018ce <mainParse+0xc2>
				*nsat = parse[n*linelen + k[n]] - '0';
 80018a4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80018a8:	79fa      	ldrb	r2, [r7, #7]
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80018b2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80018b6:	440a      	add	r2, r1
 80018b8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80018bc:	4413      	add	r3, r2
 80018be:	461a      	mov	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	4413      	add	r3, r2
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	3b30      	subs	r3, #48	; 0x30
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	701a      	strb	r2, [r3, #0]
			}
			k[n]++; //posun o znak dopredu
 80018ce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80018d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018d6:	441a      	add	r2, r3
 80018d8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80018dc:	3201      	adds	r2, #1
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80018e4:	440b      	add	r3, r1
 80018e6:	f803 2c14 	strb.w	r2, [r3, #-20]
 80018ea:	e016      	b.n	800191a <mainParse+0x10e>
		}
		else{
			parse[n*linelen + k[n]] = '\n'; //enter na konec radku
 80018ec:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80018f0:	79fa      	ldrb	r2, [r7, #7]
 80018f2:	fb02 f303 	mul.w	r3, r2, r3
 80018f6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80018fa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80018fe:	440a      	add	r2, r1
 8001900:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8001904:	4413      	add	r3, r2
 8001906:	461a      	mov	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	4413      	add	r3, r2
 800190c:	220a      	movs	r2, #10
 800190e:	701a      	strb	r2, [r3, #0]
			n++; //novy radek
 8001910:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001914:	3301      	adds	r3, #1
 8001916:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		iter++; //posun v RAW zprave - GPSbuffer
 800191a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800191c:	3301      	adds	r3, #1
 800191e:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(iter < DataRecieved){
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <mainParse+0x12c>)
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001926:	429a      	cmp	r2, r3
 8001928:	d387      	bcc.n	800183a <mainParse+0x2e>
	}
}
 800192a:	bf00      	nop
 800192c:	bf00      	nop
 800192e:	372c      	adds	r7, #44	; 0x2c
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	200000b0 	.word	0x200000b0

0800193c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	f5ad 5d88 	sub.w	sp, sp, #4352	; 0x1100
 8001942:	b085      	sub	sp, #20
 8001944:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001946:	f001 ff39 	bl	80037bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800194a:	f000 fe4f 	bl	80025ec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800194e:	f001 f825 	bl	800299c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001952:	f000 ff7b 	bl	800284c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001956:	f000 ffa3 	bl	80028a0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800195a:	f000 feb3 	bl	80026c4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800195e:	f000 ffc9 	bl	80028f4 <MX_USART3_UART_Init>
  MX_UART5_Init();
 8001962:	f000 ff49 	bl	80027f8 <MX_UART5_Init>
  MX_SPI1_Init();
 8001966:	f000 fedb 	bl	8002720 <MX_SPI1_Init>
  MX_SPI2_Init();
 800196a:	f000 ff0f 	bl	800278c <MX_SPI2_Init>
  MX_USART6_UART_Init();
 800196e:	f000 ffeb 	bl	8002948 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */



  MPU9250_Init();
 8001972:	f7ff fba5 	bl	80010c0 <MPU9250_Init>

  Am2320_HandleTypeDef Am2320_;
  Am2320_ = am2320_Init(&hi2c1, AM2320_ADDRESS);
 8001976:	f107 0308 	add.w	r3, r7, #8
 800197a:	3b08      	subs	r3, #8
 800197c:	22b8      	movs	r2, #184	; 0xb8
 800197e:	49dc      	ldr	r1, [pc, #880]	; (8001cf0 <main+0x3b4>)
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fd23 	bl	80013cc <am2320_Init>
 8001986:	f107 0308 	add.w	r3, r7, #8
 800198a:	3b08      	subs	r3, #8
 800198c:	f507 5486 	add.w	r4, r7, #4288	; 0x10c0
 8001990:	f104 0408 	add.w	r4, r4, #8
 8001994:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001996:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  MS5607StateTypeDef state;
  state = MS5607_Init(&hspi2, GPIOC, GPIO_PIN_3);
 800199a:	2208      	movs	r2, #8
 800199c:	49d5      	ldr	r1, [pc, #852]	; (8001cf4 <main+0x3b8>)
 800199e:	48d6      	ldr	r0, [pc, #856]	; (8001cf8 <main+0x3bc>)
 80019a0:	f001 f89c 	bl	8002adc <MS5607_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 80019aa:	f102 0207 	add.w	r2, r2, #7
 80019ae:	7013      	strb	r3, [r2, #0]
  int32_t MSpressure = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 80019b6:	6013      	str	r3, [r2, #0]
  double MStemp = 0;
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	f04f 0300 	mov.w	r3, #0
 80019c0:	f507 5186 	add.w	r1, r7, #4288	; 0x10c0
 80019c4:	f101 0118 	add.w	r1, r1, #24
 80019c8:	e9c1 2300 	strd	r2, r3, [r1]
  float temperature, humidity;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int8_t newline = '\n';
 80019cc:	230a      	movs	r3, #10
 80019ce:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 80019d2:	f102 021f 	add.w	r2, r2, #31
 80019d6:	7013      	strb	r3, [r2, #0]





  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); //R
 80019d8:	2201      	movs	r2, #1
 80019da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019de:	48c7      	ldr	r0, [pc, #796]	; (8001cfc <main+0x3c0>)
 80019e0:	f002 fad4 	bl	8003f8c <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80019e4:	2032      	movs	r0, #50	; 0x32
 80019e6:	f001 ff5b 	bl	80038a0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //G
 80019ea:	2201      	movs	r2, #1
 80019ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019f0:	48c2      	ldr	r0, [pc, #776]	; (8001cfc <main+0x3c0>)
 80019f2:	f002 facb 	bl	8003f8c <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80019f6:	2032      	movs	r0, #50	; 0x32
 80019f8:	f001 ff52 	bl	80038a0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);  //B
 80019fc:	2201      	movs	r2, #1
 80019fe:	2110      	movs	r1, #16
 8001a00:	48bc      	ldr	r0, [pc, #752]	; (8001cf4 <main+0x3b8>)
 8001a02:	f002 fac3 	bl	8003f8c <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8001a06:	2032      	movs	r0, #50	; 0x32
 8001a08:	f001 ff4a 	bl	80038a0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);  //Y
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	2120      	movs	r1, #32
 8001a10:	48ba      	ldr	r0, [pc, #744]	; (8001cfc <main+0x3c0>)
 8001a12:	f002 fabb 	bl	8003f8c <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8001a16:	2032      	movs	r0, #50	; 0x32
 8001a18:	f001 ff42 	bl	80038a0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);  //O
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	2110      	movs	r1, #16
 8001a20:	48b6      	ldr	r0, [pc, #728]	; (8001cfc <main+0x3c0>)
 8001a22:	f002 fab3 	bl	8003f8c <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8001a26:	2032      	movs	r0, #50	; 0x32
 8001a28:	f001 ff3a 	bl	80038a0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a32:	48b2      	ldr	r0, [pc, #712]	; (8001cfc <main+0x3c0>)
 8001a34:	f002 faaa 	bl	8003f8c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001a38:	200a      	movs	r0, #10
 8001a3a:	f001 ff31 	bl	80038a0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a44:	48ad      	ldr	r0, [pc, #692]	; (8001cfc <main+0x3c0>)
 8001a46:	f002 faa1 	bl	8003f8c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001a4a:	200a      	movs	r0, #10
 8001a4c:	f001 ff28 	bl	80038a0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2110      	movs	r1, #16
 8001a54:	48a7      	ldr	r0, [pc, #668]	; (8001cf4 <main+0x3b8>)
 8001a56:	f002 fa99 	bl	8003f8c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001a5a:	200a      	movs	r0, #10
 8001a5c:	f001 ff20 	bl	80038a0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2120      	movs	r1, #32
 8001a64:	48a5      	ldr	r0, [pc, #660]	; (8001cfc <main+0x3c0>)
 8001a66:	f002 fa91 	bl	8003f8c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001a6a:	200a      	movs	r0, #10
 8001a6c:	f001 ff18 	bl	80038a0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2110      	movs	r1, #16
 8001a74:	48a1      	ldr	r0, [pc, #644]	; (8001cfc <main+0x3c0>)
 8001a76:	f002 fa89 	bl	8003f8c <HAL_GPIO_WritePin>





  hal_st1 = HAL_UARTEx_ReceiveToIdle_IT(&huart1, GPSbuffer, sizeof(GPSbuffer));
 8001a7a:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001a7e:	49a0      	ldr	r1, [pc, #640]	; (8001d00 <main+0x3c4>)
 8001a80:	48a0      	ldr	r0, [pc, #640]	; (8001d04 <main+0x3c8>)
 8001a82:	f004 fdce 	bl	8006622 <HAL_UARTEx_ReceiveToIdle_IT>
 8001a86:	4603      	mov	r3, r0
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b9f      	ldr	r3, [pc, #636]	; (8001d08 <main+0x3cc>)
 8001a8c:	701a      	strb	r2, [r3, #0]
  hal_st1 = HAL_UARTEx_ReceiveToIdle_IT(&huart1, GPSbuffer, sizeof(GPSbuffer));
 8001a8e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001a92:	499b      	ldr	r1, [pc, #620]	; (8001d00 <main+0x3c4>)
 8001a94:	489b      	ldr	r0, [pc, #620]	; (8001d04 <main+0x3c8>)
 8001a96:	f004 fdc4 	bl	8006622 <HAL_UARTEx_ReceiveToIdle_IT>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4b9a      	ldr	r3, [pc, #616]	; (8001d08 <main+0x3cc>)
 8001aa0:	701a      	strb	r2, [r3, #0]

    /* USER CODE BEGIN 3 */



		if(DataRecieved){
 8001aa2:	4b9a      	ldr	r3, [pc, #616]	; (8001d0c <main+0x3d0>)
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 8583 	beq.w	80025b2 <main+0xc76>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); //R
 8001aac:	2201      	movs	r2, #1
 8001aae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ab2:	4892      	ldr	r0, [pc, #584]	; (8001cfc <main+0x3c0>)
 8001ab4:	f002 fa6a 	bl	8003f8c <HAL_GPIO_WritePin>
			uint8_t GPSparse[15][200] = {}; //NMEA rozdelena podle radku
 8001ab8:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8001abc:	4618      	mov	r0, r3
 8001abe:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	f005 fd0f 	bl	80074e8 <memset>
			uint8_t nsat = 0; //pocet GSV zprav
 8001aca:	2300      	movs	r3, #0
 8001acc:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8001ad0:	f102 021e 	add.w	r2, r2, #30
 8001ad4:	7013      	strb	r3, [r2, #0]

			mainParse(GPSbuffer, GPSparse, 200, &nsat);
 8001ad6:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8001ada:	f103 031e 	add.w	r3, r3, #30
 8001ade:	f507 618b 	add.w	r1, r7, #1112	; 0x458
 8001ae2:	22c8      	movs	r2, #200	; 0xc8
 8001ae4:	4886      	ldr	r0, [pc, #536]	; (8001d00 <main+0x3c4>)
 8001ae6:	f7ff fe91 	bl	800180c <mainParse>

	//PARSOVANI JEDNOTLIVYCH FRAMU

			uint8_t RMCposition[13] = {}; //delka daneho pole v RMC
 8001aea:	2300      	movs	r3, #0
 8001aec:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8001af0:	f102 0210 	add.w	r2, r2, #16
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8001afa:	f103 0314 	add.w	r3, r3, #20
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	721a      	strb	r2, [r3, #8]
			uint8_t RMC[13][11] = {}; //RMC buffer, GPS na 3,4,5,6
 8001b06:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	238f      	movs	r3, #143	; 0x8f
 8001b0e:	461a      	mov	r2, r3
 8001b10:	2100      	movs	r1, #0
 8001b12:	f005 fce9 	bl	80074e8 <memset>

			uint8_t VTGposition[10] = {}; //delka daneho pole v RMC
 8001b16:	2300      	movs	r3, #0
 8001b18:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8001b1c:	f102 0204 	add.w	r2, r2, #4
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8001b26:	f103 0308 	add.w	r3, r3, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	809a      	strh	r2, [r3, #4]
			uint8_t VTG[10][10] = {}; 	//VTG buffer
 8001b30:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001b34:	4618      	mov	r0, r3
 8001b36:	2364      	movs	r3, #100	; 0x64
 8001b38:	461a      	mov	r2, r3
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	f005 fcd4 	bl	80074e8 <memset>

			uint8_t GGAposition[15] = {}; //delka daneho pole v RMC
 8001b40:	2300      	movs	r3, #0
 8001b42:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001b46:	f102 0214 	add.w	r2, r2, #20
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001b50:	f103 0318 	add.w	r3, r3, #24
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	f8c3 2007 	str.w	r2, [r3, #7]
			uint8_t GGA[15][11] = {};	//GGA buffer
 8001b5e:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001b62:	4618      	mov	r0, r3
 8001b64:	23a5      	movs	r3, #165	; 0xa5
 8001b66:	461a      	mov	r2, r3
 8001b68:	2100      	movs	r1, #0
 8001b6a:	f005 fcbd 	bl	80074e8 <memset>

			uint8_t GSAposition[18] = {}; //delka daneho pole v RMC
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001b7a:	f103 0304 	add.w	r3, r3, #4
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	819a      	strh	r2, [r3, #12]
			uint8_t GSA[18][5] = {}; //GSA buffer
 8001b88:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001b8c:	3b1c      	subs	r3, #28
 8001b8e:	4618      	mov	r0, r3
 8001b90:	235a      	movs	r3, #90	; 0x5a
 8001b92:	461a      	mov	r2, r3
 8001b94:	2100      	movs	r1, #0
 8001b96:	f005 fca7 	bl	80074e8 <memset>

			uint8_t GLLposition[8] = {}; //delka daneho pole v RMC
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001ba0:	f102 0218 	add.w	r2, r2, #24
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001bac:	f102 021c 	add.w	r2, r2, #28
 8001bb0:	6013      	str	r3, [r2, #0]
			uint8_t GLL[8][11] = {}; //GLL buffer
 8001bb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bb6:	3b14      	subs	r3, #20
 8001bb8:	4618      	mov	r0, r3
 8001bba:	2358      	movs	r3, #88	; 0x58
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	f005 fc92 	bl	80074e8 <memset>

			parseFrame(GPSparse, RMC, RMCposition, 13, 11, 0);
 8001bc4:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8001bc8:	f102 0210 	add.w	r2, r2, #16
 8001bcc:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 8001bd0:	f507 608b 	add.w	r0, r7, #1112	; 0x458
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	9301      	str	r3, [sp, #4]
 8001bd8:	230b      	movs	r3, #11
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	230d      	movs	r3, #13
 8001bde:	f7ff fdba 	bl	8001756 <parseFrame>
			parseFrame(GPSparse, VTG, VTGposition, 10, 10, 1);
 8001be2:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8001be6:	f102 0204 	add.w	r2, r2, #4
 8001bea:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001bee:	f507 608b 	add.w	r0, r7, #1112	; 0x458
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	9301      	str	r3, [sp, #4]
 8001bf6:	230a      	movs	r3, #10
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	230a      	movs	r3, #10
 8001bfc:	f7ff fdab 	bl	8001756 <parseFrame>
			parseFrame(GPSparse, GGA, GGAposition, 15, 11, 2);
 8001c00:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001c04:	f102 0214 	add.w	r2, r2, #20
 8001c08:	f507 71de 	add.w	r1, r7, #444	; 0x1bc
 8001c0c:	f507 608b 	add.w	r0, r7, #1112	; 0x458
 8001c10:	2302      	movs	r3, #2
 8001c12:	9301      	str	r3, [sp, #4]
 8001c14:	230b      	movs	r3, #11
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	230f      	movs	r3, #15
 8001c1a:	f7ff fd9c 	bl	8001756 <parseFrame>
			parseFrame(GPSparse, GSA, GSAposition, 18, 5, 3);
 8001c1e:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001c22:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001c26:	391c      	subs	r1, #28
 8001c28:	f507 608b 	add.w	r0, r7, #1112	; 0x458
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	9301      	str	r3, [sp, #4]
 8001c30:	2305      	movs	r3, #5
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	2312      	movs	r3, #18
 8001c36:	f7ff fd8e 	bl	8001756 <parseFrame>
			parseFrame(GPSparse, GLL, GLLposition, 8, 11, 4+nsat);
 8001c3a:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8001c3e:	f103 031e 	add.w	r3, r3, #30
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	3304      	adds	r3, #4
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001c4c:	f102 0218 	add.w	r2, r2, #24
 8001c50:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001c54:	3914      	subs	r1, #20
 8001c56:	f507 608b 	add.w	r0, r7, #1112	; 0x458
 8001c5a:	9301      	str	r3, [sp, #4]
 8001c5c:	230b      	movs	r3, #11
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	2308      	movs	r3, #8
 8001c62:	f7ff fd78 	bl	8001756 <parseFrame>
			//uint8_t GSV[3][17][15] = {}; //GSV buffer



		//Cteni teploty
			am2320_GetTemperatureAndHumidity(&Am2320_, &temperature, &humidity);
 8001c66:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 8001c6a:	f507 5186 	add.w	r1, r7, #4288	; 0x10c0
 8001c6e:	f101 0104 	add.w	r1, r1, #4
 8001c72:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8001c76:	f103 0308 	add.w	r3, r3, #8
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fc12 	bl	80014a4 <am2320_GetTemperatureAndHumidity>
		//Cteni z Gyra
			int16_t AccData[3] = {}, GyroData[3] = {}, MagData[3] = {};
 8001c80:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001c84:	f103 0310 	add.w	r3, r3, #16
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	809a      	strh	r2, [r3, #4]
 8001c8e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001c92:	f103 0308 	add.w	r3, r3, #8
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	809a      	strh	r2, [r3, #4]
 8001c9c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	809a      	strh	r2, [r3, #4]
			MPU9250_GetData(AccData, GyroData, MagData);
 8001ca6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001caa:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 8001cae:	f101 0108 	add.w	r1, r1, #8
 8001cb2:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001cb6:	f103 0310 	add.w	r3, r3, #16
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fab2 	bl	8001224 <MPU9250_GetData>
			char AccStr[3][5]={}, GyroStr[3][5]={}, MagStr[3][5]={};
 8001cc0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001cc4:	f103 0310 	add.w	r3, r3, #16
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	f8c3 200b 	str.w	r2, [r3, #11]
 8001cd4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	f8c3 200b 	str.w	r2, [r3, #11]
 8001ce4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001ce8:	f103 0310 	add.w	r3, r3, #16
 8001cec:	2200      	movs	r2, #0
 8001cee:	e00f      	b.n	8001d10 <main+0x3d4>
 8001cf0:	200003d8 	.word	0x200003d8
 8001cf4:	40020800 	.word	0x40020800
 8001cf8:	20000338 	.word	0x20000338
 8001cfc:	40020400 	.word	0x40020400
 8001d00:	200000b4 	.word	0x200000b4
 8001d04:	20000474 	.word	0x20000474
 8001d08:	20000390 	.word	0x20000390
 8001d0c:	200000b0 	.word	0x200000b0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	f8c3 200b 	str.w	r2, [r3, #11]

			for(int i = 0; i < 3; i++){
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8001d20:	f102 0204 	add.w	r2, r2, #4
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	e029      	b.n	8001d7c <main+0x440>
				itoa(AccData[i], AccStr[i], 10);
 8001d28:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001d2c:	f103 0304 	add.w	r3, r3, #4
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8001d38:	f102 0208 	add.w	r2, r2, #8
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f933 3c98 	ldrsh.w	r3, [r3, #-152]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 8001d48:	f101 0110 	add.w	r1, r1, #16
 8001d4c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001d50:	f103 0304 	add.w	r3, r3, #4
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	220a      	movs	r2, #10
 8001d60:	4619      	mov	r1, r3
 8001d62:	f005 fbb1 	bl	80074c8 <itoa>
			for(int i = 0; i < 3; i++){
 8001d66:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001d6a:	f103 0304 	add.w	r3, r3, #4
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	3301      	adds	r3, #1
 8001d72:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8001d76:	f102 0204 	add.w	r2, r2, #4
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001d80:	f103 0304 	add.w	r3, r3, #4
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	ddce      	ble.n	8001d28 <main+0x3ec>
			}

			for(int i = 0; i < 3; i++){
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	e01f      	b.n	8001dd4 <main+0x498>
				itoa(GyroData[i], GyroStr[i], 10);
 8001d94:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8001da0:	f102 0208 	add.w	r2, r2, #8
 8001da4:	4413      	add	r3, r2
 8001da6:	f933 3ca0 	ldrsh.w	r3, [r3, #-160]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 8001db0:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	220a      	movs	r2, #10
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f005 fb81 	bl	80074c8 <itoa>
			for(int i = 0; i < 3; i++){
 8001dc6:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	ddda      	ble.n	8001d94 <main+0x458>
			}

			for(int i = 0; i < 3; i++){
 8001dde:	2300      	movs	r3, #0
 8001de0:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8001de4:	f102 021c 	add.w	r2, r2, #28
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	e029      	b.n	8001e40 <main+0x504>
				itoa(MagData[i], MagStr[i], 10);
 8001dec:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8001df0:	f103 031c 	add.w	r3, r3, #28
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8001dfc:	f102 0208 	add.w	r2, r2, #8
 8001e00:	4413      	add	r3, r2
 8001e02:	f933 3ca8 	ldrsh.w	r3, [r3, #-168]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8001e0c:	f101 0110 	add.w	r1, r1, #16
 8001e10:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8001e14:	f103 031c 	add.w	r3, r3, #28
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	440b      	add	r3, r1
 8001e22:	220a      	movs	r2, #10
 8001e24:	4619      	mov	r1, r3
 8001e26:	f005 fb4f 	bl	80074c8 <itoa>
			for(int i = 0; i < 3; i++){
 8001e2a:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8001e2e:	f103 031c 	add.w	r3, r3, #28
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	3301      	adds	r3, #1
 8001e36:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8001e3a:	f102 021c 	add.w	r2, r2, #28
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8001e44:	f103 031c 	add.w	r3, r3, #28
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	ddce      	ble.n	8001dec <main+0x4b0>
			}
		  //Teplota Tlak
			MS5607Update();
 8001e4e:	f001 f93b 	bl	80030c8 <MS5607Update>
			HAL_Delay(10);
 8001e52:	200a      	movs	r0, #10
 8001e54:	f001 fd24 	bl	80038a0 <HAL_Delay>
			MSpressure = MS5607GetPressurePa();
 8001e58:	f001 f960 	bl	800311c <MS5607GetPressurePa>
 8001e5c:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8001e60:	6018      	str	r0, [r3, #0]
			MStemp = MS5607GetTemperatureC();
 8001e62:	f001 f941 	bl	80030e8 <MS5607GetTemperatureC>
 8001e66:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8001e6a:	f103 0318 	add.w	r3, r3, #24
 8001e6e:	ed83 0b00 	vstr	d0, [r3]


		//Sesiti danych poli do RX zprávy
			uint8_t RXbuffer[200] = {[0 ... 199] = ';'}; //Buffer na radiovy spoj UART3
 8001e72:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8001e76:	4ac8      	ldr	r2, [pc, #800]	; (8002198 <main+0x85c>)
 8001e78:	4618      	mov	r0, r3
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	23c8      	movs	r3, #200	; 0xc8
 8001e7e:	461a      	mov	r2, r3
 8001e80:	f005 fb24 	bl	80074cc <memcpy>
			int cpypos = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8001e8a:	f102 0218 	add.w	r2, r2, #24
 8001e8e:	6013      	str	r3, [r2, #0]

			//cas
			memcpy(RXbuffer + cpypos, RMC[1], RMCposition[1]);
 8001e90:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8001e94:	f103 0318 	add.w	r3, r3, #24
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f507 7219 	add.w	r2, r7, #612	; 0x264
 8001e9e:	18d0      	adds	r0, r2, r3
 8001ea0:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8001ea4:	f103 0311 	add.w	r3, r3, #17
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001eb0:	330b      	adds	r3, #11
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f005 fb0a 	bl	80074cc <memcpy>
			cpypos = cpypos + RMCposition[1] + 1;
 8001eb8:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8001ebc:	f103 0311 	add.w	r3, r3, #17
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8001ec8:	f103 0318 	add.w	r3, r3, #24
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4413      	add	r3, r2
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8001ed6:	f102 0218 	add.w	r2, r2, #24
 8001eda:	6013      	str	r3, [r2, #0]

			//souradnice
			for(int i = 3; i <= 6; i++){
 8001edc:	2303      	movs	r3, #3
 8001ede:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8001ee2:	f102 0214 	add.w	r2, r2, #20
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	e045      	b.n	8001f76 <main+0x63a>
				memcpy(RXbuffer + cpypos, RMC[i], RMCposition[i]);
 8001eea:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8001eee:	f103 0318 	add.w	r3, r3, #24
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f507 7219 	add.w	r2, r7, #612	; 0x264
 8001ef8:	18d0      	adds	r0, r2, r3
 8001efa:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 8001efe:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8001f02:	f103 0314 	add.w	r3, r3, #20
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4413      	add	r3, r2
 8001f12:	4419      	add	r1, r3
 8001f14:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8001f18:	f102 0210 	add.w	r2, r2, #16
 8001f1c:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8001f20:	f103 0314 	add.w	r3, r3, #20
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4413      	add	r3, r2
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	f005 face 	bl	80074cc <memcpy>
				cpypos = cpypos + RMCposition[i] + 1;
 8001f30:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8001f34:	f102 0210 	add.w	r2, r2, #16
 8001f38:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8001f3c:	f103 0314 	add.w	r3, r3, #20
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4413      	add	r3, r2
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	461a      	mov	r2, r3
 8001f48:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8001f4c:	f103 0318 	add.w	r3, r3, #24
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4413      	add	r3, r2
 8001f54:	3301      	adds	r3, #1
 8001f56:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8001f5a:	f102 0218 	add.w	r2, r2, #24
 8001f5e:	6013      	str	r3, [r2, #0]
			for(int i = 3; i <= 6; i++){
 8001f60:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8001f64:	f103 0314 	add.w	r3, r3, #20
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8001f70:	f102 0214 	add.w	r2, r2, #20
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8001f7a:	f103 0314 	add.w	r3, r3, #20
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b06      	cmp	r3, #6
 8001f82:	ddb2      	ble.n	8001eea <main+0x5ae>
			}

			//nadmorska vyska
			memcpy(RXbuffer + cpypos, GGA[9], GGAposition[9]);
 8001f84:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8001f88:	f103 0318 	add.w	r3, r3, #24
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f507 7219 	add.w	r2, r7, #612	; 0x264
 8001f92:	18d0      	adds	r0, r2, r3
 8001f94:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001f98:	f103 031d 	add.w	r3, r3, #29
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001fa4:	3363      	adds	r3, #99	; 0x63
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f005 fa90 	bl	80074cc <memcpy>
			cpypos = cpypos + GGAposition[9] + 1;
 8001fac:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001fb0:	f103 031d 	add.w	r3, r3, #29
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8001fbc:	f103 0318 	add.w	r3, r3, #24
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8001fca:	f102 0218 	add.w	r2, r2, #24
 8001fce:	6013      	str	r3, [r2, #0]

			//rychlost (kmph)
			memcpy(RXbuffer + cpypos, VTG[7], VTGposition[7]);
 8001fd0:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8001fd4:	f103 0318 	add.w	r3, r3, #24
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f507 7219 	add.w	r2, r7, #612	; 0x264
 8001fde:	18d0      	adds	r0, r2, r3
 8001fe0:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8001fe4:	f103 030b 	add.w	r3, r3, #11
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ff0:	3346      	adds	r3, #70	; 0x46
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f005 fa6a 	bl	80074cc <memcpy>
			cpypos = cpypos + VTGposition[7] + 1;
 8001ff8:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8001ffc:	f103 030b 	add.w	r3, r3, #11
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8002008:	f103 0318 	add.w	r3, r3, #24
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4413      	add	r3, r2
 8002010:	3301      	adds	r3, #1
 8002012:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8002016:	f102 0218 	add.w	r2, r2, #24
 800201a:	6013      	str	r3, [r2, #0]


			char tempchar[5];
			char humchar[5];
			ftoa(temperature, tempchar, 3, 1, 1); //pocet cislic pred teckou, za teckou a znamenko - 0/1
 800201c:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8002020:	f103 0304 	add.w	r3, r3, #4
 8002024:	edd3 7a00 	vldr	s15, [r3]
 8002028:	f507 5081 	add.w	r0, r7, #4128	; 0x1020
 800202c:	f100 0008 	add.w	r0, r0, #8
 8002030:	2301      	movs	r3, #1
 8002032:	2201      	movs	r2, #1
 8002034:	2103      	movs	r1, #3
 8002036:	eeb0 0a67 	vmov.f32	s0, s15
 800203a:	f7ff faf5 	bl	8001628 <ftoa>
			ftoa(humidity, humchar, 3, 1, 0);
 800203e:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8002042:	edd3 7a00 	vldr	s15, [r3]
 8002046:	f507 5081 	add.w	r0, r7, #4128	; 0x1020
 800204a:	2300      	movs	r3, #0
 800204c:	2201      	movs	r2, #1
 800204e:	2103      	movs	r1, #3
 8002050:	eeb0 0a67 	vmov.f32	s0, s15
 8002054:	f7ff fae8 	bl	8001628 <ftoa>

			char MStempchar[7];
			char MSpressurechar[7];

			ftoa((float)MStemp, MStempchar, 4, 2, 1);
 8002058:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 800205c:	f103 0318 	add.w	r3, r3, #24
 8002060:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002064:	f7fe fd3c 	bl	8000ae0 <__aeabi_d2f>
 8002068:	4604      	mov	r4, r0
 800206a:	f507 5080 	add.w	r0, r7, #4096	; 0x1000
 800206e:	f100 0018 	add.w	r0, r0, #24
 8002072:	2301      	movs	r3, #1
 8002074:	2202      	movs	r2, #2
 8002076:	2104      	movs	r1, #4
 8002078:	ee00 4a10 	vmov	s0, r4
 800207c:	f7ff fad4 	bl	8001628 <ftoa>
			ftoa(MSpressure, MSpressurechar, 7, 0, 1);
 8002080:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	ee07 3a90 	vmov	s15, r3
 800208a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800208e:	f507 5080 	add.w	r0, r7, #4096	; 0x1000
 8002092:	f100 0010 	add.w	r0, r0, #16
 8002096:	2301      	movs	r3, #1
 8002098:	2200      	movs	r2, #0
 800209a:	2107      	movs	r1, #7
 800209c:	eeb0 0a67 	vmov.f32	s0, s15
 80020a0:	f7ff fac2 	bl	8001628 <ftoa>

			memcpy(RXbuffer + cpypos, tempchar, sizeof(tempchar));
 80020a4:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80020a8:	f103 0318 	add.w	r3, r3, #24
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f507 7219 	add.w	r2, r7, #612	; 0x264
 80020b2:	4413      	add	r3, r2
 80020b4:	461a      	mov	r2, r3
 80020b6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80020ba:	f103 0308 	add.w	r3, r3, #8
 80020be:	6818      	ldr	r0, [r3, #0]
 80020c0:	6010      	str	r0, [r2, #0]
 80020c2:	791b      	ldrb	r3, [r3, #4]
 80020c4:	7113      	strb	r3, [r2, #4]
			cpypos = cpypos+sizeof(tempchar) + 1;
 80020c6:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80020ca:	f103 0318 	add.w	r3, r3, #24
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	3306      	adds	r3, #6
 80020d2:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 80020d6:	f102 0218 	add.w	r2, r2, #24
 80020da:	6013      	str	r3, [r2, #0]

			memcpy(RXbuffer + cpypos, humchar, sizeof(humchar));
 80020dc:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80020e0:	f103 0318 	add.w	r3, r3, #24
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f507 7219 	add.w	r2, r7, #612	; 0x264
 80020ea:	4413      	add	r3, r2
 80020ec:	461a      	mov	r2, r3
 80020ee:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80020f2:	6818      	ldr	r0, [r3, #0]
 80020f4:	6010      	str	r0, [r2, #0]
 80020f6:	791b      	ldrb	r3, [r3, #4]
 80020f8:	7113      	strb	r3, [r2, #4]
			cpypos = cpypos+sizeof(humchar) + 1;
 80020fa:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80020fe:	f103 0318 	add.w	r3, r3, #24
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	3306      	adds	r3, #6
 8002106:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 800210a:	f102 0218 	add.w	r2, r2, #24
 800210e:	6013      	str	r3, [r2, #0]

			memcpy(RXbuffer + cpypos, MStempchar, sizeof(MStempchar));
 8002110:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8002114:	f103 0318 	add.w	r3, r3, #24
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f507 7219 	add.w	r2, r7, #612	; 0x264
 800211e:	4413      	add	r3, r2
 8002120:	461a      	mov	r2, r3
 8002122:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002126:	f103 0318 	add.w	r3, r3, #24
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	6010      	str	r0, [r2, #0]
 800212e:	8899      	ldrh	r1, [r3, #4]
 8002130:	799b      	ldrb	r3, [r3, #6]
 8002132:	8091      	strh	r1, [r2, #4]
 8002134:	7193      	strb	r3, [r2, #6]
			cpypos = cpypos+sizeof(MStempchar) + 1;
 8002136:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 800213a:	f103 0318 	add.w	r3, r3, #24
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	3308      	adds	r3, #8
 8002142:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8002146:	f102 0218 	add.w	r2, r2, #24
 800214a:	6013      	str	r3, [r2, #0]

			memcpy(RXbuffer + cpypos, MSpressurechar, sizeof(MSpressurechar));
 800214c:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8002150:	f103 0318 	add.w	r3, r3, #24
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f507 7219 	add.w	r2, r7, #612	; 0x264
 800215a:	4413      	add	r3, r2
 800215c:	461a      	mov	r2, r3
 800215e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002162:	f103 0310 	add.w	r3, r3, #16
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	6010      	str	r0, [r2, #0]
 800216a:	8899      	ldrh	r1, [r3, #4]
 800216c:	799b      	ldrb	r3, [r3, #6]
 800216e:	8091      	strh	r1, [r2, #4]
 8002170:	7193      	strb	r3, [r2, #6]
			cpypos = cpypos+sizeof(MSpressurechar) + 1;
 8002172:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8002176:	f103 0318 	add.w	r3, r3, #24
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	3308      	adds	r3, #8
 800217e:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8002182:	f102 0218 	add.w	r2, r2, #24
 8002186:	6013      	str	r3, [r2, #0]

			for(int i = 0; i<3; i++){
 8002188:	2300      	movs	r3, #0
 800218a:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 800218e:	f102 0210 	add.w	r2, r2, #16
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	e031      	b.n	80021fa <main+0x8be>
 8002196:	bf00      	nop
 8002198:	08008504 	.word	0x08008504
				memcpy(RXbuffer + cpypos, AccStr[i], sizeof(AccStr[i]));
 800219c:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80021a0:	f103 0318 	add.w	r3, r3, #24
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f507 7219 	add.w	r2, r7, #612	; 0x264
 80021aa:	18d0      	adds	r0, r2, r3
 80021ac:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 80021b0:	f101 0110 	add.w	r1, r1, #16
 80021b4:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80021b8:	f103 0310 	add.w	r3, r3, #16
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	440b      	add	r3, r1
 80021c6:	2205      	movs	r2, #5
 80021c8:	4619      	mov	r1, r3
 80021ca:	f005 f97f 	bl	80074cc <memcpy>
				cpypos = cpypos + sizeof(AccStr[i]) + 1;
 80021ce:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80021d2:	f103 0318 	add.w	r3, r3, #24
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	3306      	adds	r3, #6
 80021da:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 80021de:	f102 0218 	add.w	r2, r2, #24
 80021e2:	6013      	str	r3, [r2, #0]
			for(int i = 0; i<3; i++){
 80021e4:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80021e8:	f103 0310 	add.w	r3, r3, #16
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	3301      	adds	r3, #1
 80021f0:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 80021f4:	f102 0210 	add.w	r2, r2, #16
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80021fe:	f103 0310 	add.w	r3, r3, #16
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b02      	cmp	r3, #2
 8002206:	ddc9      	ble.n	800219c <main+0x860>
			}
			cpypos++;
 8002208:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 800220c:	f103 0318 	add.w	r3, r3, #24
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	3301      	adds	r3, #1
 8002214:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8002218:	f102 0218 	add.w	r2, r2, #24
 800221c:	6013      	str	r3, [r2, #0]

			for(int i = 0; i<3; i++){
 800221e:	2300      	movs	r3, #0
 8002220:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8002224:	f102 020c 	add.w	r2, r2, #12
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	e02c      	b.n	8002286 <main+0x94a>
				memcpy(RXbuffer + cpypos, GyroStr[i], sizeof(GyroStr[i]));
 800222c:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8002230:	f103 0318 	add.w	r3, r3, #24
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f507 7219 	add.w	r2, r7, #612	; 0x264
 800223a:	18d0      	adds	r0, r2, r3
 800223c:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 8002240:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8002244:	f103 030c 	add.w	r3, r3, #12
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	440b      	add	r3, r1
 8002252:	2205      	movs	r2, #5
 8002254:	4619      	mov	r1, r3
 8002256:	f005 f939 	bl	80074cc <memcpy>
				cpypos = cpypos + sizeof(GyroStr[i]) + 1;
 800225a:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 800225e:	f103 0318 	add.w	r3, r3, #24
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	3306      	adds	r3, #6
 8002266:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 800226a:	f102 0218 	add.w	r2, r2, #24
 800226e:	6013      	str	r3, [r2, #0]
			for(int i = 0; i<3; i++){
 8002270:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8002274:	f103 030c 	add.w	r3, r3, #12
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	3301      	adds	r3, #1
 800227c:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8002280:	f102 020c 	add.w	r2, r2, #12
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 800228a:	f103 030c 	add.w	r3, r3, #12
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b02      	cmp	r3, #2
 8002292:	ddcb      	ble.n	800222c <main+0x8f0>
			}
			cpypos++;
 8002294:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8002298:	f103 0318 	add.w	r3, r3, #24
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	3301      	adds	r3, #1
 80022a0:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 80022a4:	f102 0218 	add.w	r2, r2, #24
 80022a8:	6013      	str	r3, [r2, #0]

			for(int i = 0; i<3; i++){
 80022aa:	2300      	movs	r3, #0
 80022ac:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 80022b0:	f102 0208 	add.w	r2, r2, #8
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	e02e      	b.n	8002316 <main+0x9da>
				memcpy(RXbuffer + cpypos, MagStr[i], sizeof(MagStr[i]));
 80022b8:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80022bc:	f103 0318 	add.w	r3, r3, #24
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f507 7219 	add.w	r2, r7, #612	; 0x264
 80022c6:	18d0      	adds	r0, r2, r3
 80022c8:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 80022cc:	f101 0110 	add.w	r1, r1, #16
 80022d0:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80022d4:	f103 0308 	add.w	r3, r3, #8
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	440b      	add	r3, r1
 80022e2:	2205      	movs	r2, #5
 80022e4:	4619      	mov	r1, r3
 80022e6:	f005 f8f1 	bl	80074cc <memcpy>
				cpypos = cpypos + sizeof(MagStr[i]) + 1;
 80022ea:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80022ee:	f103 0318 	add.w	r3, r3, #24
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	3306      	adds	r3, #6
 80022f6:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 80022fa:	f102 0218 	add.w	r2, r2, #24
 80022fe:	6013      	str	r3, [r2, #0]
			for(int i = 0; i<3; i++){
 8002300:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8002304:	f103 0308 	add.w	r3, r3, #8
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	3301      	adds	r3, #1
 800230c:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8002310:	f102 0208 	add.w	r2, r2, #8
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 800231a:	f103 0308 	add.w	r3, r3, #8
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b02      	cmp	r3, #2
 8002322:	ddc9      	ble.n	80022b8 <main+0x97c>
			}
			cpypos++;
 8002324:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8002328:	f103 0318 	add.w	r3, r3, #24
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	3301      	adds	r3, #1
 8002330:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8002334:	f102 0218 	add.w	r2, r2, #24
 8002338:	6013      	str	r3, [r2, #0]


			memcpy(RXbuffer + cpypos, &newline, sizeof(newline));
 800233a:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 800233e:	f103 0318 	add.w	r3, r3, #24
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f507 7219 	add.w	r2, r7, #612	; 0x264
 8002348:	4413      	add	r3, r2
 800234a:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 800234e:	f102 021f 	add.w	r2, r2, #31
 8002352:	7812      	ldrb	r2, [r2, #0]
 8002354:	701a      	strb	r2, [r3, #0]

			HAL_UART_Transmit(&huart5, RXbuffer, cpypos+1, HAL_MAX_DELAY);
 8002356:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 800235a:	f103 0318 	add.w	r3, r3, #24
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	b29b      	uxth	r3, r3
 8002362:	3301      	adds	r3, #1
 8002364:	b29a      	uxth	r2, r3
 8002366:	f507 7119 	add.w	r1, r7, #612	; 0x264
 800236a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800236e:	4897      	ldr	r0, [pc, #604]	; (80025cc <main+0xc90>)
 8002370:	f004 f8c5 	bl	80064fe <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart5, &newline, 1, HAL_MAX_DELAY);
 8002374:	f507 5185 	add.w	r1, r7, #4256	; 0x10a0
 8002378:	f101 011f 	add.w	r1, r1, #31
 800237c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002380:	2201      	movs	r2, #1
 8002382:	4892      	ldr	r0, [pc, #584]	; (80025cc <main+0xc90>)
 8002384:	f004 f8bb 	bl	80064fe <HAL_UART_Transmit>

		//Sesiti danych poli do SD zpravy
			uint8_t SDbuffer[300] = {[0 ... 298] = ';', '\n'}; //Buffer pro ukladani dat na SD kartu
 8002388:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 800238c:	4a90      	ldr	r2, [pc, #576]	; (80025d0 <main+0xc94>)
 800238e:	4618      	mov	r0, r3
 8002390:	4611      	mov	r1, r2
 8002392:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002396:	461a      	mov	r2, r3
 8002398:	f005 f898 	bl	80074cc <memcpy>
			memcpy(SDbuffer, RXbuffer, cpypos); //kopirovani RX bufferu
 800239c:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80023a0:	f103 0318 	add.w	r3, r3, #24
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	f507 7119 	add.w	r1, r7, #612	; 0x264
 80023aa:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 80023ae:	4618      	mov	r0, r3
 80023b0:	f005 f88c 	bl	80074cc <memcpy>

			//fix type
			memcpy(SDbuffer + cpypos, GGA[6], GGAposition[6]);
 80023b4:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80023b8:	f103 0318 	add.w	r3, r3, #24
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 80023c2:	18d0      	adds	r0, r2, r3
 80023c4:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80023c8:	f103 031a 	add.w	r3, r3, #26
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 80023d4:	3342      	adds	r3, #66	; 0x42
 80023d6:	4619      	mov	r1, r3
 80023d8:	f005 f878 	bl	80074cc <memcpy>
			cpypos = cpypos + GGAposition[6] + 1;
 80023dc:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80023e0:	f103 031a 	add.w	r3, r3, #26
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80023ec:	f103 0318 	add.w	r3, r3, #24
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4413      	add	r3, r2
 80023f4:	3301      	adds	r3, #1
 80023f6:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 80023fa:	f102 0218 	add.w	r2, r2, #24
 80023fe:	6013      	str	r3, [r2, #0]

			//pocet satelitu
			memcpy(SDbuffer + cpypos, GGA[7], GGAposition[7]);
 8002400:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8002404:	f103 0318 	add.w	r3, r3, #24
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 800240e:	18d0      	adds	r0, r2, r3
 8002410:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002414:	f103 031b 	add.w	r3, r3, #27
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8002420:	334d      	adds	r3, #77	; 0x4d
 8002422:	4619      	mov	r1, r3
 8002424:	f005 f852 	bl	80074cc <memcpy>
			cpypos = cpypos + GGAposition[7] + 1;
 8002428:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800242c:	f103 031b 	add.w	r3, r3, #27
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8002438:	f103 0318 	add.w	r3, r3, #24
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4413      	add	r3, r2
 8002440:	3301      	adds	r3, #1
 8002442:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8002446:	f102 0218 	add.w	r2, r2, #24
 800244a:	6013      	str	r3, [r2, #0]

			//PDOP
			memcpy(SDbuffer + cpypos, GSA[15], GSAposition[15]);
 800244c:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8002450:	f103 0318 	add.w	r3, r3, #24
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 800245a:	18d0      	adds	r0, r2, r3
 800245c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002460:	f103 030f 	add.w	r3, r3, #15
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	461a      	mov	r2, r3
 8002468:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800246c:	3b1c      	subs	r3, #28
 800246e:	334b      	adds	r3, #75	; 0x4b
 8002470:	4619      	mov	r1, r3
 8002472:	f005 f82b 	bl	80074cc <memcpy>
			cpypos = cpypos + GSAposition[15] + 1;
 8002476:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800247a:	f103 030f 	add.w	r3, r3, #15
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8002486:	f103 0318 	add.w	r3, r3, #24
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4413      	add	r3, r2
 800248e:	3301      	adds	r3, #1
 8002490:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8002494:	f102 0218 	add.w	r2, r2, #24
 8002498:	6013      	str	r3, [r2, #0]
			//HDOP
			memcpy(SDbuffer + cpypos, GSA[16], GSAposition[16]);
 800249a:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 800249e:	f103 0318 	add.w	r3, r3, #24
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 80024a8:	18d0      	adds	r0, r2, r3
 80024aa:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80024ae:	f103 0310 	add.w	r3, r3, #16
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80024ba:	3b1c      	subs	r3, #28
 80024bc:	3350      	adds	r3, #80	; 0x50
 80024be:	4619      	mov	r1, r3
 80024c0:	f005 f804 	bl	80074cc <memcpy>
			cpypos = cpypos + GSAposition[16] + 1;
 80024c4:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80024c8:	f103 0310 	add.w	r3, r3, #16
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80024d4:	f103 0318 	add.w	r3, r3, #24
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	3301      	adds	r3, #1
 80024de:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 80024e2:	f102 0218 	add.w	r2, r2, #24
 80024e6:	6013      	str	r3, [r2, #0]
			//VDOP
			memcpy(SDbuffer + cpypos, GSA[17], GSAposition[17]);
 80024e8:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80024ec:	f103 0318 	add.w	r3, r3, #24
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 80024f6:	18d0      	adds	r0, r2, r3
 80024f8:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80024fc:	f103 0311 	add.w	r3, r3, #17
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002508:	3b1c      	subs	r3, #28
 800250a:	3355      	adds	r3, #85	; 0x55
 800250c:	4619      	mov	r1, r3
 800250e:	f004 ffdd 	bl	80074cc <memcpy>
			cpypos = cpypos + GSAposition[17] + 1;
 8002512:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002516:	f103 0311 	add.w	r3, r3, #17
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8002522:	f103 0318 	add.w	r3, r3, #24
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4413      	add	r3, r2
 800252a:	3301      	adds	r3, #1
 800252c:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8002530:	f102 0218 	add.w	r2, r2, #24
 8002534:	6013      	str	r3, [r2, #0]

			memcpy(SDbuffer + cpypos, &newline, sizeof(newline));
 8002536:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 800253a:	f103 0318 	add.w	r3, r3, #24
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 8002544:	4413      	add	r3, r2
 8002546:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 800254a:	f102 021f 	add.w	r2, r2, #31
 800254e:	7812      	ldrb	r2, [r2, #0]
 8002550:	701a      	strb	r2, [r3, #0]
			cpypos = cpypos + 2;
 8002552:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8002556:	f103 0318 	add.w	r3, r3, #24
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	3302      	adds	r3, #2
 800255e:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8002562:	f102 0218 	add.w	r2, r2, #24
 8002566:	6013      	str	r3, [r2, #0]

			HAL_UART_Transmit(&huart3, SDbuffer, cpypos-1, HAL_MAX_DELAY);
 8002568:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 800256c:	f103 0318 	add.w	r3, r3, #24
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	b29b      	uxth	r3, r3
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	f507 714b 	add.w	r1, r7, #812	; 0x32c
 800257c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002580:	4814      	ldr	r0, [pc, #80]	; (80025d4 <main+0xc98>)
 8002582:	f003 ffbc 	bl	80064fe <HAL_UART_Transmit>

			//Cisteni
			memset(RXbuffer, 0, sizeof(RXbuffer));
 8002586:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800258a:	22c8      	movs	r2, #200	; 0xc8
 800258c:	2100      	movs	r1, #0
 800258e:	4618      	mov	r0, r3
 8002590:	f004 ffaa 	bl	80074e8 <memset>
			memset(GPSbuffer, 0, sizeof(GPSbuffer));
 8002594:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002598:	2100      	movs	r1, #0
 800259a:	480f      	ldr	r0, [pc, #60]	; (80025d8 <main+0xc9c>)
 800259c:	f004 ffa4 	bl	80074e8 <memset>
			DataRecieved = 0;
 80025a0:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <main+0xca0>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	801a      	strh	r2, [r3, #0]

			//hal_st1 = HAL_UARTEx_ReceiveToIdle_IT(&huart1, GPSbuffer, sizeof(GPSbuffer)); //init ToIdle interruptu
			//HAL_UARTEx_ReceiveToIdle_IT(&huart1, GPSbuffer, sizeof(GPSbuffer));

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80025a6:	2200      	movs	r2, #0
 80025a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025ac:	480c      	ldr	r0, [pc, #48]	; (80025e0 <main+0xca4>)
 80025ae:	f001 fced 	bl	8003f8c <HAL_GPIO_WritePin>
			//HAL_UARTEx_ReceiveToIdle_IT(&huart6, GPSbuffer1, sizeof(GPSbuffer1));



		}
		hal_st1 = HAL_UARTEx_ReceiveToIdle_IT(&huart1, GPSbuffer, sizeof(GPSbuffer));
 80025b2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80025b6:	4908      	ldr	r1, [pc, #32]	; (80025d8 <main+0xc9c>)
 80025b8:	480a      	ldr	r0, [pc, #40]	; (80025e4 <main+0xca8>)
 80025ba:	f004 f832 	bl	8006622 <HAL_UARTEx_ReceiveToIdle_IT>
 80025be:	4603      	mov	r3, r0
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <main+0xcac>)
 80025c4:	701a      	strb	r2, [r3, #0]
		if(DataRecieved){
 80025c6:	f7ff ba6c 	b.w	8001aa2 <main+0x166>
 80025ca:	bf00      	nop
 80025cc:	20000430 	.word	0x20000430
 80025d0:	080085cc 	.word	0x080085cc
 80025d4:	20000394 	.word	0x20000394
 80025d8:	200000b4 	.word	0x200000b4
 80025dc:	200000b0 	.word	0x200000b0
 80025e0:	40020400 	.word	0x40020400
 80025e4:	20000474 	.word	0x20000474
 80025e8:	20000390 	.word	0x20000390

080025ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b094      	sub	sp, #80	; 0x50
 80025f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025f2:	f107 031c 	add.w	r3, r7, #28
 80025f6:	2234      	movs	r2, #52	; 0x34
 80025f8:	2100      	movs	r1, #0
 80025fa:	4618      	mov	r0, r3
 80025fc:	f004 ff74 	bl	80074e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002600:	f107 0308 	add.w	r3, r7, #8
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002610:	2300      	movs	r3, #0
 8002612:	607b      	str	r3, [r7, #4]
 8002614:	4b29      	ldr	r3, [pc, #164]	; (80026bc <SystemClock_Config+0xd0>)
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	4a28      	ldr	r2, [pc, #160]	; (80026bc <SystemClock_Config+0xd0>)
 800261a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800261e:	6413      	str	r3, [r2, #64]	; 0x40
 8002620:	4b26      	ldr	r3, [pc, #152]	; (80026bc <SystemClock_Config+0xd0>)
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002628:	607b      	str	r3, [r7, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800262c:	2300      	movs	r3, #0
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	4b23      	ldr	r3, [pc, #140]	; (80026c0 <SystemClock_Config+0xd4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002638:	4a21      	ldr	r2, [pc, #132]	; (80026c0 <SystemClock_Config+0xd4>)
 800263a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	4b1f      	ldr	r3, [pc, #124]	; (80026c0 <SystemClock_Config+0xd4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002648:	603b      	str	r3, [r7, #0]
 800264a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800264c:	2302      	movs	r3, #2
 800264e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002650:	2301      	movs	r3, #1
 8002652:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002654:	2310      	movs	r3, #16
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002658:	2302      	movs	r3, #2
 800265a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800265c:	2300      	movs	r3, #0
 800265e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002660:	2308      	movs	r3, #8
 8002662:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 8002664:	2340      	movs	r3, #64	; 0x40
 8002666:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002668:	2302      	movs	r3, #2
 800266a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800266c:	2302      	movs	r3, #2
 800266e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002670:	2302      	movs	r3, #2
 8002672:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002674:	f107 031c 	add.w	r3, r7, #28
 8002678:	4618      	mov	r0, r3
 800267a:	f002 fead 	bl	80053d8 <HAL_RCC_OscConfig>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002684:	f000 fa24 	bl	8002ad0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002688:	230f      	movs	r3, #15
 800268a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800268c:	2302      	movs	r3, #2
 800268e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002690:	2380      	movs	r3, #128	; 0x80
 8002692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002698:	2300      	movs	r3, #0
 800269a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800269c:	f107 0308 	add.w	r3, r7, #8
 80026a0:	2101      	movs	r1, #1
 80026a2:	4618      	mov	r0, r3
 80026a4:	f002 fc22 	bl	8004eec <HAL_RCC_ClockConfig>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80026ae:	f000 fa0f 	bl	8002ad0 <Error_Handler>
  }
}
 80026b2:	bf00      	nop
 80026b4:	3750      	adds	r7, #80	; 0x50
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40007000 	.word	0x40007000

080026c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <MX_I2C1_Init+0x50>)
 80026ca:	4a13      	ldr	r2, [pc, #76]	; (8002718 <MX_I2C1_Init+0x54>)
 80026cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80026ce:	4b11      	ldr	r3, [pc, #68]	; (8002714 <MX_I2C1_Init+0x50>)
 80026d0:	4a12      	ldr	r2, [pc, #72]	; (800271c <MX_I2C1_Init+0x58>)
 80026d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026d4:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <MX_I2C1_Init+0x50>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80026da:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <MX_I2C1_Init+0x50>)
 80026dc:	2200      	movs	r2, #0
 80026de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026e0:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <MX_I2C1_Init+0x50>)
 80026e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026e8:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <MX_I2C1_Init+0x50>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <MX_I2C1_Init+0x50>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026f4:	4b07      	ldr	r3, [pc, #28]	; (8002714 <MX_I2C1_Init+0x50>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <MX_I2C1_Init+0x50>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002700:	4804      	ldr	r0, [pc, #16]	; (8002714 <MX_I2C1_Init+0x50>)
 8002702:	f001 fc5d 	bl	8003fc0 <HAL_I2C_Init>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800270c:	f000 f9e0 	bl	8002ad0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}
 8002714:	200003d8 	.word	0x200003d8
 8002718:	40005400 	.word	0x40005400
 800271c:	000186a0 	.word	0x000186a0

08002720 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002724:	4b17      	ldr	r3, [pc, #92]	; (8002784 <MX_SPI1_Init+0x64>)
 8002726:	4a18      	ldr	r2, [pc, #96]	; (8002788 <MX_SPI1_Init+0x68>)
 8002728:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800272a:	4b16      	ldr	r3, [pc, #88]	; (8002784 <MX_SPI1_Init+0x64>)
 800272c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002730:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002732:	4b14      	ldr	r3, [pc, #80]	; (8002784 <MX_SPI1_Init+0x64>)
 8002734:	2200      	movs	r2, #0
 8002736:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002738:	4b12      	ldr	r3, [pc, #72]	; (8002784 <MX_SPI1_Init+0x64>)
 800273a:	2200      	movs	r2, #0
 800273c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800273e:	4b11      	ldr	r3, [pc, #68]	; (8002784 <MX_SPI1_Init+0x64>)
 8002740:	2200      	movs	r2, #0
 8002742:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002744:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <MX_SPI1_Init+0x64>)
 8002746:	2200      	movs	r2, #0
 8002748:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800274a:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <MX_SPI1_Init+0x64>)
 800274c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002750:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002752:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <MX_SPI1_Init+0x64>)
 8002754:	2230      	movs	r2, #48	; 0x30
 8002756:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002758:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <MX_SPI1_Init+0x64>)
 800275a:	2200      	movs	r2, #0
 800275c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800275e:	4b09      	ldr	r3, [pc, #36]	; (8002784 <MX_SPI1_Init+0x64>)
 8002760:	2200      	movs	r2, #0
 8002762:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002764:	4b07      	ldr	r3, [pc, #28]	; (8002784 <MX_SPI1_Init+0x64>)
 8002766:	2200      	movs	r2, #0
 8002768:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800276a:	4b06      	ldr	r3, [pc, #24]	; (8002784 <MX_SPI1_Init+0x64>)
 800276c:	220a      	movs	r2, #10
 800276e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002770:	4804      	ldr	r0, [pc, #16]	; (8002784 <MX_SPI1_Init+0x64>)
 8002772:	f003 f8cf 	bl	8005914 <HAL_SPI_Init>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800277c:	f000 f9a8 	bl	8002ad0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002780:	bf00      	nop
 8002782:	bd80      	pop	{r7, pc}
 8002784:	200004fc 	.word	0x200004fc
 8002788:	40013000 	.word	0x40013000

0800278c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002790:	4b17      	ldr	r3, [pc, #92]	; (80027f0 <MX_SPI2_Init+0x64>)
 8002792:	4a18      	ldr	r2, [pc, #96]	; (80027f4 <MX_SPI2_Init+0x68>)
 8002794:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002796:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <MX_SPI2_Init+0x64>)
 8002798:	f44f 7282 	mov.w	r2, #260	; 0x104
 800279c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800279e:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <MX_SPI2_Init+0x64>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80027a4:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <MX_SPI2_Init+0x64>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027aa:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <MX_SPI2_Init+0x64>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027b0:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <MX_SPI2_Init+0x64>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80027b6:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <MX_SPI2_Init+0x64>)
 80027b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80027be:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <MX_SPI2_Init+0x64>)
 80027c0:	2230      	movs	r2, #48	; 0x30
 80027c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027c4:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <MX_SPI2_Init+0x64>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80027ca:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <MX_SPI2_Init+0x64>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027d0:	4b07      	ldr	r3, [pc, #28]	; (80027f0 <MX_SPI2_Init+0x64>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80027d6:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <MX_SPI2_Init+0x64>)
 80027d8:	220a      	movs	r2, #10
 80027da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80027dc:	4804      	ldr	r0, [pc, #16]	; (80027f0 <MX_SPI2_Init+0x64>)
 80027de:	f003 f899 	bl	8005914 <HAL_SPI_Init>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80027e8:	f000 f972 	bl	8002ad0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80027ec:	bf00      	nop
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20000338 	.word	0x20000338
 80027f4:	40003800 	.word	0x40003800

080027f8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80027fc:	4b11      	ldr	r3, [pc, #68]	; (8002844 <MX_UART5_Init+0x4c>)
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <MX_UART5_Init+0x50>)
 8002800:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 19200;
 8002802:	4b10      	ldr	r3, [pc, #64]	; (8002844 <MX_UART5_Init+0x4c>)
 8002804:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002808:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800280a:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <MX_UART5_Init+0x4c>)
 800280c:	2200      	movs	r2, #0
 800280e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <MX_UART5_Init+0x4c>)
 8002812:	2200      	movs	r2, #0
 8002814:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002816:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <MX_UART5_Init+0x4c>)
 8002818:	2200      	movs	r2, #0
 800281a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800281c:	4b09      	ldr	r3, [pc, #36]	; (8002844 <MX_UART5_Init+0x4c>)
 800281e:	220c      	movs	r2, #12
 8002820:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002822:	4b08      	ldr	r3, [pc, #32]	; (8002844 <MX_UART5_Init+0x4c>)
 8002824:	2200      	movs	r2, #0
 8002826:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <MX_UART5_Init+0x4c>)
 800282a:	2200      	movs	r2, #0
 800282c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800282e:	4805      	ldr	r0, [pc, #20]	; (8002844 <MX_UART5_Init+0x4c>)
 8002830:	f003 fe18 	bl	8006464 <HAL_UART_Init>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800283a:	f000 f949 	bl	8002ad0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000430 	.word	0x20000430
 8002848:	40005000 	.word	0x40005000

0800284c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002850:	4b11      	ldr	r3, [pc, #68]	; (8002898 <MX_USART1_UART_Init+0x4c>)
 8002852:	4a12      	ldr	r2, [pc, #72]	; (800289c <MX_USART1_UART_Init+0x50>)
 8002854:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002856:	4b10      	ldr	r3, [pc, #64]	; (8002898 <MX_USART1_UART_Init+0x4c>)
 8002858:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800285c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800285e:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <MX_USART1_UART_Init+0x4c>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <MX_USART1_UART_Init+0x4c>)
 8002866:	2200      	movs	r2, #0
 8002868:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800286a:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <MX_USART1_UART_Init+0x4c>)
 800286c:	2200      	movs	r2, #0
 800286e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002870:	4b09      	ldr	r3, [pc, #36]	; (8002898 <MX_USART1_UART_Init+0x4c>)
 8002872:	220c      	movs	r2, #12
 8002874:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002876:	4b08      	ldr	r3, [pc, #32]	; (8002898 <MX_USART1_UART_Init+0x4c>)
 8002878:	2200      	movs	r2, #0
 800287a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <MX_USART1_UART_Init+0x4c>)
 800287e:	2200      	movs	r2, #0
 8002880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002882:	4805      	ldr	r0, [pc, #20]	; (8002898 <MX_USART1_UART_Init+0x4c>)
 8002884:	f003 fdee 	bl	8006464 <HAL_UART_Init>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800288e:	f000 f91f 	bl	8002ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000474 	.word	0x20000474
 800289c:	40011000 	.word	0x40011000

080028a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028a4:	4b11      	ldr	r3, [pc, #68]	; (80028ec <MX_USART2_UART_Init+0x4c>)
 80028a6:	4a12      	ldr	r2, [pc, #72]	; (80028f0 <MX_USART2_UART_Init+0x50>)
 80028a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028aa:	4b10      	ldr	r3, [pc, #64]	; (80028ec <MX_USART2_UART_Init+0x4c>)
 80028ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028b2:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <MX_USART2_UART_Init+0x4c>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028b8:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <MX_USART2_UART_Init+0x4c>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028be:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <MX_USART2_UART_Init+0x4c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028c4:	4b09      	ldr	r3, [pc, #36]	; (80028ec <MX_USART2_UART_Init+0x4c>)
 80028c6:	220c      	movs	r2, #12
 80028c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ca:	4b08      	ldr	r3, [pc, #32]	; (80028ec <MX_USART2_UART_Init+0x4c>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028d0:	4b06      	ldr	r3, [pc, #24]	; (80028ec <MX_USART2_UART_Init+0x4c>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028d6:	4805      	ldr	r0, [pc, #20]	; (80028ec <MX_USART2_UART_Init+0x4c>)
 80028d8:	f003 fdc4 	bl	8006464 <HAL_UART_Init>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80028e2:	f000 f8f5 	bl	8002ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20000554 	.word	0x20000554
 80028f0:	40004400 	.word	0x40004400

080028f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80028f8:	4b11      	ldr	r3, [pc, #68]	; (8002940 <MX_USART3_UART_Init+0x4c>)
 80028fa:	4a12      	ldr	r2, [pc, #72]	; (8002944 <MX_USART3_UART_Init+0x50>)
 80028fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 80028fe:	4b10      	ldr	r3, [pc, #64]	; (8002940 <MX_USART3_UART_Init+0x4c>)
 8002900:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002904:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002906:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <MX_USART3_UART_Init+0x4c>)
 8002908:	2200      	movs	r2, #0
 800290a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800290c:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <MX_USART3_UART_Init+0x4c>)
 800290e:	2200      	movs	r2, #0
 8002910:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002912:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <MX_USART3_UART_Init+0x4c>)
 8002914:	2200      	movs	r2, #0
 8002916:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002918:	4b09      	ldr	r3, [pc, #36]	; (8002940 <MX_USART3_UART_Init+0x4c>)
 800291a:	220c      	movs	r2, #12
 800291c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800291e:	4b08      	ldr	r3, [pc, #32]	; (8002940 <MX_USART3_UART_Init+0x4c>)
 8002920:	2200      	movs	r2, #0
 8002922:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002924:	4b06      	ldr	r3, [pc, #24]	; (8002940 <MX_USART3_UART_Init+0x4c>)
 8002926:	2200      	movs	r2, #0
 8002928:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800292a:	4805      	ldr	r0, [pc, #20]	; (8002940 <MX_USART3_UART_Init+0x4c>)
 800292c:	f003 fd9a 	bl	8006464 <HAL_UART_Init>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002936:	f000 f8cb 	bl	8002ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000394 	.word	0x20000394
 8002944:	40004800 	.word	0x40004800

08002948 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800294c:	4b11      	ldr	r3, [pc, #68]	; (8002994 <MX_USART6_UART_Init+0x4c>)
 800294e:	4a12      	ldr	r2, [pc, #72]	; (8002998 <MX_USART6_UART_Init+0x50>)
 8002950:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002952:	4b10      	ldr	r3, [pc, #64]	; (8002994 <MX_USART6_UART_Init+0x4c>)
 8002954:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002958:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <MX_USART6_UART_Init+0x4c>)
 800295c:	2200      	movs	r2, #0
 800295e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <MX_USART6_UART_Init+0x4c>)
 8002962:	2200      	movs	r2, #0
 8002964:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002966:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <MX_USART6_UART_Init+0x4c>)
 8002968:	2200      	movs	r2, #0
 800296a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800296c:	4b09      	ldr	r3, [pc, #36]	; (8002994 <MX_USART6_UART_Init+0x4c>)
 800296e:	220c      	movs	r2, #12
 8002970:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002972:	4b08      	ldr	r3, [pc, #32]	; (8002994 <MX_USART6_UART_Init+0x4c>)
 8002974:	2200      	movs	r2, #0
 8002976:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002978:	4b06      	ldr	r3, [pc, #24]	; (8002994 <MX_USART6_UART_Init+0x4c>)
 800297a:	2200      	movs	r2, #0
 800297c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800297e:	4805      	ldr	r0, [pc, #20]	; (8002994 <MX_USART6_UART_Init+0x4c>)
 8002980:	f003 fd70 	bl	8006464 <HAL_UART_Init>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800298a:	f000 f8a1 	bl	8002ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	200004b8 	.word	0x200004b8
 8002998:	40011400 	.word	0x40011400

0800299c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08a      	sub	sp, #40	; 0x28
 80029a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a2:	f107 0314 	add.w	r3, r7, #20
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	605a      	str	r2, [r3, #4]
 80029ac:	609a      	str	r2, [r3, #8]
 80029ae:	60da      	str	r2, [r3, #12]
 80029b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
 80029b6:	4b42      	ldr	r3, [pc, #264]	; (8002ac0 <MX_GPIO_Init+0x124>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	4a41      	ldr	r2, [pc, #260]	; (8002ac0 <MX_GPIO_Init+0x124>)
 80029bc:	f043 0304 	orr.w	r3, r3, #4
 80029c0:	6313      	str	r3, [r2, #48]	; 0x30
 80029c2:	4b3f      	ldr	r3, [pc, #252]	; (8002ac0 <MX_GPIO_Init+0x124>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	4b3b      	ldr	r3, [pc, #236]	; (8002ac0 <MX_GPIO_Init+0x124>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	4a3a      	ldr	r2, [pc, #232]	; (8002ac0 <MX_GPIO_Init+0x124>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	6313      	str	r3, [r2, #48]	; 0x30
 80029de:	4b38      	ldr	r3, [pc, #224]	; (8002ac0 <MX_GPIO_Init+0x124>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	4b34      	ldr	r3, [pc, #208]	; (8002ac0 <MX_GPIO_Init+0x124>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	4a33      	ldr	r2, [pc, #204]	; (8002ac0 <MX_GPIO_Init+0x124>)
 80029f4:	f043 0302 	orr.w	r3, r3, #2
 80029f8:	6313      	str	r3, [r2, #48]	; 0x30
 80029fa:	4b31      	ldr	r3, [pc, #196]	; (8002ac0 <MX_GPIO_Init+0x124>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	607b      	str	r3, [r7, #4]
 8002a0a:	4b2d      	ldr	r3, [pc, #180]	; (8002ac0 <MX_GPIO_Init+0x124>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	4a2c      	ldr	r2, [pc, #176]	; (8002ac0 <MX_GPIO_Init+0x124>)
 8002a10:	f043 0308 	orr.w	r3, r3, #8
 8002a14:	6313      	str	r3, [r2, #48]	; 0x30
 8002a16:	4b2a      	ldr	r3, [pc, #168]	; (8002ac0 <MX_GPIO_Init+0x124>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	607b      	str	r3, [r7, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MS_CS_Pin|LED_Blue_Pin, GPIO_PIN_RESET);
 8002a22:	2200      	movs	r2, #0
 8002a24:	2118      	movs	r1, #24
 8002a26:	4827      	ldr	r0, [pc, #156]	; (8002ac4 <MX_GPIO_Init+0x128>)
 8002a28:	f001 fab0 	bl	8003f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, User_LED_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f44f 7190 	mov.w	r1, #288	; 0x120
 8002a32:	4825      	ldr	r0, [pc, #148]	; (8002ac8 <MX_GPIO_Init+0x12c>)
 8002a34:	f001 faaa 	bl	8003f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Green_Pin|LED_Red_Pin|LED_Orange_Pin|LED_Yellow_Pin, GPIO_PIN_RESET);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f24c 0130 	movw	r1, #49200	; 0xc030
 8002a3e:	4823      	ldr	r0, [pc, #140]	; (8002acc <MX_GPIO_Init+0x130>)
 8002a40:	f001 faa4 	bl	8003f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002a44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a52:	f107 0314 	add.w	r3, r7, #20
 8002a56:	4619      	mov	r1, r3
 8002a58:	481a      	ldr	r0, [pc, #104]	; (8002ac4 <MX_GPIO_Init+0x128>)
 8002a5a:	f001 f903 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : MS_CS_Pin LED_Blue_Pin */
  GPIO_InitStruct.Pin = MS_CS_Pin|LED_Blue_Pin;
 8002a5e:	2318      	movs	r3, #24
 8002a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a62:	2301      	movs	r3, #1
 8002a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a6e:	f107 0314 	add.w	r3, r7, #20
 8002a72:	4619      	mov	r1, r3
 8002a74:	4813      	ldr	r0, [pc, #76]	; (8002ac4 <MX_GPIO_Init+0x128>)
 8002a76:	f001 f8f5 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : User_LED_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = User_LED_Pin|SPI_CS_Pin;
 8002a7a:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a80:	2301      	movs	r3, #1
 8002a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8c:	f107 0314 	add.w	r3, r7, #20
 8002a90:	4619      	mov	r1, r3
 8002a92:	480d      	ldr	r0, [pc, #52]	; (8002ac8 <MX_GPIO_Init+0x12c>)
 8002a94:	f001 f8e6 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Green_Pin LED_Red_Pin LED_Orange_Pin LED_Yellow_Pin */
  GPIO_InitStruct.Pin = LED_Green_Pin|LED_Red_Pin|LED_Orange_Pin|LED_Yellow_Pin;
 8002a98:	f24c 0330 	movw	r3, #49200	; 0xc030
 8002a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aaa:	f107 0314 	add.w	r3, r7, #20
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4806      	ldr	r0, [pc, #24]	; (8002acc <MX_GPIO_Init+0x130>)
 8002ab2:	f001 f8d7 	bl	8003c64 <HAL_GPIO_Init>

}
 8002ab6:	bf00      	nop
 8002ab8:	3728      	adds	r7, #40	; 0x28
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	40020800 	.word	0x40020800
 8002ac8:	40020000 	.word	0x40020000
 8002acc:	40020400 	.word	0x40020400

08002ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ad4:	b672      	cpsid	i
}
 8002ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ad8:	e7fe      	b.n	8002ad8 <Error_Handler+0x8>
	...

08002adc <MS5607_Init>:

/** Reset and prepare for general usage.
 * This will reset the device and perform the PROM reading to find the conversion values and if
 * the communication is working.
 */
MS5607StateTypeDef MS5607_Init(SPI_HandleTypeDef *hspix, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	80fb      	strh	r3, [r7, #6]
  hspi = hspix;
 8002aea:	4a16      	ldr	r2, [pc, #88]	; (8002b44 <MS5607_Init+0x68>)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6013      	str	r3, [r2, #0]
  CS_GPIO_Port = GPIOx;
 8002af0:	4a15      	ldr	r2, [pc, #84]	; (8002b48 <MS5607_Init+0x6c>)
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	6013      	str	r3, [r2, #0]
  CS_Pin = GPIO_Pin;
 8002af6:	4a15      	ldr	r2, [pc, #84]	; (8002b4c <MS5607_Init+0x70>)
 8002af8:	88fb      	ldrh	r3, [r7, #6]
 8002afa:	8013      	strh	r3, [r2, #0]

  enableCSB();
 8002afc:	f000 fb1a 	bl	8003134 <enableCSB>
  SPITransmitData = RESET_COMMAND;
 8002b00:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <MS5607_Init+0x74>)
 8002b02:	221e      	movs	r2, #30
 8002b04:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8002b06:	4b0f      	ldr	r3, [pc, #60]	; (8002b44 <MS5607_Init+0x68>)
 8002b08:	6818      	ldr	r0, [r3, #0]
 8002b0a:	230a      	movs	r3, #10
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	4910      	ldr	r1, [pc, #64]	; (8002b50 <MS5607_Init+0x74>)
 8002b10:	f002 ff89 	bl	8005a26 <HAL_SPI_Transmit>
  HAL_Delay(3);
 8002b14:	2003      	movs	r0, #3
 8002b16:	f000 fec3 	bl	80038a0 <HAL_Delay>
  disableCSB();
 8002b1a:	f000 fb1b 	bl	8003154 <disableCSB>

  MS5607PromRead(&promData);
 8002b1e:	480d      	ldr	r0, [pc, #52]	; (8002b54 <MS5607_Init+0x78>)
 8002b20:	f000 f81a 	bl	8002b58 <MS5607PromRead>

  if (promData.reserved == 0x00 || promData.reserved == 0xff)
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <MS5607_Init+0x78>)
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <MS5607_Init+0x58>
 8002b2c:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <MS5607_Init+0x78>)
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	2bff      	cmp	r3, #255	; 0xff
 8002b32:	d101      	bne.n	8002b38 <MS5607_Init+0x5c>
    return MS5607_STATE_FAILED;
 8002b34:	2300      	movs	r3, #0
 8002b36:	e000      	b.n	8002b3a <MS5607_Init+0x5e>
  else
    return MS5607_STATE_READY;
 8002b38:	2301      	movs	r3, #1
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	2000030c 	.word	0x2000030c
 8002b48:	20000310 	.word	0x20000310
 8002b4c:	20000314 	.word	0x20000314
 8002b50:	20000316 	.word	0x20000316
 8002b54:	20000318 	.word	0x20000318

08002b58 <MS5607PromRead>:

/* Performs a reading on the devices PROM. */
void MS5607PromRead(struct promData *prom){
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint8_t   address;
  uint16_t  *structPointer;

  /* As the PROM is made of 8 16bit addresses I used a pointer for acessing the data structure */
  structPointer = (uint16_t *) prom;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	613b      	str	r3, [r7, #16]

  for (address = 0; address < 8; address++) {
 8002b64:	2300      	movs	r3, #0
 8002b66:	75fb      	strb	r3, [r7, #23]
 8002b68:	e020      	b.n	8002bac <MS5607PromRead+0x54>
    SPITransmitData = PROM_READ(address);
 8002b6a:	7dfb      	ldrb	r3, [r7, #23]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	b25b      	sxtb	r3, r3
 8002b70:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8002b74:	b25b      	sxtb	r3, r3
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	4b1e      	ldr	r3, [pc, #120]	; (8002bf4 <MS5607PromRead+0x9c>)
 8002b7a:	701a      	strb	r2, [r3, #0]
    enableCSB();
 8002b7c:	f000 fada 	bl	8003134 <enableCSB>
    HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8002b80:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <MS5607PromRead+0xa0>)
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	230a      	movs	r3, #10
 8002b86:	2201      	movs	r2, #1
 8002b88:	491a      	ldr	r1, [pc, #104]	; (8002bf4 <MS5607PromRead+0x9c>)
 8002b8a:	f002 ff4c 	bl	8005a26 <HAL_SPI_Transmit>
    /* Receive two bytes at once and stores it directly at the structure */
    HAL_SPI_Receive(hspi, structPointer, 2, 10);
 8002b8e:	4b1a      	ldr	r3, [pc, #104]	; (8002bf8 <MS5607PromRead+0xa0>)
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	230a      	movs	r3, #10
 8002b94:	2202      	movs	r2, #2
 8002b96:	6939      	ldr	r1, [r7, #16]
 8002b98:	f003 f881 	bl	8005c9e <HAL_SPI_Receive>
    disableCSB();
 8002b9c:	f000 fada 	bl	8003154 <disableCSB>
    structPointer++;
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	3302      	adds	r3, #2
 8002ba4:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 8002ba6:	7dfb      	ldrb	r3, [r7, #23]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	75fb      	strb	r3, [r7, #23]
 8002bac:	7dfb      	ldrb	r3, [r7, #23]
 8002bae:	2b07      	cmp	r3, #7
 8002bb0:	d9db      	bls.n	8002b6a <MS5607PromRead+0x12>
  }

  /* Byte swap on 16bit integers*/
  structPointer = (uint16_t *) prom;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	75fb      	strb	r3, [r7, #23]
 8002bba:	e012      	b.n	8002be2 <MS5607PromRead+0x8a>
    uint8_t   *toSwap = (uint8_t *) structPointer;
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	60fb      	str	r3, [r7, #12]
    uint8_t secondByte = toSwap[0];
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	72fb      	strb	r3, [r7, #11]
    toSwap[0] = toSwap[1];
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	785a      	ldrb	r2, [r3, #1]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	701a      	strb	r2, [r3, #0]
    toSwap[1] = secondByte;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	7afa      	ldrb	r2, [r7, #11]
 8002bd4:	701a      	strb	r2, [r3, #0]
    structPointer++;
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	3302      	adds	r3, #2
 8002bda:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 8002bdc:	7dfb      	ldrb	r3, [r7, #23]
 8002bde:	3301      	adds	r3, #1
 8002be0:	75fb      	strb	r3, [r7, #23]
 8002be2:	7dfb      	ldrb	r3, [r7, #23]
 8002be4:	2b07      	cmp	r3, #7
 8002be6:	d9e9      	bls.n	8002bbc <MS5607PromRead+0x64>
  }
}
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	20000316 	.word	0x20000316
 8002bf8:	2000030c 	.word	0x2000030c

08002bfc <MS5607UncompensatedRead>:

/* Performs a reading on the devices PROM. */
void MS5607UncompensatedRead(struct MS5607UncompensatedValues *uncompValues){
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]

  /*Sensor reply data buffer*/
  uint8_t reply[3];

  enableCSB();
 8002c04:	f000 fa96 	bl	8003134 <enableCSB>
  /* Assemble the conversion command based on previously set OSR */
  SPITransmitData = CONVERT_D1_COMMAND | Pressure_OSR;
 8002c08:	4b55      	ldr	r3, [pc, #340]	; (8002d60 <MS5607UncompensatedRead+0x164>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	4b54      	ldr	r3, [pc, #336]	; (8002d64 <MS5607UncompensatedRead+0x168>)
 8002c14:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8002c16:	4b54      	ldr	r3, [pc, #336]	; (8002d68 <MS5607UncompensatedRead+0x16c>)
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	230a      	movs	r3, #10
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	4951      	ldr	r1, [pc, #324]	; (8002d64 <MS5607UncompensatedRead+0x168>)
 8002c20:	f002 ff01 	bl	8005a26 <HAL_SPI_Transmit>

  if(Pressure_OSR == 0x00)
 8002c24:	4b4e      	ldr	r3, [pc, #312]	; (8002d60 <MS5607UncompensatedRead+0x164>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d103      	bne.n	8002c34 <MS5607UncompensatedRead+0x38>
    HAL_Delay(1);
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	f000 fe37 	bl	80038a0 <HAL_Delay>
 8002c32:	e01a      	b.n	8002c6a <MS5607UncompensatedRead+0x6e>
  else if(Pressure_OSR == 0x02)
 8002c34:	4b4a      	ldr	r3, [pc, #296]	; (8002d60 <MS5607UncompensatedRead+0x164>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d103      	bne.n	8002c44 <MS5607UncompensatedRead+0x48>
    HAL_Delay(2);
 8002c3c:	2002      	movs	r0, #2
 8002c3e:	f000 fe2f 	bl	80038a0 <HAL_Delay>
 8002c42:	e012      	b.n	8002c6a <MS5607UncompensatedRead+0x6e>
  else if(Pressure_OSR == 0x04)
 8002c44:	4b46      	ldr	r3, [pc, #280]	; (8002d60 <MS5607UncompensatedRead+0x164>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d103      	bne.n	8002c54 <MS5607UncompensatedRead+0x58>
    HAL_Delay(3);
 8002c4c:	2003      	movs	r0, #3
 8002c4e:	f000 fe27 	bl	80038a0 <HAL_Delay>
 8002c52:	e00a      	b.n	8002c6a <MS5607UncompensatedRead+0x6e>
  else if(Pressure_OSR == 0x06)
 8002c54:	4b42      	ldr	r3, [pc, #264]	; (8002d60 <MS5607UncompensatedRead+0x164>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b06      	cmp	r3, #6
 8002c5a:	d103      	bne.n	8002c64 <MS5607UncompensatedRead+0x68>
    HAL_Delay(5);
 8002c5c:	2005      	movs	r0, #5
 8002c5e:	f000 fe1f 	bl	80038a0 <HAL_Delay>
 8002c62:	e002      	b.n	8002c6a <MS5607UncompensatedRead+0x6e>
  else
    HAL_Delay(10);
 8002c64:	200a      	movs	r0, #10
 8002c66:	f000 fe1b 	bl	80038a0 <HAL_Delay>

  disableCSB();
 8002c6a:	f000 fa73 	bl	8003154 <disableCSB>

  /* Performs the reading of the 24 bits from the ADC */

  enableCSB();
 8002c6e:	f000 fa61 	bl	8003134 <enableCSB>

  SPITransmitData = READ_ADC_COMMAND;
 8002c72:	4b3c      	ldr	r3, [pc, #240]	; (8002d64 <MS5607UncompensatedRead+0x168>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8002c78:	4b3b      	ldr	r3, [pc, #236]	; (8002d68 <MS5607UncompensatedRead+0x16c>)
 8002c7a:	6818      	ldr	r0, [r3, #0]
 8002c7c:	230a      	movs	r3, #10
 8002c7e:	2201      	movs	r2, #1
 8002c80:	4938      	ldr	r1, [pc, #224]	; (8002d64 <MS5607UncompensatedRead+0x168>)
 8002c82:	f002 fed0 	bl	8005a26 <HAL_SPI_Transmit>
  HAL_SPI_Receive(hspi, reply, 3, HAL_MAX_DELAY);
 8002c86:	4b38      	ldr	r3, [pc, #224]	; (8002d68 <MS5607UncompensatedRead+0x16c>)
 8002c88:	6818      	ldr	r0, [r3, #0]
 8002c8a:	f107 010c 	add.w	r1, r7, #12
 8002c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c92:	2203      	movs	r2, #3
 8002c94:	f003 f803 	bl	8005c9e <HAL_SPI_Receive>

  disableCSB();
 8002c98:	f000 fa5c 	bl	8003154 <disableCSB>

  /* Tranfer the 24bits read into a 32bit int */
  uncompValues->pressure = ((uint32_t) reply[0] << 16) | ((uint32_t) reply[1] << 8) | (uint32_t) reply[2];
 8002c9c:	7b3b      	ldrb	r3, [r7, #12]
 8002c9e:	041a      	lsls	r2, r3, #16
 8002ca0:	7b7b      	ldrb	r3, [r7, #13]
 8002ca2:	021b      	lsls	r3, r3, #8
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	7bba      	ldrb	r2, [r7, #14]
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	601a      	str	r2, [r3, #0]

  enableCSB();
 8002cae:	f000 fa41 	bl	8003134 <enableCSB>

  /* Assemble the conversion command based on previously set OSR */
  SPITransmitData = CONVERT_D2_COMMAND | Temperature_OSR;
 8002cb2:	4b2e      	ldr	r3, [pc, #184]	; (8002d6c <MS5607UncompensatedRead+0x170>)
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	4b29      	ldr	r3, [pc, #164]	; (8002d64 <MS5607UncompensatedRead+0x168>)
 8002cbe:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8002cc0:	4b29      	ldr	r3, [pc, #164]	; (8002d68 <MS5607UncompensatedRead+0x16c>)
 8002cc2:	6818      	ldr	r0, [r3, #0]
 8002cc4:	230a      	movs	r3, #10
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	4926      	ldr	r1, [pc, #152]	; (8002d64 <MS5607UncompensatedRead+0x168>)
 8002cca:	f002 feac 	bl	8005a26 <HAL_SPI_Transmit>

  if(Temperature_OSR == 0x00)
 8002cce:	4b27      	ldr	r3, [pc, #156]	; (8002d6c <MS5607UncompensatedRead+0x170>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d103      	bne.n	8002cde <MS5607UncompensatedRead+0xe2>
    HAL_Delay(1);
 8002cd6:	2001      	movs	r0, #1
 8002cd8:	f000 fde2 	bl	80038a0 <HAL_Delay>
 8002cdc:	e01a      	b.n	8002d14 <MS5607UncompensatedRead+0x118>
  else if(Temperature_OSR == 0x02)
 8002cde:	4b23      	ldr	r3, [pc, #140]	; (8002d6c <MS5607UncompensatedRead+0x170>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d103      	bne.n	8002cee <MS5607UncompensatedRead+0xf2>
    HAL_Delay(2);
 8002ce6:	2002      	movs	r0, #2
 8002ce8:	f000 fdda 	bl	80038a0 <HAL_Delay>
 8002cec:	e012      	b.n	8002d14 <MS5607UncompensatedRead+0x118>
  else if(Temperature_OSR == 0x04)
 8002cee:	4b1f      	ldr	r3, [pc, #124]	; (8002d6c <MS5607UncompensatedRead+0x170>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d103      	bne.n	8002cfe <MS5607UncompensatedRead+0x102>
    HAL_Delay(3);
 8002cf6:	2003      	movs	r0, #3
 8002cf8:	f000 fdd2 	bl	80038a0 <HAL_Delay>
 8002cfc:	e00a      	b.n	8002d14 <MS5607UncompensatedRead+0x118>
  else if(Temperature_OSR == 0x06)
 8002cfe:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <MS5607UncompensatedRead+0x170>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b06      	cmp	r3, #6
 8002d04:	d103      	bne.n	8002d0e <MS5607UncompensatedRead+0x112>
    HAL_Delay(5);
 8002d06:	2005      	movs	r0, #5
 8002d08:	f000 fdca 	bl	80038a0 <HAL_Delay>
 8002d0c:	e002      	b.n	8002d14 <MS5607UncompensatedRead+0x118>
  else
    HAL_Delay(10);
 8002d0e:	200a      	movs	r0, #10
 8002d10:	f000 fdc6 	bl	80038a0 <HAL_Delay>

  disableCSB();
 8002d14:	f000 fa1e 	bl	8003154 <disableCSB>


  enableCSB();
 8002d18:	f000 fa0c 	bl	8003134 <enableCSB>

  SPITransmitData = READ_ADC_COMMAND;
 8002d1c:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <MS5607UncompensatedRead+0x168>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8002d22:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <MS5607UncompensatedRead+0x16c>)
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	230a      	movs	r3, #10
 8002d28:	2201      	movs	r2, #1
 8002d2a:	490e      	ldr	r1, [pc, #56]	; (8002d64 <MS5607UncompensatedRead+0x168>)
 8002d2c:	f002 fe7b 	bl	8005a26 <HAL_SPI_Transmit>
  HAL_SPI_Receive(hspi, reply, 3, 10);
 8002d30:	4b0d      	ldr	r3, [pc, #52]	; (8002d68 <MS5607UncompensatedRead+0x16c>)
 8002d32:	6818      	ldr	r0, [r3, #0]
 8002d34:	f107 010c 	add.w	r1, r7, #12
 8002d38:	230a      	movs	r3, #10
 8002d3a:	2203      	movs	r2, #3
 8002d3c:	f002 ffaf 	bl	8005c9e <HAL_SPI_Receive>

  disableCSB();
 8002d40:	f000 fa08 	bl	8003154 <disableCSB>

  /* Assemble the conversion command based on previously set OSR */
  uncompValues->temperature = ((uint32_t) reply[0] << 16) | ((uint32_t) reply[1] << 8) | (uint32_t) reply[2];
 8002d44:	7b3b      	ldrb	r3, [r7, #12]
 8002d46:	041a      	lsls	r2, r3, #16
 8002d48:	7b7b      	ldrb	r3, [r7, #13]
 8002d4a:	021b      	lsls	r3, r3, #8
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	7bba      	ldrb	r2, [r7, #14]
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	605a      	str	r2, [r3, #4]
}
 8002d56:	bf00      	nop
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000000 	.word	0x20000000
 8002d64:	20000316 	.word	0x20000316
 8002d68:	2000030c 	.word	0x2000030c
 8002d6c:	20000001 	.word	0x20000001

08002d70 <MS5607Convert>:

/* Performs the data conversion according to the MS5607 datasheet */
void MS5607Convert(struct MS5607UncompensatedValues *sample, struct MS5607Readings *value){
 8002d70:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002d74:	b0a6      	sub	sp, #152	; 0x98
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6578      	str	r0, [r7, #84]	; 0x54
 8002d7a:	6539      	str	r1, [r7, #80]	; 0x50
  int32_t dT;
  int32_t TEMP;
  int64_t OFF;
  int64_t SENS;

  dT = sample->temperature - ((int32_t) (promData.tref << 8)); //2000+((2352096-30194*2^8)*28323/(2^(23))),,,7182304,  kolem nuly: 7181536
 8002d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	4bcf      	ldr	r3, [pc, #828]	; (80030c0 <MS5607Convert+0x350>)
 8002d82:	895b      	ldrh	r3, [r3, #10]
 8002d84:	021b      	lsls	r3, r3, #8
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	66fb      	str	r3, [r7, #108]	; 0x6c

  TEMP = 2000 + (((int64_t) dT * promData.tempsens) >> 23);
 8002d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002d92:	4bcb      	ldr	r3, [pc, #812]	; (80030c0 <MS5607Convert+0x350>)
 8002d94:	899b      	ldrh	r3, [r3, #12]
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	fb02 f501 	mul.w	r5, r2, r1
 8002da0:	fb00 f403 	mul.w	r4, r0, r3
 8002da4:	442c      	add	r4, r5
 8002da6:	fba0 2302 	umull	r2, r3, r0, r2
 8002daa:	18e1      	adds	r1, r4, r3
 8002dac:	460b      	mov	r3, r1
 8002dae:	f04f 0000 	mov.w	r0, #0
 8002db2:	f04f 0100 	mov.w	r1, #0
 8002db6:	0dd0      	lsrs	r0, r2, #23
 8002db8:	ea40 2043 	orr.w	r0, r0, r3, lsl #9
 8002dbc:	15d9      	asrs	r1, r3, #23
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002dc4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

  OFF = ((int64_t) promData.off << 17) + (((int64_t) promData.tco * dT) >> 6);
 8002dc8:	4bbd      	ldr	r3, [pc, #756]	; (80030c0 <MS5607Convert+0x350>)
 8002dca:	889b      	ldrh	r3, [r3, #4]
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	ea4f 39d2 	mov.w	r9, r2, lsr #15
 8002dd6:	ea4f 4842 	mov.w	r8, r2, lsl #17
 8002dda:	4bb9      	ldr	r3, [pc, #740]	; (80030c0 <MS5607Convert+0x350>)
 8002ddc:	891b      	ldrh	r3, [r3, #8]
 8002dde:	b298      	uxth	r0, r3
 8002de0:	f04f 0100 	mov.w	r1, #0
 8002de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002de6:	461a      	mov	r2, r3
 8002de8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002dec:	fb02 f501 	mul.w	r5, r2, r1
 8002df0:	fb00 f403 	mul.w	r4, r0, r3
 8002df4:	442c      	add	r4, r5
 8002df6:	fba0 0102 	umull	r0, r1, r0, r2
 8002dfa:	1863      	adds	r3, r4, r1
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	0982      	lsrs	r2, r0, #6
 8002e08:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 8002e0c:	118b      	asrs	r3, r1, #6
 8002e0e:	eb18 0102 	adds.w	r1, r8, r2
 8002e12:	6339      	str	r1, [r7, #48]	; 0x30
 8002e14:	eb49 0303 	adc.w	r3, r9, r3
 8002e18:	637b      	str	r3, [r7, #52]	; 0x34
 8002e1a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002e1e:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
  SENS = ((int64_t) promData.sens << 16) + (((int64_t) promData.tcs * dT) >> 7);
 8002e22:	4ba7      	ldr	r3, [pc, #668]	; (80030c0 <MS5607Convert+0x350>)
 8002e24:	885b      	ldrh	r3, [r3, #2]
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8002e30:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8002e34:	4ba2      	ldr	r3, [pc, #648]	; (80030c0 <MS5607Convert+0x350>)
 8002e36:	88db      	ldrh	r3, [r3, #6]
 8002e38:	b298      	uxth	r0, r3
 8002e3a:	f04f 0100 	mov.w	r1, #0
 8002e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e40:	461a      	mov	r2, r3
 8002e42:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002e46:	fb02 f501 	mul.w	r5, r2, r1
 8002e4a:	fb00 f403 	mul.w	r4, r0, r3
 8002e4e:	442c      	add	r4, r5
 8002e50:	fba0 0102 	umull	r0, r1, r0, r2
 8002e54:	1863      	adds	r3, r4, r1
 8002e56:	4619      	mov	r1, r3
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	09c2      	lsrs	r2, r0, #7
 8002e62:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8002e66:	11cb      	asrs	r3, r1, #7
 8002e68:	eb1a 0102 	adds.w	r1, sl, r2
 8002e6c:	62b9      	str	r1, [r7, #40]	; 0x28
 8002e6e:	eb4b 0303 	adc.w	r3, fp, r3
 8002e72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e74:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8002e78:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80

  /**/
  if (TEMP < 2000) {
 8002e7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e80:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002e84:	f280 80df 	bge.w	8003046 <MS5607Convert+0x2d6>
    int32_t T2 = ((int64_t) dT * (int64_t) dT) >> 31;
 8002e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e92:	461a      	mov	r2, r3
 8002e94:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002e98:	fb02 f501 	mul.w	r5, r2, r1
 8002e9c:	fb00 f403 	mul.w	r4, r0, r3
 8002ea0:	442c      	add	r4, r5
 8002ea2:	fba0 2302 	umull	r2, r3, r0, r2
 8002ea6:	18e1      	adds	r1, r4, r3
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	f04f 0000 	mov.w	r0, #0
 8002eae:	f04f 0100 	mov.w	r1, #0
 8002eb2:	0fd0      	lsrs	r0, r2, #31
 8002eb4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8002eb8:	17d9      	asrs	r1, r3, #31
 8002eba:	4603      	mov	r3, r0
 8002ebc:	66bb      	str	r3, [r7, #104]	; 0x68
    int32_t TEMPM = TEMP - 2000;
 8002ebe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ec2:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8002ec6:	667b      	str	r3, [r7, #100]	; 0x64
    int64_t OFF2 = (61 * (int64_t) TEMPM * (int64_t) TEMPM) >> 4;
 8002ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002eca:	4618      	mov	r0, r3
 8002ecc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002ed0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002ed8:	fb02 f501 	mul.w	r5, r2, r1
 8002edc:	fb00 f403 	mul.w	r4, r0, r3
 8002ee0:	192e      	adds	r6, r5, r4
 8002ee2:	fba0 4502 	umull	r4, r5, r0, r2
 8002ee6:	1973      	adds	r3, r6, r5
 8002ee8:	461d      	mov	r5, r3
 8002eea:	4622      	mov	r2, r4
 8002eec:	462b      	mov	r3, r5
 8002eee:	f04f 0000 	mov.w	r0, #0
 8002ef2:	f04f 0100 	mov.w	r1, #0
 8002ef6:	0119      	lsls	r1, r3, #4
 8002ef8:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8002efc:	0110      	lsls	r0, r2, #4
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	1b12      	subs	r2, r2, r4
 8002f04:	eb63 0305 	sbc.w	r3, r3, r5
 8002f08:	f04f 0000 	mov.w	r0, #0
 8002f0c:	f04f 0100 	mov.w	r1, #0
 8002f10:	0099      	lsls	r1, r3, #2
 8002f12:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002f16:	0090      	lsls	r0, r2, #2
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	1911      	adds	r1, r2, r4
 8002f1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f20:	416b      	adcs	r3, r5
 8002f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002f30:	4621      	mov	r1, r4
 8002f32:	090a      	lsrs	r2, r1, #4
 8002f34:	4629      	mov	r1, r5
 8002f36:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8002f3a:	4629      	mov	r1, r5
 8002f3c:	110b      	asrs	r3, r1, #4
 8002f3e:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
    int64_t SENS2 = 2 * (int64_t) TEMPM * (int64_t) TEMPM;
 8002f42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f44:	4618      	mov	r0, r3
 8002f46:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002f4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002f52:	fb02 f501 	mul.w	r5, r2, r1
 8002f56:	fb00 f403 	mul.w	r4, r0, r3
 8002f5a:	442c      	add	r4, r5
 8002f5c:	fba0 2302 	umull	r2, r3, r0, r2
 8002f60:	18e1      	adds	r1, r4, r3
 8002f62:	460b      	mov	r3, r1
 8002f64:	1891      	adds	r1, r2, r2
 8002f66:	6239      	str	r1, [r7, #32]
 8002f68:	415b      	adcs	r3, r3
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f6c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002f70:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    if (TEMP < -1500) {
 8002f74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f78:	4a52      	ldr	r2, [pc, #328]	; (80030c4 <MS5607Convert+0x354>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	da43      	bge.n	8003006 <MS5607Convert+0x296>
      int32_t TEMPP = TEMP + 1500;
 8002f7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f82:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8002f86:	663b      	str	r3, [r7, #96]	; 0x60
      int32_t TEMPP2 = TEMPP * TEMPP;
 8002f88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f8a:	fb03 f303 	mul.w	r3, r3, r3
 8002f8e:	65fb      	str	r3, [r7, #92]	; 0x5c
      OFF2 = OFF2 + (int64_t) 15 * TEMPP2;
 8002f90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f92:	461c      	mov	r4, r3
 8002f94:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8002f98:	4622      	mov	r2, r4
 8002f9a:	462b      	mov	r3, r5
 8002f9c:	f04f 0000 	mov.w	r0, #0
 8002fa0:	f04f 0100 	mov.w	r1, #0
 8002fa4:	0119      	lsls	r1, r3, #4
 8002fa6:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8002faa:	0110      	lsls	r0, r2, #4
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	1b11      	subs	r1, r2, r4
 8002fb2:	6439      	str	r1, [r7, #64]	; 0x40
 8002fb4:	eb63 0305 	sbc.w	r3, r3, r5
 8002fb8:	647b      	str	r3, [r7, #68]	; 0x44
 8002fba:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002fbe:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8002fc2:	4621      	mov	r1, r4
 8002fc4:	1851      	adds	r1, r2, r1
 8002fc6:	61b9      	str	r1, [r7, #24]
 8002fc8:	4629      	mov	r1, r5
 8002fca:	eb43 0101 	adc.w	r1, r3, r1
 8002fce:	61f9      	str	r1, [r7, #28]
 8002fd0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002fd4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      SENS2 = SENS2 + (int64_t) 8 * TEMPP2;
 8002fd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fda:	4618      	mov	r0, r3
 8002fdc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	00cb      	lsls	r3, r1, #3
 8002fea:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002fee:	00c2      	lsls	r2, r0, #3
 8002ff0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002ff4:	1884      	adds	r4, r0, r2
 8002ff6:	613c      	str	r4, [r7, #16]
 8002ff8:	eb41 0303 	adc.w	r3, r1, r3
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003002:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    }
    TEMP -= T2;
 8003006:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800300a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    OFF -= OFF2;
 8003012:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8003016:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800301a:	1a84      	subs	r4, r0, r2
 800301c:	60bc      	str	r4, [r7, #8]
 800301e:	eb61 0303 	sbc.w	r3, r1, r3
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003028:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
    SENS -= SENS2;
 800302c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003030:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003034:	1a84      	subs	r4, r0, r2
 8003036:	603c      	str	r4, [r7, #0]
 8003038:	eb61 0303 	sbc.w	r3, r1, r3
 800303c:	607b      	str	r3, [r7, #4]
 800303e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003042:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
  }

  value->pressure = ((((int64_t) sample->pressure * SENS) >> 21) - OFF) >> 15;
 8003046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003054:	fb03 f001 	mul.w	r0, r3, r1
 8003058:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800305c:	fb02 f101 	mul.w	r1, r2, r1
 8003060:	1844      	adds	r4, r0, r1
 8003062:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003066:	fba1 0102 	umull	r0, r1, r1, r2
 800306a:	1863      	adds	r3, r4, r1
 800306c:	4619      	mov	r1, r3
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	0d42      	lsrs	r2, r0, #21
 8003078:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800307c:	154b      	asrs	r3, r1, #21
 800307e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8003082:	1a14      	subs	r4, r2, r0
 8003084:	63bc      	str	r4, [r7, #56]	; 0x38
 8003086:	eb63 0301 	sbc.w	r3, r3, r1
 800308a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8003098:	4621      	mov	r1, r4
 800309a:	0bca      	lsrs	r2, r1, #15
 800309c:	4629      	mov	r1, r5
 800309e:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 80030a2:	4629      	mov	r1, r5
 80030a4:	13cb      	asrs	r3, r1, #15
 80030a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030a8:	601a      	str	r2, [r3, #0]
  value->temperature = TEMP;
 80030aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030b0:	605a      	str	r2, [r3, #4]
}
 80030b2:	bf00      	nop
 80030b4:	3798      	adds	r7, #152	; 0x98
 80030b6:	46bd      	mov	sp, r7
 80030b8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	20000318 	.word	0x20000318
 80030c4:	fffffa24 	.word	0xfffffa24

080030c8 <MS5607Update>:

/* Performs the sensor reading updating the data structures */
void MS5607Update(void){
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0

  MS5607UncompensatedRead(&uncompValues);
 80030cc:	4804      	ldr	r0, [pc, #16]	; (80030e0 <MS5607Update+0x18>)
 80030ce:	f7ff fd95 	bl	8002bfc <MS5607UncompensatedRead>
  MS5607Convert(&uncompValues, &readings);
 80030d2:	4904      	ldr	r1, [pc, #16]	; (80030e4 <MS5607Update+0x1c>)
 80030d4:	4802      	ldr	r0, [pc, #8]	; (80030e0 <MS5607Update+0x18>)
 80030d6:	f7ff fe4b 	bl	8002d70 <MS5607Convert>
}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000328 	.word	0x20000328
 80030e4:	20000330 	.word	0x20000330

080030e8 <MS5607GetTemperatureC>:

/* Gets the temperature from the sensor reading */
double MS5607GetTemperatureC(void){
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  return (double)readings.temperature/(double)100.0;
 80030ec:	4b09      	ldr	r3, [pc, #36]	; (8003114 <MS5607GetTemperatureC+0x2c>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fd f9db 	bl	80004ac <__aeabi_i2d>
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	4b07      	ldr	r3, [pc, #28]	; (8003118 <MS5607GetTemperatureC+0x30>)
 80030fc:	f7fd fb6a 	bl	80007d4 <__aeabi_ddiv>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	ec43 2b17 	vmov	d7, r2, r3
}
 8003108:	eeb0 0a47 	vmov.f32	s0, s14
 800310c:	eef0 0a67 	vmov.f32	s1, s15
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	20000330 	.word	0x20000330
 8003118:	40590000 	.word	0x40590000

0800311c <MS5607GetPressurePa>:

/* Gets the pressure from the sensor reading */
int32_t MS5607GetPressurePa(void){
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return readings.pressure;
 8003120:	4b03      	ldr	r3, [pc, #12]	; (8003130 <MS5607GetPressurePa+0x14>)
 8003122:	681b      	ldr	r3, [r3, #0]
}
 8003124:	4618      	mov	r0, r3
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	20000330 	.word	0x20000330

08003134 <enableCSB>:

/* Sets the CS pin */
void enableCSB(void){
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8003138:	4b04      	ldr	r3, [pc, #16]	; (800314c <enableCSB+0x18>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a04      	ldr	r2, [pc, #16]	; (8003150 <enableCSB+0x1c>)
 800313e:	8811      	ldrh	r1, [r2, #0]
 8003140:	2200      	movs	r2, #0
 8003142:	4618      	mov	r0, r3
 8003144:	f000 ff22 	bl	8003f8c <HAL_GPIO_WritePin>
}
 8003148:	bf00      	nop
 800314a:	bd80      	pop	{r7, pc}
 800314c:	20000310 	.word	0x20000310
 8003150:	20000314 	.word	0x20000314

08003154 <disableCSB>:

/* Sets the CS pin */
void disableCSB(void){
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8003158:	4b04      	ldr	r3, [pc, #16]	; (800316c <disableCSB+0x18>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a04      	ldr	r2, [pc, #16]	; (8003170 <disableCSB+0x1c>)
 800315e:	8811      	ldrh	r1, [r2, #0]
 8003160:	2201      	movs	r2, #1
 8003162:	4618      	mov	r0, r3
 8003164:	f000 ff12 	bl	8003f8c <HAL_GPIO_WritePin>
}
 8003168:	bf00      	nop
 800316a:	bd80      	pop	{r7, pc}
 800316c:	20000310 	.word	0x20000310
 8003170:	20000314 	.word	0x20000314

08003174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	607b      	str	r3, [r7, #4]
 800317e:	4b10      	ldr	r3, [pc, #64]	; (80031c0 <HAL_MspInit+0x4c>)
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	4a0f      	ldr	r2, [pc, #60]	; (80031c0 <HAL_MspInit+0x4c>)
 8003184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003188:	6453      	str	r3, [r2, #68]	; 0x44
 800318a:	4b0d      	ldr	r3, [pc, #52]	; (80031c0 <HAL_MspInit+0x4c>)
 800318c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003192:	607b      	str	r3, [r7, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003196:	2300      	movs	r3, #0
 8003198:	603b      	str	r3, [r7, #0]
 800319a:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <HAL_MspInit+0x4c>)
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	4a08      	ldr	r2, [pc, #32]	; (80031c0 <HAL_MspInit+0x4c>)
 80031a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a4:	6413      	str	r3, [r2, #64]	; 0x40
 80031a6:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <HAL_MspInit+0x4c>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ae:	603b      	str	r3, [r7, #0]
 80031b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	40023800 	.word	0x40023800

080031c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08a      	sub	sp, #40	; 0x28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031cc:	f107 0314 	add.w	r3, r7, #20
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	605a      	str	r2, [r3, #4]
 80031d6:	609a      	str	r2, [r3, #8]
 80031d8:	60da      	str	r2, [r3, #12]
 80031da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a19      	ldr	r2, [pc, #100]	; (8003248 <HAL_I2C_MspInit+0x84>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d12b      	bne.n	800323e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	4b18      	ldr	r3, [pc, #96]	; (800324c <HAL_I2C_MspInit+0x88>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	4a17      	ldr	r2, [pc, #92]	; (800324c <HAL_I2C_MspInit+0x88>)
 80031f0:	f043 0302 	orr.w	r3, r3, #2
 80031f4:	6313      	str	r3, [r2, #48]	; 0x30
 80031f6:	4b15      	ldr	r3, [pc, #84]	; (800324c <HAL_I2C_MspInit+0x88>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	613b      	str	r3, [r7, #16]
 8003200:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003202:	23c0      	movs	r3, #192	; 0xc0
 8003204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003206:	2312      	movs	r3, #18
 8003208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800320e:	2303      	movs	r3, #3
 8003210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003212:	2304      	movs	r3, #4
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003216:	f107 0314 	add.w	r3, r7, #20
 800321a:	4619      	mov	r1, r3
 800321c:	480c      	ldr	r0, [pc, #48]	; (8003250 <HAL_I2C_MspInit+0x8c>)
 800321e:	f000 fd21 	bl	8003c64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	4b09      	ldr	r3, [pc, #36]	; (800324c <HAL_I2C_MspInit+0x88>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	4a08      	ldr	r2, [pc, #32]	; (800324c <HAL_I2C_MspInit+0x88>)
 800322c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003230:	6413      	str	r3, [r2, #64]	; 0x40
 8003232:	4b06      	ldr	r3, [pc, #24]	; (800324c <HAL_I2C_MspInit+0x88>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800323e:	bf00      	nop
 8003240:	3728      	adds	r7, #40	; 0x28
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40005400 	.word	0x40005400
 800324c:	40023800 	.word	0x40023800
 8003250:	40020400 	.word	0x40020400

08003254 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08e      	sub	sp, #56	; 0x38
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800325c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	60da      	str	r2, [r3, #12]
 800326a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a58      	ldr	r2, [pc, #352]	; (80033d4 <HAL_SPI_MspInit+0x180>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d14a      	bne.n	800330c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	623b      	str	r3, [r7, #32]
 800327a:	4b57      	ldr	r3, [pc, #348]	; (80033d8 <HAL_SPI_MspInit+0x184>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	4a56      	ldr	r2, [pc, #344]	; (80033d8 <HAL_SPI_MspInit+0x184>)
 8003280:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003284:	6453      	str	r3, [r2, #68]	; 0x44
 8003286:	4b54      	ldr	r3, [pc, #336]	; (80033d8 <HAL_SPI_MspInit+0x184>)
 8003288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800328e:	623b      	str	r3, [r7, #32]
 8003290:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	61fb      	str	r3, [r7, #28]
 8003296:	4b50      	ldr	r3, [pc, #320]	; (80033d8 <HAL_SPI_MspInit+0x184>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	4a4f      	ldr	r2, [pc, #316]	; (80033d8 <HAL_SPI_MspInit+0x184>)
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	6313      	str	r3, [r2, #48]	; 0x30
 80032a2:	4b4d      	ldr	r3, [pc, #308]	; (80033d8 <HAL_SPI_MspInit+0x184>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	61fb      	str	r3, [r7, #28]
 80032ac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	61bb      	str	r3, [r7, #24]
 80032b2:	4b49      	ldr	r3, [pc, #292]	; (80033d8 <HAL_SPI_MspInit+0x184>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	4a48      	ldr	r2, [pc, #288]	; (80033d8 <HAL_SPI_MspInit+0x184>)
 80032b8:	f043 0302 	orr.w	r3, r3, #2
 80032bc:	6313      	str	r3, [r2, #48]	; 0x30
 80032be:	4b46      	ldr	r3, [pc, #280]	; (80033d8 <HAL_SPI_MspInit+0x184>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	61bb      	str	r3, [r7, #24]
 80032c8:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032ca:	23c0      	movs	r3, #192	; 0xc0
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ce:	2302      	movs	r3, #2
 80032d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d6:	2303      	movs	r3, #3
 80032d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032da:	2305      	movs	r3, #5
 80032dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032e2:	4619      	mov	r1, r3
 80032e4:	483d      	ldr	r0, [pc, #244]	; (80033dc <HAL_SPI_MspInit+0x188>)
 80032e6:	f000 fcbd 	bl	8003c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80032ea:	2308      	movs	r3, #8
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ee:	2302      	movs	r3, #2
 80032f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f6:	2303      	movs	r3, #3
 80032f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032fa:	2305      	movs	r3, #5
 80032fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003302:	4619      	mov	r1, r3
 8003304:	4836      	ldr	r0, [pc, #216]	; (80033e0 <HAL_SPI_MspInit+0x18c>)
 8003306:	f000 fcad 	bl	8003c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800330a:	e05f      	b.n	80033cc <HAL_SPI_MspInit+0x178>
  else if(hspi->Instance==SPI2)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a34      	ldr	r2, [pc, #208]	; (80033e4 <HAL_SPI_MspInit+0x190>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d15a      	bne.n	80033cc <HAL_SPI_MspInit+0x178>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]
 800331a:	4b2f      	ldr	r3, [pc, #188]	; (80033d8 <HAL_SPI_MspInit+0x184>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	4a2e      	ldr	r2, [pc, #184]	; (80033d8 <HAL_SPI_MspInit+0x184>)
 8003320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003324:	6413      	str	r3, [r2, #64]	; 0x40
 8003326:	4b2c      	ldr	r3, [pc, #176]	; (80033d8 <HAL_SPI_MspInit+0x184>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003332:	2300      	movs	r3, #0
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	4b28      	ldr	r3, [pc, #160]	; (80033d8 <HAL_SPI_MspInit+0x184>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	4a27      	ldr	r2, [pc, #156]	; (80033d8 <HAL_SPI_MspInit+0x184>)
 800333c:	f043 0304 	orr.w	r3, r3, #4
 8003340:	6313      	str	r3, [r2, #48]	; 0x30
 8003342:	4b25      	ldr	r3, [pc, #148]	; (80033d8 <HAL_SPI_MspInit+0x184>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	f003 0304 	and.w	r3, r3, #4
 800334a:	613b      	str	r3, [r7, #16]
 800334c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800334e:	2300      	movs	r3, #0
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	4b21      	ldr	r3, [pc, #132]	; (80033d8 <HAL_SPI_MspInit+0x184>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	4a20      	ldr	r2, [pc, #128]	; (80033d8 <HAL_SPI_MspInit+0x184>)
 8003358:	f043 0302 	orr.w	r3, r3, #2
 800335c:	6313      	str	r3, [r2, #48]	; 0x30
 800335e:	4b1e      	ldr	r3, [pc, #120]	; (80033d8 <HAL_SPI_MspInit+0x184>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800336a:	2302      	movs	r3, #2
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336e:	2302      	movs	r3, #2
 8003370:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003372:	2300      	movs	r3, #0
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003376:	2303      	movs	r3, #3
 8003378:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800337a:	2307      	movs	r3, #7
 800337c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800337e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003382:	4619      	mov	r1, r3
 8003384:	4818      	ldr	r0, [pc, #96]	; (80033e8 <HAL_SPI_MspInit+0x194>)
 8003386:	f000 fc6d 	bl	8003c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800338a:	2304      	movs	r3, #4
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800338e:	2302      	movs	r3, #2
 8003390:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003392:	2300      	movs	r3, #0
 8003394:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003396:	2303      	movs	r3, #3
 8003398:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800339a:	2305      	movs	r3, #5
 800339c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800339e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033a2:	4619      	mov	r1, r3
 80033a4:	4810      	ldr	r0, [pc, #64]	; (80033e8 <HAL_SPI_MspInit+0x194>)
 80033a6:	f000 fc5d 	bl	8003c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80033aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b0:	2302      	movs	r3, #2
 80033b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b8:	2303      	movs	r3, #3
 80033ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033bc:	2305      	movs	r3, #5
 80033be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033c4:	4619      	mov	r1, r3
 80033c6:	4806      	ldr	r0, [pc, #24]	; (80033e0 <HAL_SPI_MspInit+0x18c>)
 80033c8:	f000 fc4c 	bl	8003c64 <HAL_GPIO_Init>
}
 80033cc:	bf00      	nop
 80033ce:	3738      	adds	r7, #56	; 0x38
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40013000 	.word	0x40013000
 80033d8:	40023800 	.word	0x40023800
 80033dc:	40020000 	.word	0x40020000
 80033e0:	40020400 	.word	0x40020400
 80033e4:	40003800 	.word	0x40003800
 80033e8:	40020800 	.word	0x40020800

080033ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b094      	sub	sp, #80	; 0x50
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	605a      	str	r2, [r3, #4]
 80033fe:	609a      	str	r2, [r3, #8]
 8003400:	60da      	str	r2, [r3, #12]
 8003402:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4aa4      	ldr	r2, [pc, #656]	; (800369c <HAL_UART_MspInit+0x2b0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d14b      	bne.n	80034a6 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800340e:	2300      	movs	r3, #0
 8003410:	63bb      	str	r3, [r7, #56]	; 0x38
 8003412:	4ba3      	ldr	r3, [pc, #652]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	4aa2      	ldr	r2, [pc, #648]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 8003418:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800341c:	6413      	str	r3, [r2, #64]	; 0x40
 800341e:	4ba0      	ldr	r3, [pc, #640]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003426:	63bb      	str	r3, [r7, #56]	; 0x38
 8003428:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	637b      	str	r3, [r7, #52]	; 0x34
 800342e:	4b9c      	ldr	r3, [pc, #624]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	4a9b      	ldr	r2, [pc, #620]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 8003434:	f043 0304 	orr.w	r3, r3, #4
 8003438:	6313      	str	r3, [r2, #48]	; 0x30
 800343a:	4b99      	ldr	r3, [pc, #612]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	637b      	str	r3, [r7, #52]	; 0x34
 8003444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	633b      	str	r3, [r7, #48]	; 0x30
 800344a:	4b95      	ldr	r3, [pc, #596]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	4a94      	ldr	r2, [pc, #592]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 8003450:	f043 0308 	orr.w	r3, r3, #8
 8003454:	6313      	str	r3, [r2, #48]	; 0x30
 8003456:	4b92      	ldr	r3, [pc, #584]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	633b      	str	r3, [r7, #48]	; 0x30
 8003460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003466:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003468:	2302      	movs	r3, #2
 800346a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346c:	2300      	movs	r3, #0
 800346e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003470:	2303      	movs	r3, #3
 8003472:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003474:	2308      	movs	r3, #8
 8003476:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003478:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800347c:	4619      	mov	r1, r3
 800347e:	4889      	ldr	r0, [pc, #548]	; (80036a4 <HAL_UART_MspInit+0x2b8>)
 8003480:	f000 fbf0 	bl	8003c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003484:	2304      	movs	r3, #4
 8003486:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003488:	2302      	movs	r3, #2
 800348a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348c:	2300      	movs	r3, #0
 800348e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003490:	2303      	movs	r3, #3
 8003492:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003494:	2308      	movs	r3, #8
 8003496:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003498:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800349c:	4619      	mov	r1, r3
 800349e:	4882      	ldr	r0, [pc, #520]	; (80036a8 <HAL_UART_MspInit+0x2bc>)
 80034a0:	f000 fbe0 	bl	8003c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80034a4:	e0f6      	b.n	8003694 <HAL_UART_MspInit+0x2a8>
  else if(huart->Instance==USART1)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a80      	ldr	r2, [pc, #512]	; (80036ac <HAL_UART_MspInit+0x2c0>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d135      	bne.n	800351c <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART1_CLK_ENABLE();
 80034b0:	2300      	movs	r3, #0
 80034b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034b4:	4b7a      	ldr	r3, [pc, #488]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 80034b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b8:	4a79      	ldr	r2, [pc, #484]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 80034ba:	f043 0310 	orr.w	r3, r3, #16
 80034be:	6453      	str	r3, [r2, #68]	; 0x44
 80034c0:	4b77      	ldr	r3, [pc, #476]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 80034c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c4:	f003 0310 	and.w	r3, r3, #16
 80034c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034cc:	2300      	movs	r3, #0
 80034ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80034d0:	4b73      	ldr	r3, [pc, #460]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 80034d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d4:	4a72      	ldr	r2, [pc, #456]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	6313      	str	r3, [r2, #48]	; 0x30
 80034dc:	4b70      	ldr	r3, [pc, #448]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 80034de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80034e8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80034ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ee:	2302      	movs	r3, #2
 80034f0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f6:	2303      	movs	r3, #3
 80034f8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034fa:	2307      	movs	r3, #7
 80034fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003502:	4619      	mov	r1, r3
 8003504:	486a      	ldr	r0, [pc, #424]	; (80036b0 <HAL_UART_MspInit+0x2c4>)
 8003506:	f000 fbad 	bl	8003c64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800350a:	2200      	movs	r2, #0
 800350c:	2100      	movs	r1, #0
 800350e:	2025      	movs	r0, #37	; 0x25
 8003510:	f000 fadb 	bl	8003aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003514:	2025      	movs	r0, #37	; 0x25
 8003516:	f000 faf4 	bl	8003b02 <HAL_NVIC_EnableIRQ>
}
 800351a:	e0bb      	b.n	8003694 <HAL_UART_MspInit+0x2a8>
  else if(huart->Instance==USART2)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a64      	ldr	r2, [pc, #400]	; (80036b4 <HAL_UART_MspInit+0x2c8>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d12c      	bne.n	8003580 <HAL_UART_MspInit+0x194>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003526:	2300      	movs	r3, #0
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
 800352a:	4b5d      	ldr	r3, [pc, #372]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	4a5c      	ldr	r2, [pc, #368]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 8003530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003534:	6413      	str	r3, [r2, #64]	; 0x40
 8003536:	4b5a      	ldr	r3, [pc, #360]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003542:	2300      	movs	r3, #0
 8003544:	623b      	str	r3, [r7, #32]
 8003546:	4b56      	ldr	r3, [pc, #344]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	4a55      	ldr	r2, [pc, #340]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	6313      	str	r3, [r2, #48]	; 0x30
 8003552:	4b53      	ldr	r3, [pc, #332]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	623b      	str	r3, [r7, #32]
 800355c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800355e:	230c      	movs	r3, #12
 8003560:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003562:	2302      	movs	r3, #2
 8003564:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003566:	2300      	movs	r3, #0
 8003568:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800356a:	2303      	movs	r3, #3
 800356c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800356e:	2307      	movs	r3, #7
 8003570:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003572:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003576:	4619      	mov	r1, r3
 8003578:	484d      	ldr	r0, [pc, #308]	; (80036b0 <HAL_UART_MspInit+0x2c4>)
 800357a:	f000 fb73 	bl	8003c64 <HAL_GPIO_Init>
}
 800357e:	e089      	b.n	8003694 <HAL_UART_MspInit+0x2a8>
  else if(huart->Instance==USART3)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a4c      	ldr	r2, [pc, #304]	; (80036b8 <HAL_UART_MspInit+0x2cc>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d14b      	bne.n	8003622 <HAL_UART_MspInit+0x236>
    __HAL_RCC_USART3_CLK_ENABLE();
 800358a:	2300      	movs	r3, #0
 800358c:	61fb      	str	r3, [r7, #28]
 800358e:	4b44      	ldr	r3, [pc, #272]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	4a43      	ldr	r2, [pc, #268]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 8003594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003598:	6413      	str	r3, [r2, #64]	; 0x40
 800359a:	4b41      	ldr	r3, [pc, #260]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035a2:	61fb      	str	r3, [r7, #28]
 80035a4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	61bb      	str	r3, [r7, #24]
 80035aa:	4b3d      	ldr	r3, [pc, #244]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	4a3c      	ldr	r2, [pc, #240]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 80035b0:	f043 0304 	orr.w	r3, r3, #4
 80035b4:	6313      	str	r3, [r2, #48]	; 0x30
 80035b6:	4b3a      	ldr	r3, [pc, #232]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	61bb      	str	r3, [r7, #24]
 80035c0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	617b      	str	r3, [r7, #20]
 80035c6:	4b36      	ldr	r3, [pc, #216]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	4a35      	ldr	r2, [pc, #212]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 80035cc:	f043 0302 	orr.w	r3, r3, #2
 80035d0:	6313      	str	r3, [r2, #48]	; 0x30
 80035d2:	4b33      	ldr	r3, [pc, #204]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80035de:	2320      	movs	r3, #32
 80035e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e2:	2302      	movs	r3, #2
 80035e4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ea:	2303      	movs	r3, #3
 80035ec:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80035ee:	2307      	movs	r3, #7
 80035f0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035f6:	4619      	mov	r1, r3
 80035f8:	482a      	ldr	r0, [pc, #168]	; (80036a4 <HAL_UART_MspInit+0x2b8>)
 80035fa:	f000 fb33 	bl	8003c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80035fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003602:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003604:	2302      	movs	r3, #2
 8003606:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003608:	2300      	movs	r3, #0
 800360a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800360c:	2303      	movs	r3, #3
 800360e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003610:	2307      	movs	r3, #7
 8003612:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003614:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003618:	4619      	mov	r1, r3
 800361a:	4828      	ldr	r0, [pc, #160]	; (80036bc <HAL_UART_MspInit+0x2d0>)
 800361c:	f000 fb22 	bl	8003c64 <HAL_GPIO_Init>
}
 8003620:	e038      	b.n	8003694 <HAL_UART_MspInit+0x2a8>
  else if(huart->Instance==USART6)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a26      	ldr	r2, [pc, #152]	; (80036c0 <HAL_UART_MspInit+0x2d4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d133      	bne.n	8003694 <HAL_UART_MspInit+0x2a8>
    __HAL_RCC_USART6_CLK_ENABLE();
 800362c:	2300      	movs	r3, #0
 800362e:	613b      	str	r3, [r7, #16]
 8003630:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 8003632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003634:	4a1a      	ldr	r2, [pc, #104]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 8003636:	f043 0320 	orr.w	r3, r3, #32
 800363a:	6453      	str	r3, [r2, #68]	; 0x44
 800363c:	4b18      	ldr	r3, [pc, #96]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 800363e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003640:	f003 0320 	and.w	r3, r3, #32
 8003644:	613b      	str	r3, [r7, #16]
 8003646:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	4b14      	ldr	r3, [pc, #80]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	4a13      	ldr	r2, [pc, #76]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 8003652:	f043 0304 	orr.w	r3, r3, #4
 8003656:	6313      	str	r3, [r2, #48]	; 0x30
 8003658:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <HAL_UART_MspInit+0x2b4>)
 800365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003664:	23c0      	movs	r3, #192	; 0xc0
 8003666:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003668:	2302      	movs	r3, #2
 800366a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366c:	2300      	movs	r3, #0
 800366e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003670:	2303      	movs	r3, #3
 8003672:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003674:	2308      	movs	r3, #8
 8003676:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003678:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800367c:	4619      	mov	r1, r3
 800367e:	4809      	ldr	r0, [pc, #36]	; (80036a4 <HAL_UART_MspInit+0x2b8>)
 8003680:	f000 faf0 	bl	8003c64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003684:	2200      	movs	r2, #0
 8003686:	2100      	movs	r1, #0
 8003688:	2047      	movs	r0, #71	; 0x47
 800368a:	f000 fa1e 	bl	8003aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800368e:	2047      	movs	r0, #71	; 0x47
 8003690:	f000 fa37 	bl	8003b02 <HAL_NVIC_EnableIRQ>
}
 8003694:	bf00      	nop
 8003696:	3750      	adds	r7, #80	; 0x50
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40005000 	.word	0x40005000
 80036a0:	40023800 	.word	0x40023800
 80036a4:	40020800 	.word	0x40020800
 80036a8:	40020c00 	.word	0x40020c00
 80036ac:	40011000 	.word	0x40011000
 80036b0:	40020000 	.word	0x40020000
 80036b4:	40004400 	.word	0x40004400
 80036b8:	40004800 	.word	0x40004800
 80036bc:	40020400 	.word	0x40020400
 80036c0:	40011400 	.word	0x40011400

080036c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036c8:	e7fe      	b.n	80036c8 <NMI_Handler+0x4>

080036ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 80036ce:	f000 fa26 	bl	8003b1e <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036d2:	e7fe      	b.n	80036d2 <HardFault_Handler+0x8>

080036d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036d8:	e7fe      	b.n	80036d8 <MemManage_Handler+0x4>

080036da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036da:	b480      	push	{r7}
 80036dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036de:	e7fe      	b.n	80036de <BusFault_Handler+0x4>

080036e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036e4:	e7fe      	b.n	80036e4 <UsageFault_Handler+0x4>

080036e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036e6:	b480      	push	{r7}
 80036e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036ea:	bf00      	nop
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036f8:	bf00      	nop
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003702:	b480      	push	{r7}
 8003704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003706:	bf00      	nop
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003714:	f000 f8a4 	bl	8003860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003718:	bf00      	nop
 800371a:	bd80      	pop	{r7, pc}

0800371c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003720:	4802      	ldr	r0, [pc, #8]	; (800372c <USART1_IRQHandler+0x10>)
 8003722:	f002 ffe3 	bl	80066ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003726:	bf00      	nop
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20000474 	.word	0x20000474

08003730 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003734:	4802      	ldr	r0, [pc, #8]	; (8003740 <USART6_IRQHandler+0x10>)
 8003736:	f002 ffd9 	bl	80066ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800373a:	bf00      	nop
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	200004b8 	.word	0x200004b8

08003744 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003748:	4b06      	ldr	r3, [pc, #24]	; (8003764 <SystemInit+0x20>)
 800374a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374e:	4a05      	ldr	r2, [pc, #20]	; (8003764 <SystemInit+0x20>)
 8003750:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003754:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003758:	bf00      	nop
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	e000ed00 	.word	0xe000ed00

08003768 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003768:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800376c:	480d      	ldr	r0, [pc, #52]	; (80037a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800376e:	490e      	ldr	r1, [pc, #56]	; (80037a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003770:	4a0e      	ldr	r2, [pc, #56]	; (80037ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003774:	e002      	b.n	800377c <LoopCopyDataInit>

08003776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800377a:	3304      	adds	r3, #4

0800377c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800377c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800377e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003780:	d3f9      	bcc.n	8003776 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003782:	4a0b      	ldr	r2, [pc, #44]	; (80037b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003784:	4c0b      	ldr	r4, [pc, #44]	; (80037b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003788:	e001      	b.n	800378e <LoopFillZerobss>

0800378a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800378a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800378c:	3204      	adds	r2, #4

0800378e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800378e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003790:	d3fb      	bcc.n	800378a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003792:	f7ff ffd7 	bl	8003744 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003796:	f003 fe5b 	bl	8007450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800379a:	f7fe f8cf 	bl	800193c <main>
  bx  lr    
 800379e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80037a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037a8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80037ac:	08008788 	.word	0x08008788
  ldr r2, =_sbss
 80037b0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80037b4:	2000059c 	.word	0x2000059c

080037b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037b8:	e7fe      	b.n	80037b8 <ADC_IRQHandler>
	...

080037bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037c0:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <HAL_Init+0x40>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a0d      	ldr	r2, [pc, #52]	; (80037fc <HAL_Init+0x40>)
 80037c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037cc:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <HAL_Init+0x40>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a0a      	ldr	r2, [pc, #40]	; (80037fc <HAL_Init+0x40>)
 80037d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037d8:	4b08      	ldr	r3, [pc, #32]	; (80037fc <HAL_Init+0x40>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a07      	ldr	r2, [pc, #28]	; (80037fc <HAL_Init+0x40>)
 80037de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037e4:	2003      	movs	r0, #3
 80037e6:	f000 f965 	bl	8003ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037ea:	200f      	movs	r0, #15
 80037ec:	f000 f808 	bl	8003800 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037f0:	f7ff fcc0 	bl	8003174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40023c00 	.word	0x40023c00

08003800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003808:	4b12      	ldr	r3, [pc, #72]	; (8003854 <HAL_InitTick+0x54>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	4b12      	ldr	r3, [pc, #72]	; (8003858 <HAL_InitTick+0x58>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	4619      	mov	r1, r3
 8003812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003816:	fbb3 f3f1 	udiv	r3, r3, r1
 800381a:	fbb2 f3f3 	udiv	r3, r2, r3
 800381e:	4618      	mov	r0, r3
 8003820:	f000 f981 	bl	8003b26 <HAL_SYSTICK_Config>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e00e      	b.n	800384c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b0f      	cmp	r3, #15
 8003832:	d80a      	bhi.n	800384a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003834:	2200      	movs	r2, #0
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800383c:	f000 f945 	bl	8003aca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003840:	4a06      	ldr	r2, [pc, #24]	; (800385c <HAL_InitTick+0x5c>)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	e000      	b.n	800384c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
}
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	20000004 	.word	0x20000004
 8003858:	2000000c 	.word	0x2000000c
 800385c:	20000008 	.word	0x20000008

08003860 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003864:	4b06      	ldr	r3, [pc, #24]	; (8003880 <HAL_IncTick+0x20>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	461a      	mov	r2, r3
 800386a:	4b06      	ldr	r3, [pc, #24]	; (8003884 <HAL_IncTick+0x24>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4413      	add	r3, r2
 8003870:	4a04      	ldr	r2, [pc, #16]	; (8003884 <HAL_IncTick+0x24>)
 8003872:	6013      	str	r3, [r2, #0]
}
 8003874:	bf00      	nop
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	2000000c 	.word	0x2000000c
 8003884:	20000598 	.word	0x20000598

08003888 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  return uwTick;
 800388c:	4b03      	ldr	r3, [pc, #12]	; (800389c <HAL_GetTick+0x14>)
 800388e:	681b      	ldr	r3, [r3, #0]
}
 8003890:	4618      	mov	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	20000598 	.word	0x20000598

080038a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038a8:	f7ff ffee 	bl	8003888 <HAL_GetTick>
 80038ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038b8:	d005      	beq.n	80038c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038ba:	4b0a      	ldr	r3, [pc, #40]	; (80038e4 <HAL_Delay+0x44>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	461a      	mov	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4413      	add	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038c6:	bf00      	nop
 80038c8:	f7ff ffde 	bl	8003888 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d8f7      	bhi.n	80038c8 <HAL_Delay+0x28>
  {
  }
}
 80038d8:	bf00      	nop
 80038da:	bf00      	nop
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	2000000c 	.word	0x2000000c

080038e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038f8:	4b0c      	ldr	r3, [pc, #48]	; (800392c <__NVIC_SetPriorityGrouping+0x44>)
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003904:	4013      	ands	r3, r2
 8003906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800391a:	4a04      	ldr	r2, [pc, #16]	; (800392c <__NVIC_SetPriorityGrouping+0x44>)
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	60d3      	str	r3, [r2, #12]
}
 8003920:	bf00      	nop
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	e000ed00 	.word	0xe000ed00

08003930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003934:	4b04      	ldr	r3, [pc, #16]	; (8003948 <__NVIC_GetPriorityGrouping+0x18>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	0a1b      	lsrs	r3, r3, #8
 800393a:	f003 0307 	and.w	r3, r3, #7
}
 800393e:	4618      	mov	r0, r3
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	e000ed00 	.word	0xe000ed00

0800394c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395a:	2b00      	cmp	r3, #0
 800395c:	db0b      	blt.n	8003976 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	f003 021f 	and.w	r2, r3, #31
 8003964:	4907      	ldr	r1, [pc, #28]	; (8003984 <__NVIC_EnableIRQ+0x38>)
 8003966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396a:	095b      	lsrs	r3, r3, #5
 800396c:	2001      	movs	r0, #1
 800396e:	fa00 f202 	lsl.w	r2, r0, r2
 8003972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	e000e100 	.word	0xe000e100

08003988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	6039      	str	r1, [r7, #0]
 8003992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003998:	2b00      	cmp	r3, #0
 800399a:	db0a      	blt.n	80039b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	490c      	ldr	r1, [pc, #48]	; (80039d4 <__NVIC_SetPriority+0x4c>)
 80039a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a6:	0112      	lsls	r2, r2, #4
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	440b      	add	r3, r1
 80039ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039b0:	e00a      	b.n	80039c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	4908      	ldr	r1, [pc, #32]	; (80039d8 <__NVIC_SetPriority+0x50>)
 80039b8:	79fb      	ldrb	r3, [r7, #7]
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	3b04      	subs	r3, #4
 80039c0:	0112      	lsls	r2, r2, #4
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	440b      	add	r3, r1
 80039c6:	761a      	strb	r2, [r3, #24]
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	e000e100 	.word	0xe000e100
 80039d8:	e000ed00 	.word	0xe000ed00

080039dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039dc:	b480      	push	{r7}
 80039de:	b089      	sub	sp, #36	; 0x24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f1c3 0307 	rsb	r3, r3, #7
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	bf28      	it	cs
 80039fa:	2304      	movcs	r3, #4
 80039fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	3304      	adds	r3, #4
 8003a02:	2b06      	cmp	r3, #6
 8003a04:	d902      	bls.n	8003a0c <NVIC_EncodePriority+0x30>
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	3b03      	subs	r3, #3
 8003a0a:	e000      	b.n	8003a0e <NVIC_EncodePriority+0x32>
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	43da      	mvns	r2, r3
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	401a      	ands	r2, r3
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2e:	43d9      	mvns	r1, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a34:	4313      	orrs	r3, r2
         );
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3724      	adds	r7, #36	; 0x24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
	...

08003a44 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003a48:	f3bf 8f4f 	dsb	sy
}
 8003a4c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003a4e:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <__NVIC_SystemReset+0x24>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003a56:	4904      	ldr	r1, [pc, #16]	; (8003a68 <__NVIC_SystemReset+0x24>)
 8003a58:	4b04      	ldr	r3, [pc, #16]	; (8003a6c <__NVIC_SystemReset+0x28>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a5e:	f3bf 8f4f 	dsb	sy
}
 8003a62:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003a64:	bf00      	nop
 8003a66:	e7fd      	b.n	8003a64 <__NVIC_SystemReset+0x20>
 8003a68:	e000ed00 	.word	0xe000ed00
 8003a6c:	05fa0004 	.word	0x05fa0004

08003a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a80:	d301      	bcc.n	8003a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a82:	2301      	movs	r3, #1
 8003a84:	e00f      	b.n	8003aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a86:	4a0a      	ldr	r2, [pc, #40]	; (8003ab0 <SysTick_Config+0x40>)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a8e:	210f      	movs	r1, #15
 8003a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a94:	f7ff ff78 	bl	8003988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a98:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <SysTick_Config+0x40>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a9e:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <SysTick_Config+0x40>)
 8003aa0:	2207      	movs	r2, #7
 8003aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	e000e010 	.word	0xe000e010

08003ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7ff ff13 	bl	80038e8 <__NVIC_SetPriorityGrouping>
}
 8003ac2:	bf00      	nop
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b086      	sub	sp, #24
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003adc:	f7ff ff28 	bl	8003930 <__NVIC_GetPriorityGrouping>
 8003ae0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	68b9      	ldr	r1, [r7, #8]
 8003ae6:	6978      	ldr	r0, [r7, #20]
 8003ae8:	f7ff ff78 	bl	80039dc <NVIC_EncodePriority>
 8003aec:	4602      	mov	r2, r0
 8003aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003af2:	4611      	mov	r1, r2
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff ff47 	bl	8003988 <__NVIC_SetPriority>
}
 8003afa:	bf00      	nop
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b082      	sub	sp, #8
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	4603      	mov	r3, r0
 8003b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff ff1b 	bl	800394c <__NVIC_EnableIRQ>
}
 8003b16:	bf00      	nop
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003b22:	f7ff ff8f 	bl	8003a44 <__NVIC_SystemReset>

08003b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b082      	sub	sp, #8
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7ff ff9e 	bl	8003a70 <SysTick_Config>
 8003b34:	4603      	mov	r3, r0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b084      	sub	sp, #16
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b4c:	f7ff fe9c 	bl	8003888 <HAL_GetTick>
 8003b50:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d008      	beq.n	8003b70 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2280      	movs	r2, #128	; 0x80
 8003b62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e052      	b.n	8003c16 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0216 	bic.w	r2, r2, #22
 8003b7e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695a      	ldr	r2, [r3, #20]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b8e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d103      	bne.n	8003ba0 <HAL_DMA_Abort+0x62>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d007      	beq.n	8003bb0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0208 	bic.w	r2, r2, #8
 8003bae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0201 	bic.w	r2, r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bc0:	e013      	b.n	8003bea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bc2:	f7ff fe61 	bl	8003888 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b05      	cmp	r3, #5
 8003bce:	d90c      	bls.n	8003bea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2203      	movs	r2, #3
 8003bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e015      	b.n	8003c16 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1e4      	bne.n	8003bc2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfc:	223f      	movs	r2, #63	; 0x3f
 8003bfe:	409a      	lsls	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d004      	beq.n	8003c3c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2280      	movs	r2, #128	; 0x80
 8003c36:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e00c      	b.n	8003c56 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2205      	movs	r2, #5
 8003c40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0201 	bic.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
	...

08003c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b089      	sub	sp, #36	; 0x24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61fb      	str	r3, [r7, #28]
 8003c7e:	e165      	b.n	8003f4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c80:	2201      	movs	r2, #1
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	4013      	ands	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	f040 8154 	bne.w	8003f46 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d005      	beq.n	8003cb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d130      	bne.n	8003d18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	2203      	movs	r2, #3
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cec:	2201      	movs	r2, #1
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	091b      	lsrs	r3, r3, #4
 8003d02:	f003 0201 	and.w	r2, r3, #1
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	2b03      	cmp	r3, #3
 8003d22:	d017      	beq.n	8003d54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	2203      	movs	r2, #3
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	43db      	mvns	r3, r3
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d123      	bne.n	8003da8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	08da      	lsrs	r2, r3, #3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3208      	adds	r2, #8
 8003d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	220f      	movs	r2, #15
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	4013      	ands	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	691a      	ldr	r2, [r3, #16]
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	08da      	lsrs	r2, r3, #3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	3208      	adds	r2, #8
 8003da2:	69b9      	ldr	r1, [r7, #24]
 8003da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	2203      	movs	r2, #3
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	43db      	mvns	r3, r3
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 0203 	and.w	r2, r3, #3
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 80ae 	beq.w	8003f46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	4b5d      	ldr	r3, [pc, #372]	; (8003f64 <HAL_GPIO_Init+0x300>)
 8003df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df2:	4a5c      	ldr	r2, [pc, #368]	; (8003f64 <HAL_GPIO_Init+0x300>)
 8003df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003df8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dfa:	4b5a      	ldr	r3, [pc, #360]	; (8003f64 <HAL_GPIO_Init+0x300>)
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e06:	4a58      	ldr	r2, [pc, #352]	; (8003f68 <HAL_GPIO_Init+0x304>)
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	089b      	lsrs	r3, r3, #2
 8003e0c:	3302      	adds	r3, #2
 8003e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	220f      	movs	r2, #15
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	43db      	mvns	r3, r3
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	4013      	ands	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a4f      	ldr	r2, [pc, #316]	; (8003f6c <HAL_GPIO_Init+0x308>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d025      	beq.n	8003e7e <HAL_GPIO_Init+0x21a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a4e      	ldr	r2, [pc, #312]	; (8003f70 <HAL_GPIO_Init+0x30c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d01f      	beq.n	8003e7a <HAL_GPIO_Init+0x216>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a4d      	ldr	r2, [pc, #308]	; (8003f74 <HAL_GPIO_Init+0x310>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d019      	beq.n	8003e76 <HAL_GPIO_Init+0x212>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a4c      	ldr	r2, [pc, #304]	; (8003f78 <HAL_GPIO_Init+0x314>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d013      	beq.n	8003e72 <HAL_GPIO_Init+0x20e>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a4b      	ldr	r2, [pc, #300]	; (8003f7c <HAL_GPIO_Init+0x318>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d00d      	beq.n	8003e6e <HAL_GPIO_Init+0x20a>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a4a      	ldr	r2, [pc, #296]	; (8003f80 <HAL_GPIO_Init+0x31c>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d007      	beq.n	8003e6a <HAL_GPIO_Init+0x206>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a49      	ldr	r2, [pc, #292]	; (8003f84 <HAL_GPIO_Init+0x320>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d101      	bne.n	8003e66 <HAL_GPIO_Init+0x202>
 8003e62:	2306      	movs	r3, #6
 8003e64:	e00c      	b.n	8003e80 <HAL_GPIO_Init+0x21c>
 8003e66:	2307      	movs	r3, #7
 8003e68:	e00a      	b.n	8003e80 <HAL_GPIO_Init+0x21c>
 8003e6a:	2305      	movs	r3, #5
 8003e6c:	e008      	b.n	8003e80 <HAL_GPIO_Init+0x21c>
 8003e6e:	2304      	movs	r3, #4
 8003e70:	e006      	b.n	8003e80 <HAL_GPIO_Init+0x21c>
 8003e72:	2303      	movs	r3, #3
 8003e74:	e004      	b.n	8003e80 <HAL_GPIO_Init+0x21c>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e002      	b.n	8003e80 <HAL_GPIO_Init+0x21c>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <HAL_GPIO_Init+0x21c>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	69fa      	ldr	r2, [r7, #28]
 8003e82:	f002 0203 	and.w	r2, r2, #3
 8003e86:	0092      	lsls	r2, r2, #2
 8003e88:	4093      	lsls	r3, r2
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e90:	4935      	ldr	r1, [pc, #212]	; (8003f68 <HAL_GPIO_Init+0x304>)
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	089b      	lsrs	r3, r3, #2
 8003e96:	3302      	adds	r3, #2
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e9e:	4b3a      	ldr	r3, [pc, #232]	; (8003f88 <HAL_GPIO_Init+0x324>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ec2:	4a31      	ldr	r2, [pc, #196]	; (8003f88 <HAL_GPIO_Init+0x324>)
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ec8:	4b2f      	ldr	r3, [pc, #188]	; (8003f88 <HAL_GPIO_Init+0x324>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003eec:	4a26      	ldr	r2, [pc, #152]	; (8003f88 <HAL_GPIO_Init+0x324>)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ef2:	4b25      	ldr	r3, [pc, #148]	; (8003f88 <HAL_GPIO_Init+0x324>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	43db      	mvns	r3, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4013      	ands	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f16:	4a1c      	ldr	r2, [pc, #112]	; (8003f88 <HAL_GPIO_Init+0x324>)
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f1c:	4b1a      	ldr	r3, [pc, #104]	; (8003f88 <HAL_GPIO_Init+0x324>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	43db      	mvns	r3, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f40:	4a11      	ldr	r2, [pc, #68]	; (8003f88 <HAL_GPIO_Init+0x324>)
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	61fb      	str	r3, [r7, #28]
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	2b0f      	cmp	r3, #15
 8003f50:	f67f ae96 	bls.w	8003c80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f54:	bf00      	nop
 8003f56:	bf00      	nop
 8003f58:	3724      	adds	r7, #36	; 0x24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40023800 	.word	0x40023800
 8003f68:	40013800 	.word	0x40013800
 8003f6c:	40020000 	.word	0x40020000
 8003f70:	40020400 	.word	0x40020400
 8003f74:	40020800 	.word	0x40020800
 8003f78:	40020c00 	.word	0x40020c00
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	40021400 	.word	0x40021400
 8003f84:	40021800 	.word	0x40021800
 8003f88:	40013c00 	.word	0x40013c00

08003f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	460b      	mov	r3, r1
 8003f96:	807b      	strh	r3, [r7, #2]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f9c:	787b      	ldrb	r3, [r7, #1]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fa2:	887a      	ldrh	r2, [r7, #2]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fa8:	e003      	b.n	8003fb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003faa:	887b      	ldrh	r3, [r7, #2]
 8003fac:	041a      	lsls	r2, r3, #16
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	619a      	str	r2, [r3, #24]
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
	...

08003fc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e12b      	b.n	800422a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d106      	bne.n	8003fec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7ff f8ec 	bl	80031c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2224      	movs	r2, #36	; 0x24
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0201 	bic.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004012:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004022:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004024:	f001 f854 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 8004028:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	4a81      	ldr	r2, [pc, #516]	; (8004234 <HAL_I2C_Init+0x274>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d807      	bhi.n	8004044 <HAL_I2C_Init+0x84>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4a80      	ldr	r2, [pc, #512]	; (8004238 <HAL_I2C_Init+0x278>)
 8004038:	4293      	cmp	r3, r2
 800403a:	bf94      	ite	ls
 800403c:	2301      	movls	r3, #1
 800403e:	2300      	movhi	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	e006      	b.n	8004052 <HAL_I2C_Init+0x92>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4a7d      	ldr	r2, [pc, #500]	; (800423c <HAL_I2C_Init+0x27c>)
 8004048:	4293      	cmp	r3, r2
 800404a:	bf94      	ite	ls
 800404c:	2301      	movls	r3, #1
 800404e:	2300      	movhi	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e0e7      	b.n	800422a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	4a78      	ldr	r2, [pc, #480]	; (8004240 <HAL_I2C_Init+0x280>)
 800405e:	fba2 2303 	umull	r2, r3, r2, r3
 8004062:	0c9b      	lsrs	r3, r3, #18
 8004064:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	430a      	orrs	r2, r1
 8004078:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	4a6a      	ldr	r2, [pc, #424]	; (8004234 <HAL_I2C_Init+0x274>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d802      	bhi.n	8004094 <HAL_I2C_Init+0xd4>
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	3301      	adds	r3, #1
 8004092:	e009      	b.n	80040a8 <HAL_I2C_Init+0xe8>
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800409a:	fb02 f303 	mul.w	r3, r2, r3
 800409e:	4a69      	ldr	r2, [pc, #420]	; (8004244 <HAL_I2C_Init+0x284>)
 80040a0:	fba2 2303 	umull	r2, r3, r2, r3
 80040a4:	099b      	lsrs	r3, r3, #6
 80040a6:	3301      	adds	r3, #1
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6812      	ldr	r2, [r2, #0]
 80040ac:	430b      	orrs	r3, r1
 80040ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80040ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	495c      	ldr	r1, [pc, #368]	; (8004234 <HAL_I2C_Init+0x274>)
 80040c4:	428b      	cmp	r3, r1
 80040c6:	d819      	bhi.n	80040fc <HAL_I2C_Init+0x13c>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	1e59      	subs	r1, r3, #1
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80040d6:	1c59      	adds	r1, r3, #1
 80040d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80040dc:	400b      	ands	r3, r1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <HAL_I2C_Init+0x138>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	1e59      	subs	r1, r3, #1
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80040f0:	3301      	adds	r3, #1
 80040f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040f6:	e051      	b.n	800419c <HAL_I2C_Init+0x1dc>
 80040f8:	2304      	movs	r3, #4
 80040fa:	e04f      	b.n	800419c <HAL_I2C_Init+0x1dc>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d111      	bne.n	8004128 <HAL_I2C_Init+0x168>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	1e58      	subs	r0, r3, #1
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6859      	ldr	r1, [r3, #4]
 800410c:	460b      	mov	r3, r1
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	440b      	add	r3, r1
 8004112:	fbb0 f3f3 	udiv	r3, r0, r3
 8004116:	3301      	adds	r3, #1
 8004118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800411c:	2b00      	cmp	r3, #0
 800411e:	bf0c      	ite	eq
 8004120:	2301      	moveq	r3, #1
 8004122:	2300      	movne	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	e012      	b.n	800414e <HAL_I2C_Init+0x18e>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	1e58      	subs	r0, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6859      	ldr	r1, [r3, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	0099      	lsls	r1, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	fbb0 f3f3 	udiv	r3, r0, r3
 800413e:	3301      	adds	r3, #1
 8004140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004144:	2b00      	cmp	r3, #0
 8004146:	bf0c      	ite	eq
 8004148:	2301      	moveq	r3, #1
 800414a:	2300      	movne	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <HAL_I2C_Init+0x196>
 8004152:	2301      	movs	r3, #1
 8004154:	e022      	b.n	800419c <HAL_I2C_Init+0x1dc>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10e      	bne.n	800417c <HAL_I2C_Init+0x1bc>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	1e58      	subs	r0, r3, #1
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6859      	ldr	r1, [r3, #4]
 8004166:	460b      	mov	r3, r1
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	440b      	add	r3, r1
 800416c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004170:	3301      	adds	r3, #1
 8004172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800417a:	e00f      	b.n	800419c <HAL_I2C_Init+0x1dc>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	1e58      	subs	r0, r3, #1
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6859      	ldr	r1, [r3, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	0099      	lsls	r1, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004192:	3301      	adds	r3, #1
 8004194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800419c:	6879      	ldr	r1, [r7, #4]
 800419e:	6809      	ldr	r1, [r1, #0]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69da      	ldr	r2, [r3, #28]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80041ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6911      	ldr	r1, [r2, #16]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	68d2      	ldr	r2, [r2, #12]
 80041d6:	4311      	orrs	r1, r2
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	6812      	ldr	r2, [r2, #0]
 80041dc:	430b      	orrs	r3, r1
 80041de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	695a      	ldr	r2, [r3, #20]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0201 	orr.w	r2, r2, #1
 800420a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2220      	movs	r2, #32
 8004216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	000186a0 	.word	0x000186a0
 8004238:	001e847f 	.word	0x001e847f
 800423c:	003d08ff 	.word	0x003d08ff
 8004240:	431bde83 	.word	0x431bde83
 8004244:	10624dd3 	.word	0x10624dd3

08004248 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b088      	sub	sp, #32
 800424c:	af02      	add	r7, sp, #8
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	607a      	str	r2, [r7, #4]
 8004252:	461a      	mov	r2, r3
 8004254:	460b      	mov	r3, r1
 8004256:	817b      	strh	r3, [r7, #10]
 8004258:	4613      	mov	r3, r2
 800425a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800425c:	f7ff fb14 	bl	8003888 <HAL_GetTick>
 8004260:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b20      	cmp	r3, #32
 800426c:	f040 80e0 	bne.w	8004430 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	2319      	movs	r3, #25
 8004276:	2201      	movs	r2, #1
 8004278:	4970      	ldr	r1, [pc, #448]	; (800443c <HAL_I2C_Master_Transmit+0x1f4>)
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 fc58 	bl	8004b30 <I2C_WaitOnFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004286:	2302      	movs	r3, #2
 8004288:	e0d3      	b.n	8004432 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004290:	2b01      	cmp	r3, #1
 8004292:	d101      	bne.n	8004298 <HAL_I2C_Master_Transmit+0x50>
 8004294:	2302      	movs	r3, #2
 8004296:	e0cc      	b.n	8004432 <HAL_I2C_Master_Transmit+0x1ea>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d007      	beq.n	80042be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 0201 	orr.w	r2, r2, #1
 80042bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2221      	movs	r2, #33	; 0x21
 80042d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2210      	movs	r2, #16
 80042da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	893a      	ldrh	r2, [r7, #8]
 80042ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4a50      	ldr	r2, [pc, #320]	; (8004440 <HAL_I2C_Master_Transmit+0x1f8>)
 80042fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004300:	8979      	ldrh	r1, [r7, #10]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	6a3a      	ldr	r2, [r7, #32]
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 fac2 	bl	8004890 <I2C_MasterRequestWrite>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e08d      	b.n	8004432 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004316:	2300      	movs	r3, #0
 8004318:	613b      	str	r3, [r7, #16]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	613b      	str	r3, [r7, #16]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	613b      	str	r3, [r7, #16]
 800432a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800432c:	e066      	b.n	80043fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	6a39      	ldr	r1, [r7, #32]
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 fcd2 	bl	8004cdc <I2C_WaitOnTXEFlagUntilTimeout>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00d      	beq.n	800435a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	2b04      	cmp	r3, #4
 8004344:	d107      	bne.n	8004356 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004354:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e06b      	b.n	8004432 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	781a      	ldrb	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004374:	b29b      	uxth	r3, r3
 8004376:	3b01      	subs	r3, #1
 8004378:	b29a      	uxth	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004382:	3b01      	subs	r3, #1
 8004384:	b29a      	uxth	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b04      	cmp	r3, #4
 8004396:	d11b      	bne.n	80043d0 <HAL_I2C_Master_Transmit+0x188>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439c:	2b00      	cmp	r3, #0
 800439e:	d017      	beq.n	80043d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	781a      	ldrb	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	1c5a      	adds	r2, r3, #1
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	3b01      	subs	r3, #1
 80043be:	b29a      	uxth	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	6a39      	ldr	r1, [r7, #32]
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 fcc2 	bl	8004d5e <I2C_WaitOnBTFFlagUntilTimeout>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00d      	beq.n	80043fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d107      	bne.n	80043f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e01a      	b.n	8004432 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004400:	2b00      	cmp	r3, #0
 8004402:	d194      	bne.n	800432e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2220      	movs	r2, #32
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800442c:	2300      	movs	r3, #0
 800442e:	e000      	b.n	8004432 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004430:	2302      	movs	r3, #2
  }
}
 8004432:	4618      	mov	r0, r3
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	00100002 	.word	0x00100002
 8004440:	ffff0000 	.word	0xffff0000

08004444 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b08c      	sub	sp, #48	; 0x30
 8004448:	af02      	add	r7, sp, #8
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	607a      	str	r2, [r7, #4]
 800444e:	461a      	mov	r2, r3
 8004450:	460b      	mov	r3, r1
 8004452:	817b      	strh	r3, [r7, #10]
 8004454:	4613      	mov	r3, r2
 8004456:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004458:	f7ff fa16 	bl	8003888 <HAL_GetTick>
 800445c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b20      	cmp	r3, #32
 8004468:	f040 820b 	bne.w	8004882 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	2319      	movs	r3, #25
 8004472:	2201      	movs	r2, #1
 8004474:	497c      	ldr	r1, [pc, #496]	; (8004668 <HAL_I2C_Master_Receive+0x224>)
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 fb5a 	bl	8004b30 <I2C_WaitOnFlagUntilTimeout>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004482:	2302      	movs	r3, #2
 8004484:	e1fe      	b.n	8004884 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800448c:	2b01      	cmp	r3, #1
 800448e:	d101      	bne.n	8004494 <HAL_I2C_Master_Receive+0x50>
 8004490:	2302      	movs	r3, #2
 8004492:	e1f7      	b.n	8004884 <HAL_I2C_Master_Receive+0x440>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d007      	beq.n	80044ba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f042 0201 	orr.w	r2, r2, #1
 80044b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2222      	movs	r2, #34	; 0x22
 80044ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2210      	movs	r2, #16
 80044d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	893a      	ldrh	r2, [r7, #8]
 80044ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4a5c      	ldr	r2, [pc, #368]	; (800466c <HAL_I2C_Master_Receive+0x228>)
 80044fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80044fc:	8979      	ldrh	r1, [r7, #10]
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 fa46 	bl	8004994 <I2C_MasterRequestRead>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e1b8      	b.n	8004884 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004516:	2b00      	cmp	r3, #0
 8004518:	d113      	bne.n	8004542 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800451a:	2300      	movs	r3, #0
 800451c:	623b      	str	r3, [r7, #32]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	623b      	str	r3, [r7, #32]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	623b      	str	r3, [r7, #32]
 800452e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	e18c      	b.n	800485c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004546:	2b01      	cmp	r3, #1
 8004548:	d11b      	bne.n	8004582 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004558:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800455a:	2300      	movs	r3, #0
 800455c:	61fb      	str	r3, [r7, #28]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	61fb      	str	r3, [r7, #28]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	61fb      	str	r3, [r7, #28]
 800456e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	e16c      	b.n	800485c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004586:	2b02      	cmp	r3, #2
 8004588:	d11b      	bne.n	80045c2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004598:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045aa:	2300      	movs	r3, #0
 80045ac:	61bb      	str	r3, [r7, #24]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	61bb      	str	r3, [r7, #24]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	61bb      	str	r3, [r7, #24]
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	e14c      	b.n	800485c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045d2:	2300      	movs	r3, #0
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	617b      	str	r3, [r7, #20]
 80045e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80045e8:	e138      	b.n	800485c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	f200 80f1 	bhi.w	80047d6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d123      	bne.n	8004644 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 fbed 	bl	8004de0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e139      	b.n	8004884 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691a      	ldr	r2, [r3, #16]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800462c:	3b01      	subs	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004638:	b29b      	uxth	r3, r3
 800463a:	3b01      	subs	r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004642:	e10b      	b.n	800485c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004648:	2b02      	cmp	r3, #2
 800464a:	d14e      	bne.n	80046ea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004652:	2200      	movs	r2, #0
 8004654:	4906      	ldr	r1, [pc, #24]	; (8004670 <HAL_I2C_Master_Receive+0x22c>)
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 fa6a 	bl	8004b30 <I2C_WaitOnFlagUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d008      	beq.n	8004674 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e10e      	b.n	8004884 <HAL_I2C_Master_Receive+0x440>
 8004666:	bf00      	nop
 8004668:	00100002 	.word	0x00100002
 800466c:	ffff0000 	.word	0xffff0000
 8004670:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004682:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691a      	ldr	r2, [r3, #16]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	3b01      	subs	r3, #1
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046de:	b29b      	uxth	r3, r3
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046e8:	e0b8      	b.n	800485c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f0:	2200      	movs	r2, #0
 80046f2:	4966      	ldr	r1, [pc, #408]	; (800488c <HAL_I2C_Master_Receive+0x448>)
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 fa1b 	bl	8004b30 <I2C_WaitOnFlagUntilTimeout>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e0bf      	b.n	8004884 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004712:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	691a      	ldr	r2, [r3, #16]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	b2d2      	uxtb	r2, r2
 8004720:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004730:	3b01      	subs	r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473c:	b29b      	uxth	r3, r3
 800473e:	3b01      	subs	r3, #1
 8004740:	b29a      	uxth	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474c:	2200      	movs	r2, #0
 800474e:	494f      	ldr	r1, [pc, #316]	; (800488c <HAL_I2C_Master_Receive+0x448>)
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 f9ed 	bl	8004b30 <I2C_WaitOnFlagUntilTimeout>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e091      	b.n	8004884 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800476e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691a      	ldr	r2, [r3, #16]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	b2d2      	uxtb	r2, r2
 800477c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478c:	3b01      	subs	r3, #1
 800478e:	b29a      	uxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004798:	b29b      	uxth	r3, r3
 800479a:	3b01      	subs	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	b2d2      	uxtb	r2, r2
 80047ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	1c5a      	adds	r2, r3, #1
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047be:	3b01      	subs	r3, #1
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047d4:	e042      	b.n	800485c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f000 fb00 	bl	8004de0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e04c      	b.n	8004884 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	691a      	ldr	r2, [r3, #16]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	b2d2      	uxtb	r2, r2
 80047f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004806:	3b01      	subs	r3, #1
 8004808:	b29a      	uxth	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004812:	b29b      	uxth	r3, r3
 8004814:	3b01      	subs	r3, #1
 8004816:	b29a      	uxth	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	f003 0304 	and.w	r3, r3, #4
 8004826:	2b04      	cmp	r3, #4
 8004828:	d118      	bne.n	800485c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	691a      	ldr	r2, [r3, #16]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004846:	3b01      	subs	r3, #1
 8004848:	b29a      	uxth	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004852:	b29b      	uxth	r3, r3
 8004854:	3b01      	subs	r3, #1
 8004856:	b29a      	uxth	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004860:	2b00      	cmp	r3, #0
 8004862:	f47f aec2 	bne.w	80045ea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2220      	movs	r2, #32
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	e000      	b.n	8004884 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004882:	2302      	movs	r3, #2
  }
}
 8004884:	4618      	mov	r0, r3
 8004886:	3728      	adds	r7, #40	; 0x28
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	00010004 	.word	0x00010004

08004890 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b088      	sub	sp, #32
 8004894:	af02      	add	r7, sp, #8
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	607a      	str	r2, [r7, #4]
 800489a:	603b      	str	r3, [r7, #0]
 800489c:	460b      	mov	r3, r1
 800489e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d006      	beq.n	80048ba <I2C_MasterRequestWrite+0x2a>
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d003      	beq.n	80048ba <I2C_MasterRequestWrite+0x2a>
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048b8:	d108      	bne.n	80048cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	e00b      	b.n	80048e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d0:	2b12      	cmp	r3, #18
 80048d2:	d107      	bne.n	80048e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 f91d 	bl	8004b30 <I2C_WaitOnFlagUntilTimeout>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00d      	beq.n	8004918 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800490a:	d103      	bne.n	8004914 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004912:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e035      	b.n	8004984 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004920:	d108      	bne.n	8004934 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004922:	897b      	ldrh	r3, [r7, #10]
 8004924:	b2db      	uxtb	r3, r3
 8004926:	461a      	mov	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004930:	611a      	str	r2, [r3, #16]
 8004932:	e01b      	b.n	800496c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004934:	897b      	ldrh	r3, [r7, #10]
 8004936:	11db      	asrs	r3, r3, #7
 8004938:	b2db      	uxtb	r3, r3
 800493a:	f003 0306 	and.w	r3, r3, #6
 800493e:	b2db      	uxtb	r3, r3
 8004940:	f063 030f 	orn	r3, r3, #15
 8004944:	b2da      	uxtb	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	490e      	ldr	r1, [pc, #56]	; (800498c <I2C_MasterRequestWrite+0xfc>)
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f000 f943 	bl	8004bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e010      	b.n	8004984 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004962:	897b      	ldrh	r3, [r7, #10]
 8004964:	b2da      	uxtb	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	4907      	ldr	r1, [pc, #28]	; (8004990 <I2C_MasterRequestWrite+0x100>)
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 f933 	bl	8004bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e000      	b.n	8004984 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3718      	adds	r7, #24
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	00010008 	.word	0x00010008
 8004990:	00010002 	.word	0x00010002

08004994 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b088      	sub	sp, #32
 8004998:	af02      	add	r7, sp, #8
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	607a      	str	r2, [r7, #4]
 800499e:	603b      	str	r3, [r7, #0]
 80049a0:	460b      	mov	r3, r1
 80049a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049b8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2b08      	cmp	r3, #8
 80049be:	d006      	beq.n	80049ce <I2C_MasterRequestRead+0x3a>
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d003      	beq.n	80049ce <I2C_MasterRequestRead+0x3a>
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049cc:	d108      	bne.n	80049e0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	e00b      	b.n	80049f8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e4:	2b11      	cmp	r3, #17
 80049e6:	d107      	bne.n	80049f8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 f893 	bl	8004b30 <I2C_WaitOnFlagUntilTimeout>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00d      	beq.n	8004a2c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a1e:	d103      	bne.n	8004a28 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e079      	b.n	8004b20 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a34:	d108      	bne.n	8004a48 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a36:	897b      	ldrh	r3, [r7, #10]
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	f043 0301 	orr.w	r3, r3, #1
 8004a3e:	b2da      	uxtb	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	611a      	str	r2, [r3, #16]
 8004a46:	e05f      	b.n	8004b08 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a48:	897b      	ldrh	r3, [r7, #10]
 8004a4a:	11db      	asrs	r3, r3, #7
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	f003 0306 	and.w	r3, r3, #6
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	f063 030f 	orn	r3, r3, #15
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	4930      	ldr	r1, [pc, #192]	; (8004b28 <I2C_MasterRequestRead+0x194>)
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f000 f8b9 	bl	8004bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e054      	b.n	8004b20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a76:	897b      	ldrh	r3, [r7, #10]
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	4929      	ldr	r1, [pc, #164]	; (8004b2c <I2C_MasterRequestRead+0x198>)
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 f8a9 	bl	8004bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e044      	b.n	8004b20 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a96:	2300      	movs	r3, #0
 8004a98:	613b      	str	r3, [r7, #16]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	613b      	str	r3, [r7, #16]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	613b      	str	r3, [r7, #16]
 8004aaa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 f831 	bl	8004b30 <I2C_WaitOnFlagUntilTimeout>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00d      	beq.n	8004af0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ae2:	d103      	bne.n	8004aec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aea:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e017      	b.n	8004b20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004af0:	897b      	ldrh	r3, [r7, #10]
 8004af2:	11db      	asrs	r3, r3, #7
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	f003 0306 	and.w	r3, r3, #6
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	f063 030e 	orn	r3, r3, #14
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	4907      	ldr	r1, [pc, #28]	; (8004b2c <I2C_MasterRequestRead+0x198>)
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 f865 	bl	8004bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e000      	b.n	8004b20 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	00010008 	.word	0x00010008
 8004b2c:	00010002 	.word	0x00010002

08004b30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	603b      	str	r3, [r7, #0]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b40:	e025      	b.n	8004b8e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b48:	d021      	beq.n	8004b8e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b4a:	f7fe fe9d 	bl	8003888 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d302      	bcc.n	8004b60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d116      	bne.n	8004b8e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	f043 0220 	orr.w	r2, r3, #32
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e023      	b.n	8004bd6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	0c1b      	lsrs	r3, r3, #16
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d10d      	bne.n	8004bb4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	43da      	mvns	r2, r3
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	bf0c      	ite	eq
 8004baa:	2301      	moveq	r3, #1
 8004bac:	2300      	movne	r3, #0
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	e00c      	b.n	8004bce <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	43da      	mvns	r2, r3
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	bf0c      	ite	eq
 8004bc6:	2301      	moveq	r3, #1
 8004bc8:	2300      	movne	r3, #0
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	461a      	mov	r2, r3
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d0b6      	beq.n	8004b42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b084      	sub	sp, #16
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	60f8      	str	r0, [r7, #12]
 8004be6:	60b9      	str	r1, [r7, #8]
 8004be8:	607a      	str	r2, [r7, #4]
 8004bea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bec:	e051      	b.n	8004c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bfc:	d123      	bne.n	8004c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c0c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c16:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	f043 0204 	orr.w	r2, r3, #4
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e046      	b.n	8004cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c4c:	d021      	beq.n	8004c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c4e:	f7fe fe1b 	bl	8003888 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d302      	bcc.n	8004c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d116      	bne.n	8004c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	f043 0220 	orr.w	r2, r3, #32
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e020      	b.n	8004cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	0c1b      	lsrs	r3, r3, #16
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d10c      	bne.n	8004cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	43da      	mvns	r2, r3
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	bf14      	ite	ne
 8004cae:	2301      	movne	r3, #1
 8004cb0:	2300      	moveq	r3, #0
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	e00b      	b.n	8004cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	43da      	mvns	r2, r3
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	bf14      	ite	ne
 8004cc8:	2301      	movne	r3, #1
 8004cca:	2300      	moveq	r3, #0
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d18d      	bne.n	8004bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ce8:	e02d      	b.n	8004d46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f000 f8ce 	bl	8004e8c <I2C_IsAcknowledgeFailed>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e02d      	b.n	8004d56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d00:	d021      	beq.n	8004d46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d02:	f7fe fdc1 	bl	8003888 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d302      	bcc.n	8004d18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d116      	bne.n	8004d46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2220      	movs	r2, #32
 8004d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	f043 0220 	orr.w	r2, r3, #32
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e007      	b.n	8004d56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d50:	2b80      	cmp	r3, #128	; 0x80
 8004d52:	d1ca      	bne.n	8004cea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b084      	sub	sp, #16
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	60f8      	str	r0, [r7, #12]
 8004d66:	60b9      	str	r1, [r7, #8]
 8004d68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d6a:	e02d      	b.n	8004dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f000 f88d 	bl	8004e8c <I2C_IsAcknowledgeFailed>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e02d      	b.n	8004dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d82:	d021      	beq.n	8004dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d84:	f7fe fd80 	bl	8003888 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d302      	bcc.n	8004d9a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d116      	bne.n	8004dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db4:	f043 0220 	orr.w	r2, r3, #32
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e007      	b.n	8004dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	f003 0304 	and.w	r3, r3, #4
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	d1ca      	bne.n	8004d6c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004dec:	e042      	b.n	8004e74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	f003 0310 	and.w	r3, r3, #16
 8004df8:	2b10      	cmp	r3, #16
 8004dfa:	d119      	bne.n	8004e30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f06f 0210 	mvn.w	r2, #16
 8004e04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e029      	b.n	8004e84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e30:	f7fe fd2a 	bl	8003888 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d302      	bcc.n	8004e46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d116      	bne.n	8004e74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e60:	f043 0220 	orr.w	r2, r3, #32
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e007      	b.n	8004e84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7e:	2b40      	cmp	r3, #64	; 0x40
 8004e80:	d1b5      	bne.n	8004dee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea2:	d11b      	bne.n	8004edc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004eac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec8:	f043 0204 	orr.w	r2, r3, #4
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e000      	b.n	8004ede <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
	...

08004eec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d101      	bne.n	8004f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e0cc      	b.n	800509a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f00:	4b68      	ldr	r3, [pc, #416]	; (80050a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 030f 	and.w	r3, r3, #15
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d90c      	bls.n	8004f28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f0e:	4b65      	ldr	r3, [pc, #404]	; (80050a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	b2d2      	uxtb	r2, r2
 8004f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f16:	4b63      	ldr	r3, [pc, #396]	; (80050a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d001      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e0b8      	b.n	800509a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d020      	beq.n	8004f76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d005      	beq.n	8004f4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f40:	4b59      	ldr	r3, [pc, #356]	; (80050a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	4a58      	ldr	r2, [pc, #352]	; (80050a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0308 	and.w	r3, r3, #8
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d005      	beq.n	8004f64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f58:	4b53      	ldr	r3, [pc, #332]	; (80050a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	4a52      	ldr	r2, [pc, #328]	; (80050a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f64:	4b50      	ldr	r3, [pc, #320]	; (80050a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	494d      	ldr	r1, [pc, #308]	; (80050a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d044      	beq.n	800500c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d107      	bne.n	8004f9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f8a:	4b47      	ldr	r3, [pc, #284]	; (80050a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d119      	bne.n	8004fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e07f      	b.n	800509a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d003      	beq.n	8004faa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fa6:	2b03      	cmp	r3, #3
 8004fa8:	d107      	bne.n	8004fba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004faa:	4b3f      	ldr	r3, [pc, #252]	; (80050a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d109      	bne.n	8004fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e06f      	b.n	800509a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fba:	4b3b      	ldr	r3, [pc, #236]	; (80050a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e067      	b.n	800509a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fca:	4b37      	ldr	r3, [pc, #220]	; (80050a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f023 0203 	bic.w	r2, r3, #3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	4934      	ldr	r1, [pc, #208]	; (80050a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fdc:	f7fe fc54 	bl	8003888 <HAL_GetTick>
 8004fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fe2:	e00a      	b.n	8004ffa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fe4:	f7fe fc50 	bl	8003888 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e04f      	b.n	800509a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ffa:	4b2b      	ldr	r3, [pc, #172]	; (80050a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f003 020c 	and.w	r2, r3, #12
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	429a      	cmp	r2, r3
 800500a:	d1eb      	bne.n	8004fe4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800500c:	4b25      	ldr	r3, [pc, #148]	; (80050a4 <HAL_RCC_ClockConfig+0x1b8>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 030f 	and.w	r3, r3, #15
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	d20c      	bcs.n	8005034 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800501a:	4b22      	ldr	r3, [pc, #136]	; (80050a4 <HAL_RCC_ClockConfig+0x1b8>)
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005022:	4b20      	ldr	r3, [pc, #128]	; (80050a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 030f 	and.w	r3, r3, #15
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	429a      	cmp	r2, r3
 800502e:	d001      	beq.n	8005034 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e032      	b.n	800509a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0304 	and.w	r3, r3, #4
 800503c:	2b00      	cmp	r3, #0
 800503e:	d008      	beq.n	8005052 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005040:	4b19      	ldr	r3, [pc, #100]	; (80050a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	4916      	ldr	r1, [pc, #88]	; (80050a8 <HAL_RCC_ClockConfig+0x1bc>)
 800504e:	4313      	orrs	r3, r2
 8005050:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0308 	and.w	r3, r3, #8
 800505a:	2b00      	cmp	r3, #0
 800505c:	d009      	beq.n	8005072 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800505e:	4b12      	ldr	r3, [pc, #72]	; (80050a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	490e      	ldr	r1, [pc, #56]	; (80050a8 <HAL_RCC_ClockConfig+0x1bc>)
 800506e:	4313      	orrs	r3, r2
 8005070:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005072:	f000 f855 	bl	8005120 <HAL_RCC_GetSysClockFreq>
 8005076:	4602      	mov	r2, r0
 8005078:	4b0b      	ldr	r3, [pc, #44]	; (80050a8 <HAL_RCC_ClockConfig+0x1bc>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	091b      	lsrs	r3, r3, #4
 800507e:	f003 030f 	and.w	r3, r3, #15
 8005082:	490a      	ldr	r1, [pc, #40]	; (80050ac <HAL_RCC_ClockConfig+0x1c0>)
 8005084:	5ccb      	ldrb	r3, [r1, r3]
 8005086:	fa22 f303 	lsr.w	r3, r2, r3
 800508a:	4a09      	ldr	r2, [pc, #36]	; (80050b0 <HAL_RCC_ClockConfig+0x1c4>)
 800508c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800508e:	4b09      	ldr	r3, [pc, #36]	; (80050b4 <HAL_RCC_ClockConfig+0x1c8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4618      	mov	r0, r3
 8005094:	f7fe fbb4 	bl	8003800 <HAL_InitTick>

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	40023c00 	.word	0x40023c00
 80050a8:	40023800 	.word	0x40023800
 80050ac:	080086f8 	.word	0x080086f8
 80050b0:	20000004 	.word	0x20000004
 80050b4:	20000008 	.word	0x20000008

080050b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050bc:	4b03      	ldr	r3, [pc, #12]	; (80050cc <HAL_RCC_GetHCLKFreq+0x14>)
 80050be:	681b      	ldr	r3, [r3, #0]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	20000004 	.word	0x20000004

080050d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050d4:	f7ff fff0 	bl	80050b8 <HAL_RCC_GetHCLKFreq>
 80050d8:	4602      	mov	r2, r0
 80050da:	4b05      	ldr	r3, [pc, #20]	; (80050f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	0a9b      	lsrs	r3, r3, #10
 80050e0:	f003 0307 	and.w	r3, r3, #7
 80050e4:	4903      	ldr	r1, [pc, #12]	; (80050f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050e6:	5ccb      	ldrb	r3, [r1, r3]
 80050e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	40023800 	.word	0x40023800
 80050f4:	08008708 	.word	0x08008708

080050f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050fc:	f7ff ffdc 	bl	80050b8 <HAL_RCC_GetHCLKFreq>
 8005100:	4602      	mov	r2, r0
 8005102:	4b05      	ldr	r3, [pc, #20]	; (8005118 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	0b5b      	lsrs	r3, r3, #13
 8005108:	f003 0307 	and.w	r3, r3, #7
 800510c:	4903      	ldr	r1, [pc, #12]	; (800511c <HAL_RCC_GetPCLK2Freq+0x24>)
 800510e:	5ccb      	ldrb	r3, [r1, r3]
 8005110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005114:	4618      	mov	r0, r3
 8005116:	bd80      	pop	{r7, pc}
 8005118:	40023800 	.word	0x40023800
 800511c:	08008708 	.word	0x08008708

08005120 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005124:	b087      	sub	sp, #28
 8005126:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005128:	2600      	movs	r6, #0
 800512a:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 800512c:	2600      	movs	r6, #0
 800512e:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8005130:	2600      	movs	r6, #0
 8005132:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8005134:	2600      	movs	r6, #0
 8005136:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005138:	2600      	movs	r6, #0
 800513a:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800513c:	4ea3      	ldr	r6, [pc, #652]	; (80053cc <HAL_RCC_GetSysClockFreq+0x2ac>)
 800513e:	68b6      	ldr	r6, [r6, #8]
 8005140:	f006 060c 	and.w	r6, r6, #12
 8005144:	2e0c      	cmp	r6, #12
 8005146:	f200 8137 	bhi.w	80053b8 <HAL_RCC_GetSysClockFreq+0x298>
 800514a:	f20f 0c08 	addw	ip, pc, #8
 800514e:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8005152:	bf00      	nop
 8005154:	08005189 	.word	0x08005189
 8005158:	080053b9 	.word	0x080053b9
 800515c:	080053b9 	.word	0x080053b9
 8005160:	080053b9 	.word	0x080053b9
 8005164:	0800518f 	.word	0x0800518f
 8005168:	080053b9 	.word	0x080053b9
 800516c:	080053b9 	.word	0x080053b9
 8005170:	080053b9 	.word	0x080053b9
 8005174:	08005195 	.word	0x08005195
 8005178:	080053b9 	.word	0x080053b9
 800517c:	080053b9 	.word	0x080053b9
 8005180:	080053b9 	.word	0x080053b9
 8005184:	080052ab 	.word	0x080052ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005188:	4b91      	ldr	r3, [pc, #580]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800518a:	613b      	str	r3, [r7, #16]
       break;
 800518c:	e117      	b.n	80053be <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800518e:	4b91      	ldr	r3, [pc, #580]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8005190:	613b      	str	r3, [r7, #16]
      break;
 8005192:	e114      	b.n	80053be <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005194:	4b8d      	ldr	r3, [pc, #564]	; (80053cc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800519c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800519e:	4b8b      	ldr	r3, [pc, #556]	; (80053cc <HAL_RCC_GetSysClockFreq+0x2ac>)
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d024      	beq.n	80051f4 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051aa:	4b88      	ldr	r3, [pc, #544]	; (80053cc <HAL_RCC_GetSysClockFreq+0x2ac>)
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	099b      	lsrs	r3, r3, #6
 80051b0:	461a      	mov	r2, r3
 80051b2:	f04f 0300 	mov.w	r3, #0
 80051b6:	f240 14ff 	movw	r4, #511	; 0x1ff
 80051ba:	f04f 0500 	mov.w	r5, #0
 80051be:	ea02 0004 	and.w	r0, r2, r4
 80051c2:	ea03 0105 	and.w	r1, r3, r5
 80051c6:	4b83      	ldr	r3, [pc, #524]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80051c8:	fb03 f201 	mul.w	r2, r3, r1
 80051cc:	2300      	movs	r3, #0
 80051ce:	fb03 f300 	mul.w	r3, r3, r0
 80051d2:	4413      	add	r3, r2
 80051d4:	4a7f      	ldr	r2, [pc, #508]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80051d6:	fba0 0102 	umull	r0, r1, r0, r2
 80051da:	440b      	add	r3, r1
 80051dc:	4619      	mov	r1, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	461a      	mov	r2, r3
 80051e2:	f04f 0300 	mov.w	r3, #0
 80051e6:	f7fb fccb 	bl	8000b80 <__aeabi_uldivmod>
 80051ea:	4602      	mov	r2, r0
 80051ec:	460b      	mov	r3, r1
 80051ee:	4613      	mov	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]
 80051f2:	e04c      	b.n	800528e <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051f4:	4b75      	ldr	r3, [pc, #468]	; (80053cc <HAL_RCC_GetSysClockFreq+0x2ac>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	099b      	lsrs	r3, r3, #6
 80051fa:	461a      	mov	r2, r3
 80051fc:	f04f 0300 	mov.w	r3, #0
 8005200:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005204:	f04f 0100 	mov.w	r1, #0
 8005208:	ea02 0800 	and.w	r8, r2, r0
 800520c:	ea03 0901 	and.w	r9, r3, r1
 8005210:	4640      	mov	r0, r8
 8005212:	4649      	mov	r1, r9
 8005214:	f04f 0200 	mov.w	r2, #0
 8005218:	f04f 0300 	mov.w	r3, #0
 800521c:	014b      	lsls	r3, r1, #5
 800521e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005222:	0142      	lsls	r2, r0, #5
 8005224:	4610      	mov	r0, r2
 8005226:	4619      	mov	r1, r3
 8005228:	ebb0 0008 	subs.w	r0, r0, r8
 800522c:	eb61 0109 	sbc.w	r1, r1, r9
 8005230:	f04f 0200 	mov.w	r2, #0
 8005234:	f04f 0300 	mov.w	r3, #0
 8005238:	018b      	lsls	r3, r1, #6
 800523a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800523e:	0182      	lsls	r2, r0, #6
 8005240:	1a12      	subs	r2, r2, r0
 8005242:	eb63 0301 	sbc.w	r3, r3, r1
 8005246:	f04f 0000 	mov.w	r0, #0
 800524a:	f04f 0100 	mov.w	r1, #0
 800524e:	00d9      	lsls	r1, r3, #3
 8005250:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005254:	00d0      	lsls	r0, r2, #3
 8005256:	4602      	mov	r2, r0
 8005258:	460b      	mov	r3, r1
 800525a:	eb12 0208 	adds.w	r2, r2, r8
 800525e:	eb43 0309 	adc.w	r3, r3, r9
 8005262:	f04f 0000 	mov.w	r0, #0
 8005266:	f04f 0100 	mov.w	r1, #0
 800526a:	0299      	lsls	r1, r3, #10
 800526c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005270:	0290      	lsls	r0, r2, #10
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4610      	mov	r0, r2
 8005278:	4619      	mov	r1, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	461a      	mov	r2, r3
 800527e:	f04f 0300 	mov.w	r3, #0
 8005282:	f7fb fc7d 	bl	8000b80 <__aeabi_uldivmod>
 8005286:	4602      	mov	r2, r0
 8005288:	460b      	mov	r3, r1
 800528a:	4613      	mov	r3, r2
 800528c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800528e:	4b4f      	ldr	r3, [pc, #316]	; (80053cc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	0c1b      	lsrs	r3, r3, #16
 8005294:	f003 0303 	and.w	r3, r3, #3
 8005298:	3301      	adds	r3, #1
 800529a:	005b      	lsls	r3, r3, #1
 800529c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a6:	613b      	str	r3, [r7, #16]
      break;
 80052a8:	e089      	b.n	80053be <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052aa:	4948      	ldr	r1, [pc, #288]	; (80053cc <HAL_RCC_GetSysClockFreq+0x2ac>)
 80052ac:	6849      	ldr	r1, [r1, #4]
 80052ae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80052b2:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052b4:	4945      	ldr	r1, [pc, #276]	; (80053cc <HAL_RCC_GetSysClockFreq+0x2ac>)
 80052b6:	6849      	ldr	r1, [r1, #4]
 80052b8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80052bc:	2900      	cmp	r1, #0
 80052be:	d024      	beq.n	800530a <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052c0:	4942      	ldr	r1, [pc, #264]	; (80053cc <HAL_RCC_GetSysClockFreq+0x2ac>)
 80052c2:	6849      	ldr	r1, [r1, #4]
 80052c4:	0989      	lsrs	r1, r1, #6
 80052c6:	4608      	mov	r0, r1
 80052c8:	f04f 0100 	mov.w	r1, #0
 80052cc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80052d0:	f04f 0500 	mov.w	r5, #0
 80052d4:	ea00 0204 	and.w	r2, r0, r4
 80052d8:	ea01 0305 	and.w	r3, r1, r5
 80052dc:	493d      	ldr	r1, [pc, #244]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80052de:	fb01 f003 	mul.w	r0, r1, r3
 80052e2:	2100      	movs	r1, #0
 80052e4:	fb01 f102 	mul.w	r1, r1, r2
 80052e8:	1844      	adds	r4, r0, r1
 80052ea:	493a      	ldr	r1, [pc, #232]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80052ec:	fba2 0101 	umull	r0, r1, r2, r1
 80052f0:	1863      	adds	r3, r4, r1
 80052f2:	4619      	mov	r1, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	461a      	mov	r2, r3
 80052f8:	f04f 0300 	mov.w	r3, #0
 80052fc:	f7fb fc40 	bl	8000b80 <__aeabi_uldivmod>
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
 8005304:	4613      	mov	r3, r2
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	e04a      	b.n	80053a0 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800530a:	4b30      	ldr	r3, [pc, #192]	; (80053cc <HAL_RCC_GetSysClockFreq+0x2ac>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	099b      	lsrs	r3, r3, #6
 8005310:	461a      	mov	r2, r3
 8005312:	f04f 0300 	mov.w	r3, #0
 8005316:	f240 10ff 	movw	r0, #511	; 0x1ff
 800531a:	f04f 0100 	mov.w	r1, #0
 800531e:	ea02 0400 	and.w	r4, r2, r0
 8005322:	ea03 0501 	and.w	r5, r3, r1
 8005326:	4620      	mov	r0, r4
 8005328:	4629      	mov	r1, r5
 800532a:	f04f 0200 	mov.w	r2, #0
 800532e:	f04f 0300 	mov.w	r3, #0
 8005332:	014b      	lsls	r3, r1, #5
 8005334:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005338:	0142      	lsls	r2, r0, #5
 800533a:	4610      	mov	r0, r2
 800533c:	4619      	mov	r1, r3
 800533e:	1b00      	subs	r0, r0, r4
 8005340:	eb61 0105 	sbc.w	r1, r1, r5
 8005344:	f04f 0200 	mov.w	r2, #0
 8005348:	f04f 0300 	mov.w	r3, #0
 800534c:	018b      	lsls	r3, r1, #6
 800534e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005352:	0182      	lsls	r2, r0, #6
 8005354:	1a12      	subs	r2, r2, r0
 8005356:	eb63 0301 	sbc.w	r3, r3, r1
 800535a:	f04f 0000 	mov.w	r0, #0
 800535e:	f04f 0100 	mov.w	r1, #0
 8005362:	00d9      	lsls	r1, r3, #3
 8005364:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005368:	00d0      	lsls	r0, r2, #3
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	1912      	adds	r2, r2, r4
 8005370:	eb45 0303 	adc.w	r3, r5, r3
 8005374:	f04f 0000 	mov.w	r0, #0
 8005378:	f04f 0100 	mov.w	r1, #0
 800537c:	0299      	lsls	r1, r3, #10
 800537e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005382:	0290      	lsls	r0, r2, #10
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	4610      	mov	r0, r2
 800538a:	4619      	mov	r1, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	461a      	mov	r2, r3
 8005390:	f04f 0300 	mov.w	r3, #0
 8005394:	f7fb fbf4 	bl	8000b80 <__aeabi_uldivmod>
 8005398:	4602      	mov	r2, r0
 800539a:	460b      	mov	r3, r1
 800539c:	4613      	mov	r3, r2
 800539e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80053a0:	4b0a      	ldr	r3, [pc, #40]	; (80053cc <HAL_RCC_GetSysClockFreq+0x2ac>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	0f1b      	lsrs	r3, r3, #28
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b4:	613b      	str	r3, [r7, #16]
      break;
 80053b6:	e002      	b.n	80053be <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053b8:	4b05      	ldr	r3, [pc, #20]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80053ba:	613b      	str	r3, [r7, #16]
      break;
 80053bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053be:	693b      	ldr	r3, [r7, #16]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	371c      	adds	r7, #28
 80053c4:	46bd      	mov	sp, r7
 80053c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053ca:	bf00      	nop
 80053cc:	40023800 	.word	0x40023800
 80053d0:	00f42400 	.word	0x00f42400
 80053d4:	017d7840 	.word	0x017d7840

080053d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e28d      	b.n	8005906 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 8083 	beq.w	80054fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80053f8:	4b94      	ldr	r3, [pc, #592]	; (800564c <HAL_RCC_OscConfig+0x274>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f003 030c 	and.w	r3, r3, #12
 8005400:	2b04      	cmp	r3, #4
 8005402:	d019      	beq.n	8005438 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005404:	4b91      	ldr	r3, [pc, #580]	; (800564c <HAL_RCC_OscConfig+0x274>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800540c:	2b08      	cmp	r3, #8
 800540e:	d106      	bne.n	800541e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005410:	4b8e      	ldr	r3, [pc, #568]	; (800564c <HAL_RCC_OscConfig+0x274>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005418:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800541c:	d00c      	beq.n	8005438 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800541e:	4b8b      	ldr	r3, [pc, #556]	; (800564c <HAL_RCC_OscConfig+0x274>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005426:	2b0c      	cmp	r3, #12
 8005428:	d112      	bne.n	8005450 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800542a:	4b88      	ldr	r3, [pc, #544]	; (800564c <HAL_RCC_OscConfig+0x274>)
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005436:	d10b      	bne.n	8005450 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005438:	4b84      	ldr	r3, [pc, #528]	; (800564c <HAL_RCC_OscConfig+0x274>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d05b      	beq.n	80054fc <HAL_RCC_OscConfig+0x124>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d157      	bne.n	80054fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e25a      	b.n	8005906 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005458:	d106      	bne.n	8005468 <HAL_RCC_OscConfig+0x90>
 800545a:	4b7c      	ldr	r3, [pc, #496]	; (800564c <HAL_RCC_OscConfig+0x274>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a7b      	ldr	r2, [pc, #492]	; (800564c <HAL_RCC_OscConfig+0x274>)
 8005460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	e01d      	b.n	80054a4 <HAL_RCC_OscConfig+0xcc>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005470:	d10c      	bne.n	800548c <HAL_RCC_OscConfig+0xb4>
 8005472:	4b76      	ldr	r3, [pc, #472]	; (800564c <HAL_RCC_OscConfig+0x274>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a75      	ldr	r2, [pc, #468]	; (800564c <HAL_RCC_OscConfig+0x274>)
 8005478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	4b73      	ldr	r3, [pc, #460]	; (800564c <HAL_RCC_OscConfig+0x274>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a72      	ldr	r2, [pc, #456]	; (800564c <HAL_RCC_OscConfig+0x274>)
 8005484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	e00b      	b.n	80054a4 <HAL_RCC_OscConfig+0xcc>
 800548c:	4b6f      	ldr	r3, [pc, #444]	; (800564c <HAL_RCC_OscConfig+0x274>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a6e      	ldr	r2, [pc, #440]	; (800564c <HAL_RCC_OscConfig+0x274>)
 8005492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005496:	6013      	str	r3, [r2, #0]
 8005498:	4b6c      	ldr	r3, [pc, #432]	; (800564c <HAL_RCC_OscConfig+0x274>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a6b      	ldr	r2, [pc, #428]	; (800564c <HAL_RCC_OscConfig+0x274>)
 800549e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d013      	beq.n	80054d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ac:	f7fe f9ec 	bl	8003888 <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054b2:	e008      	b.n	80054c6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054b4:	f7fe f9e8 	bl	8003888 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b64      	cmp	r3, #100	; 0x64
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e21f      	b.n	8005906 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054c6:	4b61      	ldr	r3, [pc, #388]	; (800564c <HAL_RCC_OscConfig+0x274>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0f0      	beq.n	80054b4 <HAL_RCC_OscConfig+0xdc>
 80054d2:	e014      	b.n	80054fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d4:	f7fe f9d8 	bl	8003888 <HAL_GetTick>
 80054d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054da:	e008      	b.n	80054ee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054dc:	f7fe f9d4 	bl	8003888 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b64      	cmp	r3, #100	; 0x64
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e20b      	b.n	8005906 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ee:	4b57      	ldr	r3, [pc, #348]	; (800564c <HAL_RCC_OscConfig+0x274>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1f0      	bne.n	80054dc <HAL_RCC_OscConfig+0x104>
 80054fa:	e000      	b.n	80054fe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d06f      	beq.n	80055ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800550a:	4b50      	ldr	r3, [pc, #320]	; (800564c <HAL_RCC_OscConfig+0x274>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f003 030c 	and.w	r3, r3, #12
 8005512:	2b00      	cmp	r3, #0
 8005514:	d017      	beq.n	8005546 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005516:	4b4d      	ldr	r3, [pc, #308]	; (800564c <HAL_RCC_OscConfig+0x274>)
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800551e:	2b08      	cmp	r3, #8
 8005520:	d105      	bne.n	800552e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005522:	4b4a      	ldr	r3, [pc, #296]	; (800564c <HAL_RCC_OscConfig+0x274>)
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00b      	beq.n	8005546 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800552e:	4b47      	ldr	r3, [pc, #284]	; (800564c <HAL_RCC_OscConfig+0x274>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005536:	2b0c      	cmp	r3, #12
 8005538:	d11c      	bne.n	8005574 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800553a:	4b44      	ldr	r3, [pc, #272]	; (800564c <HAL_RCC_OscConfig+0x274>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d116      	bne.n	8005574 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005546:	4b41      	ldr	r3, [pc, #260]	; (800564c <HAL_RCC_OscConfig+0x274>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d005      	beq.n	800555e <HAL_RCC_OscConfig+0x186>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d001      	beq.n	800555e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e1d3      	b.n	8005906 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800555e:	4b3b      	ldr	r3, [pc, #236]	; (800564c <HAL_RCC_OscConfig+0x274>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	4937      	ldr	r1, [pc, #220]	; (800564c <HAL_RCC_OscConfig+0x274>)
 800556e:	4313      	orrs	r3, r2
 8005570:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005572:	e03a      	b.n	80055ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d020      	beq.n	80055be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800557c:	4b34      	ldr	r3, [pc, #208]	; (8005650 <HAL_RCC_OscConfig+0x278>)
 800557e:	2201      	movs	r2, #1
 8005580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005582:	f7fe f981 	bl	8003888 <HAL_GetTick>
 8005586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005588:	e008      	b.n	800559c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800558a:	f7fe f97d 	bl	8003888 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d901      	bls.n	800559c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e1b4      	b.n	8005906 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800559c:	4b2b      	ldr	r3, [pc, #172]	; (800564c <HAL_RCC_OscConfig+0x274>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0302 	and.w	r3, r3, #2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d0f0      	beq.n	800558a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055a8:	4b28      	ldr	r3, [pc, #160]	; (800564c <HAL_RCC_OscConfig+0x274>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	00db      	lsls	r3, r3, #3
 80055b6:	4925      	ldr	r1, [pc, #148]	; (800564c <HAL_RCC_OscConfig+0x274>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	600b      	str	r3, [r1, #0]
 80055bc:	e015      	b.n	80055ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055be:	4b24      	ldr	r3, [pc, #144]	; (8005650 <HAL_RCC_OscConfig+0x278>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c4:	f7fe f960 	bl	8003888 <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055cc:	f7fe f95c 	bl	8003888 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e193      	b.n	8005906 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055de:	4b1b      	ldr	r3, [pc, #108]	; (800564c <HAL_RCC_OscConfig+0x274>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1f0      	bne.n	80055cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0308 	and.w	r3, r3, #8
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d036      	beq.n	8005664 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d016      	beq.n	800562c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055fe:	4b15      	ldr	r3, [pc, #84]	; (8005654 <HAL_RCC_OscConfig+0x27c>)
 8005600:	2201      	movs	r2, #1
 8005602:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005604:	f7fe f940 	bl	8003888 <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800560c:	f7fe f93c 	bl	8003888 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e173      	b.n	8005906 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800561e:	4b0b      	ldr	r3, [pc, #44]	; (800564c <HAL_RCC_OscConfig+0x274>)
 8005620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d0f0      	beq.n	800560c <HAL_RCC_OscConfig+0x234>
 800562a:	e01b      	b.n	8005664 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800562c:	4b09      	ldr	r3, [pc, #36]	; (8005654 <HAL_RCC_OscConfig+0x27c>)
 800562e:	2200      	movs	r2, #0
 8005630:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005632:	f7fe f929 	bl	8003888 <HAL_GetTick>
 8005636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005638:	e00e      	b.n	8005658 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800563a:	f7fe f925 	bl	8003888 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b02      	cmp	r3, #2
 8005646:	d907      	bls.n	8005658 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e15c      	b.n	8005906 <HAL_RCC_OscConfig+0x52e>
 800564c:	40023800 	.word	0x40023800
 8005650:	42470000 	.word	0x42470000
 8005654:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005658:	4b8a      	ldr	r3, [pc, #552]	; (8005884 <HAL_RCC_OscConfig+0x4ac>)
 800565a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1ea      	bne.n	800563a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 8097 	beq.w	80057a0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005672:	2300      	movs	r3, #0
 8005674:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005676:	4b83      	ldr	r3, [pc, #524]	; (8005884 <HAL_RCC_OscConfig+0x4ac>)
 8005678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10f      	bne.n	80056a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005682:	2300      	movs	r3, #0
 8005684:	60bb      	str	r3, [r7, #8]
 8005686:	4b7f      	ldr	r3, [pc, #508]	; (8005884 <HAL_RCC_OscConfig+0x4ac>)
 8005688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568a:	4a7e      	ldr	r2, [pc, #504]	; (8005884 <HAL_RCC_OscConfig+0x4ac>)
 800568c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005690:	6413      	str	r3, [r2, #64]	; 0x40
 8005692:	4b7c      	ldr	r3, [pc, #496]	; (8005884 <HAL_RCC_OscConfig+0x4ac>)
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800569a:	60bb      	str	r3, [r7, #8]
 800569c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800569e:	2301      	movs	r3, #1
 80056a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a2:	4b79      	ldr	r3, [pc, #484]	; (8005888 <HAL_RCC_OscConfig+0x4b0>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d118      	bne.n	80056e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056ae:	4b76      	ldr	r3, [pc, #472]	; (8005888 <HAL_RCC_OscConfig+0x4b0>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a75      	ldr	r2, [pc, #468]	; (8005888 <HAL_RCC_OscConfig+0x4b0>)
 80056b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056ba:	f7fe f8e5 	bl	8003888 <HAL_GetTick>
 80056be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056c0:	e008      	b.n	80056d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056c2:	f7fe f8e1 	bl	8003888 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e118      	b.n	8005906 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d4:	4b6c      	ldr	r3, [pc, #432]	; (8005888 <HAL_RCC_OscConfig+0x4b0>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0f0      	beq.n	80056c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d106      	bne.n	80056f6 <HAL_RCC_OscConfig+0x31e>
 80056e8:	4b66      	ldr	r3, [pc, #408]	; (8005884 <HAL_RCC_OscConfig+0x4ac>)
 80056ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ec:	4a65      	ldr	r2, [pc, #404]	; (8005884 <HAL_RCC_OscConfig+0x4ac>)
 80056ee:	f043 0301 	orr.w	r3, r3, #1
 80056f2:	6713      	str	r3, [r2, #112]	; 0x70
 80056f4:	e01c      	b.n	8005730 <HAL_RCC_OscConfig+0x358>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	2b05      	cmp	r3, #5
 80056fc:	d10c      	bne.n	8005718 <HAL_RCC_OscConfig+0x340>
 80056fe:	4b61      	ldr	r3, [pc, #388]	; (8005884 <HAL_RCC_OscConfig+0x4ac>)
 8005700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005702:	4a60      	ldr	r2, [pc, #384]	; (8005884 <HAL_RCC_OscConfig+0x4ac>)
 8005704:	f043 0304 	orr.w	r3, r3, #4
 8005708:	6713      	str	r3, [r2, #112]	; 0x70
 800570a:	4b5e      	ldr	r3, [pc, #376]	; (8005884 <HAL_RCC_OscConfig+0x4ac>)
 800570c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570e:	4a5d      	ldr	r2, [pc, #372]	; (8005884 <HAL_RCC_OscConfig+0x4ac>)
 8005710:	f043 0301 	orr.w	r3, r3, #1
 8005714:	6713      	str	r3, [r2, #112]	; 0x70
 8005716:	e00b      	b.n	8005730 <HAL_RCC_OscConfig+0x358>
 8005718:	4b5a      	ldr	r3, [pc, #360]	; (8005884 <HAL_RCC_OscConfig+0x4ac>)
 800571a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571c:	4a59      	ldr	r2, [pc, #356]	; (8005884 <HAL_RCC_OscConfig+0x4ac>)
 800571e:	f023 0301 	bic.w	r3, r3, #1
 8005722:	6713      	str	r3, [r2, #112]	; 0x70
 8005724:	4b57      	ldr	r3, [pc, #348]	; (8005884 <HAL_RCC_OscConfig+0x4ac>)
 8005726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005728:	4a56      	ldr	r2, [pc, #344]	; (8005884 <HAL_RCC_OscConfig+0x4ac>)
 800572a:	f023 0304 	bic.w	r3, r3, #4
 800572e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d015      	beq.n	8005764 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005738:	f7fe f8a6 	bl	8003888 <HAL_GetTick>
 800573c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800573e:	e00a      	b.n	8005756 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005740:	f7fe f8a2 	bl	8003888 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	f241 3288 	movw	r2, #5000	; 0x1388
 800574e:	4293      	cmp	r3, r2
 8005750:	d901      	bls.n	8005756 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e0d7      	b.n	8005906 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005756:	4b4b      	ldr	r3, [pc, #300]	; (8005884 <HAL_RCC_OscConfig+0x4ac>)
 8005758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0ee      	beq.n	8005740 <HAL_RCC_OscConfig+0x368>
 8005762:	e014      	b.n	800578e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005764:	f7fe f890 	bl	8003888 <HAL_GetTick>
 8005768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800576a:	e00a      	b.n	8005782 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800576c:	f7fe f88c 	bl	8003888 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	f241 3288 	movw	r2, #5000	; 0x1388
 800577a:	4293      	cmp	r3, r2
 800577c:	d901      	bls.n	8005782 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e0c1      	b.n	8005906 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005782:	4b40      	ldr	r3, [pc, #256]	; (8005884 <HAL_RCC_OscConfig+0x4ac>)
 8005784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1ee      	bne.n	800576c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800578e:	7dfb      	ldrb	r3, [r7, #23]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d105      	bne.n	80057a0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005794:	4b3b      	ldr	r3, [pc, #236]	; (8005884 <HAL_RCC_OscConfig+0x4ac>)
 8005796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005798:	4a3a      	ldr	r2, [pc, #232]	; (8005884 <HAL_RCC_OscConfig+0x4ac>)
 800579a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800579e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 80ad 	beq.w	8005904 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057aa:	4b36      	ldr	r3, [pc, #216]	; (8005884 <HAL_RCC_OscConfig+0x4ac>)
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f003 030c 	and.w	r3, r3, #12
 80057b2:	2b08      	cmp	r3, #8
 80057b4:	d060      	beq.n	8005878 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d145      	bne.n	800584a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057be:	4b33      	ldr	r3, [pc, #204]	; (800588c <HAL_RCC_OscConfig+0x4b4>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c4:	f7fe f860 	bl	8003888 <HAL_GetTick>
 80057c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ca:	e008      	b.n	80057de <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057cc:	f7fe f85c 	bl	8003888 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e093      	b.n	8005906 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057de:	4b29      	ldr	r3, [pc, #164]	; (8005884 <HAL_RCC_OscConfig+0x4ac>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1f0      	bne.n	80057cc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	69da      	ldr	r2, [r3, #28]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	431a      	orrs	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	019b      	lsls	r3, r3, #6
 80057fa:	431a      	orrs	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005800:	085b      	lsrs	r3, r3, #1
 8005802:	3b01      	subs	r3, #1
 8005804:	041b      	lsls	r3, r3, #16
 8005806:	431a      	orrs	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580c:	061b      	lsls	r3, r3, #24
 800580e:	431a      	orrs	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005814:	071b      	lsls	r3, r3, #28
 8005816:	491b      	ldr	r1, [pc, #108]	; (8005884 <HAL_RCC_OscConfig+0x4ac>)
 8005818:	4313      	orrs	r3, r2
 800581a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800581c:	4b1b      	ldr	r3, [pc, #108]	; (800588c <HAL_RCC_OscConfig+0x4b4>)
 800581e:	2201      	movs	r2, #1
 8005820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005822:	f7fe f831 	bl	8003888 <HAL_GetTick>
 8005826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005828:	e008      	b.n	800583c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800582a:	f7fe f82d 	bl	8003888 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d901      	bls.n	800583c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e064      	b.n	8005906 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800583c:	4b11      	ldr	r3, [pc, #68]	; (8005884 <HAL_RCC_OscConfig+0x4ac>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d0f0      	beq.n	800582a <HAL_RCC_OscConfig+0x452>
 8005848:	e05c      	b.n	8005904 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800584a:	4b10      	ldr	r3, [pc, #64]	; (800588c <HAL_RCC_OscConfig+0x4b4>)
 800584c:	2200      	movs	r2, #0
 800584e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005850:	f7fe f81a 	bl	8003888 <HAL_GetTick>
 8005854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005858:	f7fe f816 	bl	8003888 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e04d      	b.n	8005906 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800586a:	4b06      	ldr	r3, [pc, #24]	; (8005884 <HAL_RCC_OscConfig+0x4ac>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1f0      	bne.n	8005858 <HAL_RCC_OscConfig+0x480>
 8005876:	e045      	b.n	8005904 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d107      	bne.n	8005890 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e040      	b.n	8005906 <HAL_RCC_OscConfig+0x52e>
 8005884:	40023800 	.word	0x40023800
 8005888:	40007000 	.word	0x40007000
 800588c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005890:	4b1f      	ldr	r3, [pc, #124]	; (8005910 <HAL_RCC_OscConfig+0x538>)
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d030      	beq.n	8005900 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d129      	bne.n	8005900 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d122      	bne.n	8005900 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058c0:	4013      	ands	r3, r2
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d119      	bne.n	8005900 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d6:	085b      	lsrs	r3, r3, #1
 80058d8:	3b01      	subs	r3, #1
 80058da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058dc:	429a      	cmp	r2, r3
 80058de:	d10f      	bne.n	8005900 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d107      	bne.n	8005900 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d001      	beq.n	8005904 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e000      	b.n	8005906 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3718      	adds	r7, #24
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	40023800 	.word	0x40023800

08005914 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e07b      	b.n	8005a1e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	2b00      	cmp	r3, #0
 800592c:	d108      	bne.n	8005940 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005936:	d009      	beq.n	800594c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	61da      	str	r2, [r3, #28]
 800593e:	e005      	b.n	800594c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7fd fc74 	bl	8003254 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2202      	movs	r2, #2
 8005970:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005982:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005994:	431a      	orrs	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800599e:	431a      	orrs	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	431a      	orrs	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	431a      	orrs	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059bc:	431a      	orrs	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d0:	ea42 0103 	orr.w	r1, r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	0c1b      	lsrs	r3, r3, #16
 80059ea:	f003 0104 	and.w	r1, r3, #4
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f2:	f003 0210 	and.w	r2, r3, #16
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69da      	ldr	r2, [r3, #28]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b088      	sub	sp, #32
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	60f8      	str	r0, [r7, #12]
 8005a2e:	60b9      	str	r1, [r7, #8]
 8005a30:	603b      	str	r3, [r7, #0]
 8005a32:	4613      	mov	r3, r2
 8005a34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d101      	bne.n	8005a48 <HAL_SPI_Transmit+0x22>
 8005a44:	2302      	movs	r3, #2
 8005a46:	e126      	b.n	8005c96 <HAL_SPI_Transmit+0x270>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a50:	f7fd ff1a 	bl	8003888 <HAL_GetTick>
 8005a54:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005a56:	88fb      	ldrh	r3, [r7, #6]
 8005a58:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d002      	beq.n	8005a6c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005a66:	2302      	movs	r3, #2
 8005a68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a6a:	e10b      	b.n	8005c84 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d002      	beq.n	8005a78 <HAL_SPI_Transmit+0x52>
 8005a72:	88fb      	ldrh	r3, [r7, #6]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d102      	bne.n	8005a7e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a7c:	e102      	b.n	8005c84 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2203      	movs	r2, #3
 8005a82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	88fa      	ldrh	r2, [r7, #6]
 8005a96:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	88fa      	ldrh	r2, [r7, #6]
 8005a9c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ac4:	d10f      	bne.n	8005ae6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ad4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ae4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af0:	2b40      	cmp	r3, #64	; 0x40
 8005af2:	d007      	beq.n	8005b04 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b0c:	d14b      	bne.n	8005ba6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d002      	beq.n	8005b1c <HAL_SPI_Transmit+0xf6>
 8005b16:	8afb      	ldrh	r3, [r7, #22]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d13e      	bne.n	8005b9a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b20:	881a      	ldrh	r2, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2c:	1c9a      	adds	r2, r3, #2
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b40:	e02b      	b.n	8005b9a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d112      	bne.n	8005b76 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b54:	881a      	ldrh	r2, [r3, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b60:	1c9a      	adds	r2, r3, #2
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b74:	e011      	b.n	8005b9a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b76:	f7fd fe87 	bl	8003888 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d803      	bhi.n	8005b8e <HAL_SPI_Transmit+0x168>
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b8c:	d102      	bne.n	8005b94 <HAL_SPI_Transmit+0x16e>
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d102      	bne.n	8005b9a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b98:	e074      	b.n	8005c84 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1ce      	bne.n	8005b42 <HAL_SPI_Transmit+0x11c>
 8005ba4:	e04c      	b.n	8005c40 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d002      	beq.n	8005bb4 <HAL_SPI_Transmit+0x18e>
 8005bae:	8afb      	ldrh	r3, [r7, #22]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d140      	bne.n	8005c36 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	330c      	adds	r3, #12
 8005bbe:	7812      	ldrb	r2, [r2, #0]
 8005bc0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc6:	1c5a      	adds	r2, r3, #1
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005bda:	e02c      	b.n	8005c36 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d113      	bne.n	8005c12 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	330c      	adds	r3, #12
 8005bf4:	7812      	ldrb	r2, [r2, #0]
 8005bf6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfc:	1c5a      	adds	r2, r3, #1
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c10:	e011      	b.n	8005c36 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c12:	f7fd fe39 	bl	8003888 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d803      	bhi.n	8005c2a <HAL_SPI_Transmit+0x204>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c28:	d102      	bne.n	8005c30 <HAL_SPI_Transmit+0x20a>
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d102      	bne.n	8005c36 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c34:	e026      	b.n	8005c84 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1cd      	bne.n	8005bdc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	6839      	ldr	r1, [r7, #0]
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 fbcb 	bl	80063e0 <SPI_EndRxTxTransaction>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d002      	beq.n	8005c56 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2220      	movs	r2, #32
 8005c54:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10a      	bne.n	8005c74 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c5e:	2300      	movs	r3, #0
 8005c60:	613b      	str	r3, [r7, #16]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	613b      	str	r3, [r7, #16]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	613b      	str	r3, [r7, #16]
 8005c72:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	77fb      	strb	r3, [r7, #31]
 8005c80:	e000      	b.n	8005c84 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005c82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c94:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3720      	adds	r7, #32
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b088      	sub	sp, #32
 8005ca2:	af02      	add	r7, sp, #8
 8005ca4:	60f8      	str	r0, [r7, #12]
 8005ca6:	60b9      	str	r1, [r7, #8]
 8005ca8:	603b      	str	r3, [r7, #0]
 8005caa:	4613      	mov	r3, r2
 8005cac:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cba:	d112      	bne.n	8005ce2 <HAL_SPI_Receive+0x44>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10e      	bne.n	8005ce2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2204      	movs	r2, #4
 8005cc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005ccc:	88fa      	ldrh	r2, [r7, #6]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	68b9      	ldr	r1, [r7, #8]
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f000 f8f1 	bl	8005ec0 <HAL_SPI_TransmitReceive>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	e0ea      	b.n	8005eb8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d101      	bne.n	8005cf0 <HAL_SPI_Receive+0x52>
 8005cec:	2302      	movs	r3, #2
 8005cee:	e0e3      	b.n	8005eb8 <HAL_SPI_Receive+0x21a>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cf8:	f7fd fdc6 	bl	8003888 <HAL_GetTick>
 8005cfc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d002      	beq.n	8005d10 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d0e:	e0ca      	b.n	8005ea6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <HAL_SPI_Receive+0x7e>
 8005d16:	88fb      	ldrh	r3, [r7, #6]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d102      	bne.n	8005d22 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d20:	e0c1      	b.n	8005ea6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2204      	movs	r2, #4
 8005d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	88fa      	ldrh	r2, [r7, #6]
 8005d3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	88fa      	ldrh	r2, [r7, #6]
 8005d40:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d68:	d10f      	bne.n	8005d8a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d88:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d94:	2b40      	cmp	r3, #64	; 0x40
 8005d96:	d007      	beq.n	8005da8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005da6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d162      	bne.n	8005e76 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005db0:	e02e      	b.n	8005e10 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d115      	bne.n	8005dec <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f103 020c 	add.w	r2, r3, #12
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dcc:	7812      	ldrb	r2, [r2, #0]
 8005dce:	b2d2      	uxtb	r2, r2
 8005dd0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd6:	1c5a      	adds	r2, r3, #1
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	3b01      	subs	r3, #1
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dea:	e011      	b.n	8005e10 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dec:	f7fd fd4c 	bl	8003888 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d803      	bhi.n	8005e04 <HAL_SPI_Receive+0x166>
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e02:	d102      	bne.n	8005e0a <HAL_SPI_Receive+0x16c>
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d102      	bne.n	8005e10 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005e0e:	e04a      	b.n	8005ea6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1cb      	bne.n	8005db2 <HAL_SPI_Receive+0x114>
 8005e1a:	e031      	b.n	8005e80 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d113      	bne.n	8005e52 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68da      	ldr	r2, [r3, #12]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e34:	b292      	uxth	r2, r2
 8005e36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3c:	1c9a      	adds	r2, r3, #2
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e50:	e011      	b.n	8005e76 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e52:	f7fd fd19 	bl	8003888 <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d803      	bhi.n	8005e6a <HAL_SPI_Receive+0x1cc>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e68:	d102      	bne.n	8005e70 <HAL_SPI_Receive+0x1d2>
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d102      	bne.n	8005e76 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005e74:	e017      	b.n	8005ea6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1cd      	bne.n	8005e1c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	6839      	ldr	r1, [r7, #0]
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f000 fa45 	bl	8006314 <SPI_EndRxTransaction>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d002      	beq.n	8005e96 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2220      	movs	r2, #32
 8005e94:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d002      	beq.n	8005ea4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	75fb      	strb	r3, [r7, #23]
 8005ea2:	e000      	b.n	8005ea6 <HAL_SPI_Receive+0x208>
  }

error :
 8005ea4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3718      	adds	r7, #24
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b08c      	sub	sp, #48	; 0x30
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
 8005ecc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d101      	bne.n	8005ee6 <HAL_SPI_TransmitReceive+0x26>
 8005ee2:	2302      	movs	r3, #2
 8005ee4:	e18a      	b.n	80061fc <HAL_SPI_TransmitReceive+0x33c>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005eee:	f7fd fccb 	bl	8003888 <HAL_GetTick>
 8005ef2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005f04:	887b      	ldrh	r3, [r7, #2]
 8005f06:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d00f      	beq.n	8005f30 <HAL_SPI_TransmitReceive+0x70>
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f16:	d107      	bne.n	8005f28 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d103      	bne.n	8005f28 <HAL_SPI_TransmitReceive+0x68>
 8005f20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d003      	beq.n	8005f30 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005f28:	2302      	movs	r3, #2
 8005f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005f2e:	e15b      	b.n	80061e8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d005      	beq.n	8005f42 <HAL_SPI_TransmitReceive+0x82>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <HAL_SPI_TransmitReceive+0x82>
 8005f3c:	887b      	ldrh	r3, [r7, #2]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d103      	bne.n	8005f4a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005f48:	e14e      	b.n	80061e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b04      	cmp	r3, #4
 8005f54:	d003      	beq.n	8005f5e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2205      	movs	r2, #5
 8005f5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	887a      	ldrh	r2, [r7, #2]
 8005f6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	887a      	ldrh	r2, [r7, #2]
 8005f74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	887a      	ldrh	r2, [r7, #2]
 8005f80:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	887a      	ldrh	r2, [r7, #2]
 8005f86:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9e:	2b40      	cmp	r3, #64	; 0x40
 8005fa0:	d007      	beq.n	8005fb2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fba:	d178      	bne.n	80060ae <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d002      	beq.n	8005fca <HAL_SPI_TransmitReceive+0x10a>
 8005fc4:	8b7b      	ldrh	r3, [r7, #26]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d166      	bne.n	8006098 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fce:	881a      	ldrh	r2, [r3, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fda:	1c9a      	adds	r2, r3, #2
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fee:	e053      	b.n	8006098 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f003 0302 	and.w	r3, r3, #2
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d11b      	bne.n	8006036 <HAL_SPI_TransmitReceive+0x176>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006002:	b29b      	uxth	r3, r3
 8006004:	2b00      	cmp	r3, #0
 8006006:	d016      	beq.n	8006036 <HAL_SPI_TransmitReceive+0x176>
 8006008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600a:	2b01      	cmp	r3, #1
 800600c:	d113      	bne.n	8006036 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006012:	881a      	ldrh	r2, [r3, #0]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601e:	1c9a      	adds	r2, r3, #2
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006028:	b29b      	uxth	r3, r3
 800602a:	3b01      	subs	r3, #1
 800602c:	b29a      	uxth	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006032:	2300      	movs	r3, #0
 8006034:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b01      	cmp	r3, #1
 8006042:	d119      	bne.n	8006078 <HAL_SPI_TransmitReceive+0x1b8>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006048:	b29b      	uxth	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d014      	beq.n	8006078 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68da      	ldr	r2, [r3, #12]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006058:	b292      	uxth	r2, r2
 800605a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006060:	1c9a      	adds	r2, r3, #2
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800606a:	b29b      	uxth	r3, r3
 800606c:	3b01      	subs	r3, #1
 800606e:	b29a      	uxth	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006074:	2301      	movs	r3, #1
 8006076:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006078:	f7fd fc06 	bl	8003888 <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006084:	429a      	cmp	r2, r3
 8006086:	d807      	bhi.n	8006098 <HAL_SPI_TransmitReceive+0x1d8>
 8006088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800608e:	d003      	beq.n	8006098 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006096:	e0a7      	b.n	80061e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800609c:	b29b      	uxth	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1a6      	bne.n	8005ff0 <HAL_SPI_TransmitReceive+0x130>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1a1      	bne.n	8005ff0 <HAL_SPI_TransmitReceive+0x130>
 80060ac:	e07c      	b.n	80061a8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d002      	beq.n	80060bc <HAL_SPI_TransmitReceive+0x1fc>
 80060b6:	8b7b      	ldrh	r3, [r7, #26]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d16b      	bne.n	8006194 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	330c      	adds	r3, #12
 80060c6:	7812      	ldrb	r2, [r2, #0]
 80060c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060d8:	b29b      	uxth	r3, r3
 80060da:	3b01      	subs	r3, #1
 80060dc:	b29a      	uxth	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060e2:	e057      	b.n	8006194 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f003 0302 	and.w	r3, r3, #2
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d11c      	bne.n	800612c <HAL_SPI_TransmitReceive+0x26c>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d017      	beq.n	800612c <HAL_SPI_TransmitReceive+0x26c>
 80060fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d114      	bne.n	800612c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	330c      	adds	r3, #12
 800610c:	7812      	ldrb	r2, [r2, #0]
 800610e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800611e:	b29b      	uxth	r3, r3
 8006120:	3b01      	subs	r3, #1
 8006122:	b29a      	uxth	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006128:	2300      	movs	r3, #0
 800612a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b01      	cmp	r3, #1
 8006138:	d119      	bne.n	800616e <HAL_SPI_TransmitReceive+0x2ae>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800613e:	b29b      	uxth	r3, r3
 8006140:	2b00      	cmp	r3, #0
 8006142:	d014      	beq.n	800616e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68da      	ldr	r2, [r3, #12]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614e:	b2d2      	uxtb	r2, r2
 8006150:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006160:	b29b      	uxth	r3, r3
 8006162:	3b01      	subs	r3, #1
 8006164:	b29a      	uxth	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800616a:	2301      	movs	r3, #1
 800616c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800616e:	f7fd fb8b 	bl	8003888 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800617a:	429a      	cmp	r2, r3
 800617c:	d803      	bhi.n	8006186 <HAL_SPI_TransmitReceive+0x2c6>
 800617e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006180:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006184:	d102      	bne.n	800618c <HAL_SPI_TransmitReceive+0x2cc>
 8006186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006188:	2b00      	cmp	r3, #0
 800618a:	d103      	bne.n	8006194 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006192:	e029      	b.n	80061e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006198:	b29b      	uxth	r3, r3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1a2      	bne.n	80060e4 <HAL_SPI_TransmitReceive+0x224>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d19d      	bne.n	80060e4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f000 f917 	bl	80063e0 <SPI_EndRxTxTransaction>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d006      	beq.n	80061c6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2220      	movs	r2, #32
 80061c2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80061c4:	e010      	b.n	80061e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10b      	bne.n	80061e6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061ce:	2300      	movs	r3, #0
 80061d0:	617b      	str	r3, [r7, #20]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	617b      	str	r3, [r7, #20]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	617b      	str	r3, [r7, #20]
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	e000      	b.n	80061e8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80061e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80061f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3730      	adds	r7, #48	; 0x30
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b088      	sub	sp, #32
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	603b      	str	r3, [r7, #0]
 8006210:	4613      	mov	r3, r2
 8006212:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006214:	f7fd fb38 	bl	8003888 <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621c:	1a9b      	subs	r3, r3, r2
 800621e:	683a      	ldr	r2, [r7, #0]
 8006220:	4413      	add	r3, r2
 8006222:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006224:	f7fd fb30 	bl	8003888 <HAL_GetTick>
 8006228:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800622a:	4b39      	ldr	r3, [pc, #228]	; (8006310 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	015b      	lsls	r3, r3, #5
 8006230:	0d1b      	lsrs	r3, r3, #20
 8006232:	69fa      	ldr	r2, [r7, #28]
 8006234:	fb02 f303 	mul.w	r3, r2, r3
 8006238:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800623a:	e054      	b.n	80062e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006242:	d050      	beq.n	80062e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006244:	f7fd fb20 	bl	8003888 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	69fa      	ldr	r2, [r7, #28]
 8006250:	429a      	cmp	r2, r3
 8006252:	d902      	bls.n	800625a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d13d      	bne.n	80062d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006268:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006272:	d111      	bne.n	8006298 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800627c:	d004      	beq.n	8006288 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006286:	d107      	bne.n	8006298 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006296:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062a0:	d10f      	bne.n	80062c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e017      	b.n	8006306 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	3b01      	subs	r3, #1
 80062e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	689a      	ldr	r2, [r3, #8]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	4013      	ands	r3, r2
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	bf0c      	ite	eq
 80062f6:	2301      	moveq	r3, #1
 80062f8:	2300      	movne	r3, #0
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	461a      	mov	r2, r3
 80062fe:	79fb      	ldrb	r3, [r7, #7]
 8006300:	429a      	cmp	r2, r3
 8006302:	d19b      	bne.n	800623c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3720      	adds	r7, #32
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	20000004 	.word	0x20000004

08006314 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af02      	add	r7, sp, #8
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006328:	d111      	bne.n	800634e <SPI_EndRxTransaction+0x3a>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006332:	d004      	beq.n	800633e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800633c:	d107      	bne.n	800634e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800634c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006356:	d12a      	bne.n	80063ae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006360:	d012      	beq.n	8006388 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	9300      	str	r3, [sp, #0]
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	2200      	movs	r2, #0
 800636a:	2180      	movs	r1, #128	; 0x80
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f7ff ff49 	bl	8006204 <SPI_WaitFlagStateUntilTimeout>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d02d      	beq.n	80063d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637c:	f043 0220 	orr.w	r2, r3, #32
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e026      	b.n	80063d6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	2200      	movs	r2, #0
 8006390:	2101      	movs	r1, #1
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f7ff ff36 	bl	8006204 <SPI_WaitFlagStateUntilTimeout>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d01a      	beq.n	80063d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a2:	f043 0220 	orr.w	r2, r3, #32
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e013      	b.n	80063d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	2200      	movs	r2, #0
 80063b6:	2101      	movs	r1, #1
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f7ff ff23 	bl	8006204 <SPI_WaitFlagStateUntilTimeout>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d007      	beq.n	80063d4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c8:	f043 0220 	orr.w	r2, r3, #32
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e000      	b.n	80063d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
	...

080063e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b088      	sub	sp, #32
 80063e4:	af02      	add	r7, sp, #8
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80063ec:	4b1b      	ldr	r3, [pc, #108]	; (800645c <SPI_EndRxTxTransaction+0x7c>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a1b      	ldr	r2, [pc, #108]	; (8006460 <SPI_EndRxTxTransaction+0x80>)
 80063f2:	fba2 2303 	umull	r2, r3, r2, r3
 80063f6:	0d5b      	lsrs	r3, r3, #21
 80063f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80063fc:	fb02 f303 	mul.w	r3, r2, r3
 8006400:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800640a:	d112      	bne.n	8006432 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2200      	movs	r2, #0
 8006414:	2180      	movs	r1, #128	; 0x80
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f7ff fef4 	bl	8006204 <SPI_WaitFlagStateUntilTimeout>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d016      	beq.n	8006450 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006426:	f043 0220 	orr.w	r2, r3, #32
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e00f      	b.n	8006452 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00a      	beq.n	800644e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	3b01      	subs	r3, #1
 800643c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006448:	2b80      	cmp	r3, #128	; 0x80
 800644a:	d0f2      	beq.n	8006432 <SPI_EndRxTxTransaction+0x52>
 800644c:	e000      	b.n	8006450 <SPI_EndRxTxTransaction+0x70>
        break;
 800644e:	bf00      	nop
  }

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	20000004 	.word	0x20000004
 8006460:	165e9f81 	.word	0x165e9f81

08006464 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e03f      	b.n	80064f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d106      	bne.n	8006490 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7fc ffae 	bl	80033ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2224      	movs	r2, #36	; 0x24
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68da      	ldr	r2, [r3, #12]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fe03 	bl	80070b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	691a      	ldr	r2, [r3, #16]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	695a      	ldr	r2, [r3, #20]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68da      	ldr	r2, [r3, #12]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2220      	movs	r2, #32
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2220      	movs	r2, #32
 80064f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b08a      	sub	sp, #40	; 0x28
 8006502:	af02      	add	r7, sp, #8
 8006504:	60f8      	str	r0, [r7, #12]
 8006506:	60b9      	str	r1, [r7, #8]
 8006508:	603b      	str	r3, [r7, #0]
 800650a:	4613      	mov	r3, r2
 800650c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800650e:	2300      	movs	r3, #0
 8006510:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b20      	cmp	r3, #32
 800651c:	d17c      	bne.n	8006618 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <HAL_UART_Transmit+0x2c>
 8006524:	88fb      	ldrh	r3, [r7, #6]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e075      	b.n	800661a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006534:	2b01      	cmp	r3, #1
 8006536:	d101      	bne.n	800653c <HAL_UART_Transmit+0x3e>
 8006538:	2302      	movs	r3, #2
 800653a:	e06e      	b.n	800661a <HAL_UART_Transmit+0x11c>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2221      	movs	r2, #33	; 0x21
 800654e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006552:	f7fd f999 	bl	8003888 <HAL_GetTick>
 8006556:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	88fa      	ldrh	r2, [r7, #6]
 800655c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	88fa      	ldrh	r2, [r7, #6]
 8006562:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800656c:	d108      	bne.n	8006580 <HAL_UART_Transmit+0x82>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d104      	bne.n	8006580 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006576:	2300      	movs	r3, #0
 8006578:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	61bb      	str	r3, [r7, #24]
 800657e:	e003      	b.n	8006588 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006584:	2300      	movs	r3, #0
 8006586:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006590:	e02a      	b.n	80065e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	2200      	movs	r2, #0
 800659a:	2180      	movs	r1, #128	; 0x80
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 fb47 	bl	8006c30 <UART_WaitOnFlagUntilTimeout>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d001      	beq.n	80065ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e036      	b.n	800661a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10b      	bne.n	80065ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	881b      	ldrh	r3, [r3, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	3302      	adds	r3, #2
 80065c6:	61bb      	str	r3, [r7, #24]
 80065c8:	e007      	b.n	80065da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	781a      	ldrb	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	3301      	adds	r3, #1
 80065d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065de:	b29b      	uxth	r3, r3
 80065e0:	3b01      	subs	r3, #1
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1cf      	bne.n	8006592 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	2200      	movs	r2, #0
 80065fa:	2140      	movs	r1, #64	; 0x40
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f000 fb17 	bl	8006c30 <UART_WaitOnFlagUntilTimeout>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e006      	b.n	800661a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2220      	movs	r2, #32
 8006610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006614:	2300      	movs	r3, #0
 8006616:	e000      	b.n	800661a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006618:	2302      	movs	r3, #2
  }
}
 800661a:	4618      	mov	r0, r3
 800661c:	3720      	adds	r7, #32
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b08c      	sub	sp, #48	; 0x30
 8006626:	af00      	add	r7, sp, #0
 8006628:	60f8      	str	r0, [r7, #12]
 800662a:	60b9      	str	r1, [r7, #8]
 800662c:	4613      	mov	r3, r2
 800662e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b20      	cmp	r3, #32
 800663a:	d152      	bne.n	80066e2 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d002      	beq.n	8006648 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8006642:	88fb      	ldrh	r3, [r7, #6]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e04b      	b.n	80066e4 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006652:	2b01      	cmp	r3, #1
 8006654:	d101      	bne.n	800665a <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 8006656:	2302      	movs	r3, #2
 8006658:	e044      	b.n	80066e4 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2201      	movs	r2, #1
 8006666:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8006668:	88fb      	ldrh	r3, [r7, #6]
 800666a:	461a      	mov	r2, r3
 800666c:	68b9      	ldr	r1, [r7, #8]
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f000 fb4c 	bl	8006d0c <UART_Start_Receive_IT>
 8006674:	4603      	mov	r3, r0
 8006676:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800667a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800667e:	2b00      	cmp	r3, #0
 8006680:	d12c      	bne.n	80066dc <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006686:	2b01      	cmp	r3, #1
 8006688:	d125      	bne.n	80066d6 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800668a:	2300      	movs	r3, #0
 800668c:	613b      	str	r3, [r7, #16]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	613b      	str	r3, [r7, #16]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	613b      	str	r3, [r7, #16]
 800669e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	330c      	adds	r3, #12
 80066a6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	e853 3f00 	ldrex	r3, [r3]
 80066ae:	617b      	str	r3, [r7, #20]
   return(result);
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	f043 0310 	orr.w	r3, r3, #16
 80066b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	330c      	adds	r3, #12
 80066be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066c0:	627a      	str	r2, [r7, #36]	; 0x24
 80066c2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c4:	6a39      	ldr	r1, [r7, #32]
 80066c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066c8:	e841 2300 	strex	r3, r2, [r1]
 80066cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1e5      	bne.n	80066a0 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 80066d4:	e002      	b.n	80066dc <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80066dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066e0:	e000      	b.n	80066e4 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80066e2:	2302      	movs	r3, #2
  }
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3730      	adds	r7, #48	; 0x30
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b0ba      	sub	sp, #232	; 0xe8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006712:	2300      	movs	r3, #0
 8006714:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006718:	2300      	movs	r3, #0
 800671a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800671e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006722:	f003 030f 	and.w	r3, r3, #15
 8006726:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800672a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10f      	bne.n	8006752 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006736:	f003 0320 	and.w	r3, r3, #32
 800673a:	2b00      	cmp	r3, #0
 800673c:	d009      	beq.n	8006752 <HAL_UART_IRQHandler+0x66>
 800673e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006742:	f003 0320 	and.w	r3, r3, #32
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fbf7 	bl	8006f3e <UART_Receive_IT>
      return;
 8006750:	e256      	b.n	8006c00 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006752:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 80de 	beq.w	8006918 <HAL_UART_IRQHandler+0x22c>
 800675c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	2b00      	cmp	r3, #0
 8006766:	d106      	bne.n	8006776 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800676c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 80d1 	beq.w	8006918 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00b      	beq.n	800679a <HAL_UART_IRQHandler+0xae>
 8006782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800678a:	2b00      	cmp	r3, #0
 800678c:	d005      	beq.n	800679a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006792:	f043 0201 	orr.w	r2, r3, #1
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800679a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800679e:	f003 0304 	and.w	r3, r3, #4
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00b      	beq.n	80067be <HAL_UART_IRQHandler+0xd2>
 80067a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d005      	beq.n	80067be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b6:	f043 0202 	orr.w	r2, r3, #2
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00b      	beq.n	80067e2 <HAL_UART_IRQHandler+0xf6>
 80067ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d005      	beq.n	80067e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067da:	f043 0204 	orr.w	r2, r3, #4
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80067e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e6:	f003 0308 	and.w	r3, r3, #8
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d011      	beq.n	8006812 <HAL_UART_IRQHandler+0x126>
 80067ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067f2:	f003 0320 	and.w	r3, r3, #32
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d105      	bne.n	8006806 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80067fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d005      	beq.n	8006812 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680a:	f043 0208 	orr.w	r2, r3, #8
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	2b00      	cmp	r3, #0
 8006818:	f000 81ed 	beq.w	8006bf6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800681c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006820:	f003 0320 	and.w	r3, r3, #32
 8006824:	2b00      	cmp	r3, #0
 8006826:	d008      	beq.n	800683a <HAL_UART_IRQHandler+0x14e>
 8006828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800682c:	f003 0320 	and.w	r3, r3, #32
 8006830:	2b00      	cmp	r3, #0
 8006832:	d002      	beq.n	800683a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fb82 	bl	8006f3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006844:	2b40      	cmp	r3, #64	; 0x40
 8006846:	bf0c      	ite	eq
 8006848:	2301      	moveq	r3, #1
 800684a:	2300      	movne	r3, #0
 800684c:	b2db      	uxtb	r3, r3
 800684e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006856:	f003 0308 	and.w	r3, r3, #8
 800685a:	2b00      	cmp	r3, #0
 800685c:	d103      	bne.n	8006866 <HAL_UART_IRQHandler+0x17a>
 800685e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006862:	2b00      	cmp	r3, #0
 8006864:	d04f      	beq.n	8006906 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fa8a 	bl	8006d80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006876:	2b40      	cmp	r3, #64	; 0x40
 8006878:	d141      	bne.n	80068fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	3314      	adds	r3, #20
 8006880:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006884:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006888:	e853 3f00 	ldrex	r3, [r3]
 800688c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006890:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006898:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	3314      	adds	r3, #20
 80068a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80068aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80068b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80068b6:	e841 2300 	strex	r3, r2, [r1]
 80068ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80068be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1d9      	bne.n	800687a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d013      	beq.n	80068f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d2:	4a7d      	ldr	r2, [pc, #500]	; (8006ac8 <HAL_UART_IRQHandler+0x3dc>)
 80068d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068da:	4618      	mov	r0, r3
 80068dc:	f7fd f99f 	bl	8003c1e <HAL_DMA_Abort_IT>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d016      	beq.n	8006914 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80068f0:	4610      	mov	r0, r2
 80068f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f4:	e00e      	b.n	8006914 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f7fa ff20 	bl	800173c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068fc:	e00a      	b.n	8006914 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7fa ff1c 	bl	800173c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006904:	e006      	b.n	8006914 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7fa ff18 	bl	800173c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006912:	e170      	b.n	8006bf6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006914:	bf00      	nop
    return;
 8006916:	e16e      	b.n	8006bf6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691c:	2b01      	cmp	r3, #1
 800691e:	f040 814a 	bne.w	8006bb6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006926:	f003 0310 	and.w	r3, r3, #16
 800692a:	2b00      	cmp	r3, #0
 800692c:	f000 8143 	beq.w	8006bb6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006934:	f003 0310 	and.w	r3, r3, #16
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 813c 	beq.w	8006bb6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800693e:	2300      	movs	r3, #0
 8006940:	60bb      	str	r3, [r7, #8]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	60bb      	str	r3, [r7, #8]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	60bb      	str	r3, [r7, #8]
 8006952:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695e:	2b40      	cmp	r3, #64	; 0x40
 8006960:	f040 80b4 	bne.w	8006acc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006970:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006974:	2b00      	cmp	r3, #0
 8006976:	f000 8140 	beq.w	8006bfa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800697e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006982:	429a      	cmp	r2, r3
 8006984:	f080 8139 	bcs.w	8006bfa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800698e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800699a:	f000 8088 	beq.w	8006aae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	330c      	adds	r3, #12
 80069a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069ac:	e853 3f00 	ldrex	r3, [r3]
 80069b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80069b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	330c      	adds	r3, #12
 80069c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80069ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80069d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80069da:	e841 2300 	strex	r3, r2, [r1]
 80069de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80069e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1d9      	bne.n	800699e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3314      	adds	r3, #20
 80069f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069f4:	e853 3f00 	ldrex	r3, [r3]
 80069f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80069fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069fc:	f023 0301 	bic.w	r3, r3, #1
 8006a00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	3314      	adds	r3, #20
 8006a0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a1a:	e841 2300 	strex	r3, r2, [r1]
 8006a1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1e1      	bne.n	80069ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3314      	adds	r3, #20
 8006a2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a30:	e853 3f00 	ldrex	r3, [r3]
 8006a34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	3314      	adds	r3, #20
 8006a46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a52:	e841 2300 	strex	r3, r2, [r1]
 8006a56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1e3      	bne.n	8006a26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2220      	movs	r2, #32
 8006a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	330c      	adds	r3, #12
 8006a72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a76:	e853 3f00 	ldrex	r3, [r3]
 8006a7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a7e:	f023 0310 	bic.w	r3, r3, #16
 8006a82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	330c      	adds	r3, #12
 8006a8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006a90:	65ba      	str	r2, [r7, #88]	; 0x58
 8006a92:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a98:	e841 2300 	strex	r3, r2, [r1]
 8006a9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1e3      	bne.n	8006a6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7fd f848 	bl	8003b3e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	4619      	mov	r1, r3
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7fa fe2a 	bl	8001718 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ac4:	e099      	b.n	8006bfa <HAL_UART_IRQHandler+0x50e>
 8006ac6:	bf00      	nop
 8006ac8:	08006e47 	.word	0x08006e47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f000 808b 	beq.w	8006bfe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006ae8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f000 8086 	beq.w	8006bfe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	330c      	adds	r3, #12
 8006af8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afc:	e853 3f00 	ldrex	r3, [r3]
 8006b00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	330c      	adds	r3, #12
 8006b12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006b16:	647a      	str	r2, [r7, #68]	; 0x44
 8006b18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b1e:	e841 2300 	strex	r3, r2, [r1]
 8006b22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1e3      	bne.n	8006af2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3314      	adds	r3, #20
 8006b30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b34:	e853 3f00 	ldrex	r3, [r3]
 8006b38:	623b      	str	r3, [r7, #32]
   return(result);
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	f023 0301 	bic.w	r3, r3, #1
 8006b40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	3314      	adds	r3, #20
 8006b4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b4e:	633a      	str	r2, [r7, #48]	; 0x30
 8006b50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b56:	e841 2300 	strex	r3, r2, [r1]
 8006b5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1e3      	bne.n	8006b2a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	330c      	adds	r3, #12
 8006b76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	e853 3f00 	ldrex	r3, [r3]
 8006b7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f023 0310 	bic.w	r3, r3, #16
 8006b86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	330c      	adds	r3, #12
 8006b90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006b94:	61fa      	str	r2, [r7, #28]
 8006b96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b98:	69b9      	ldr	r1, [r7, #24]
 8006b9a:	69fa      	ldr	r2, [r7, #28]
 8006b9c:	e841 2300 	strex	r3, r2, [r1]
 8006ba0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1e3      	bne.n	8006b70 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ba8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bac:	4619      	mov	r1, r3
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7fa fdb2 	bl	8001718 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bb4:	e023      	b.n	8006bfe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d009      	beq.n	8006bd6 <HAL_UART_IRQHandler+0x4ea>
 8006bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f94d 	bl	8006e6e <UART_Transmit_IT>
    return;
 8006bd4:	e014      	b.n	8006c00 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00e      	beq.n	8006c00 <HAL_UART_IRQHandler+0x514>
 8006be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d008      	beq.n	8006c00 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f98d 	bl	8006f0e <UART_EndTransmit_IT>
    return;
 8006bf4:	e004      	b.n	8006c00 <HAL_UART_IRQHandler+0x514>
    return;
 8006bf6:	bf00      	nop
 8006bf8:	e002      	b.n	8006c00 <HAL_UART_IRQHandler+0x514>
      return;
 8006bfa:	bf00      	nop
 8006bfc:	e000      	b.n	8006c00 <HAL_UART_IRQHandler+0x514>
      return;
 8006bfe:	bf00      	nop
  }
}
 8006c00:	37e8      	adds	r7, #232	; 0xe8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop

08006c08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b090      	sub	sp, #64	; 0x40
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	603b      	str	r3, [r7, #0]
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c40:	e050      	b.n	8006ce4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c48:	d04c      	beq.n	8006ce4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d007      	beq.n	8006c60 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c50:	f7fc fe1a 	bl	8003888 <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d241      	bcs.n	8006ce4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	330c      	adds	r3, #12
 8006c66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6a:	e853 3f00 	ldrex	r3, [r3]
 8006c6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	330c      	adds	r3, #12
 8006c7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c80:	637a      	str	r2, [r7, #52]	; 0x34
 8006c82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c88:	e841 2300 	strex	r3, r2, [r1]
 8006c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1e5      	bne.n	8006c60 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3314      	adds	r3, #20
 8006c9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	e853 3f00 	ldrex	r3, [r3]
 8006ca2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	f023 0301 	bic.w	r3, r3, #1
 8006caa:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	3314      	adds	r3, #20
 8006cb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cb4:	623a      	str	r2, [r7, #32]
 8006cb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb8:	69f9      	ldr	r1, [r7, #28]
 8006cba:	6a3a      	ldr	r2, [r7, #32]
 8006cbc:	e841 2300 	strex	r3, r2, [r1]
 8006cc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1e5      	bne.n	8006c94 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2220      	movs	r2, #32
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e00f      	b.n	8006d04 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	4013      	ands	r3, r2
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	bf0c      	ite	eq
 8006cf4:	2301      	moveq	r3, #1
 8006cf6:	2300      	movne	r3, #0
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	79fb      	ldrb	r3, [r7, #7]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d09f      	beq.n	8006c42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3740      	adds	r7, #64	; 0x40
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	4613      	mov	r3, r2
 8006d18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	88fa      	ldrh	r2, [r7, #6]
 8006d24:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	88fa      	ldrh	r2, [r7, #6]
 8006d2a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2222      	movs	r2, #34	; 0x22
 8006d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68da      	ldr	r2, [r3, #12]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d50:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	695a      	ldr	r2, [r3, #20]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f042 0201 	orr.w	r2, r2, #1
 8006d60:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68da      	ldr	r2, [r3, #12]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f042 0220 	orr.w	r2, r2, #32
 8006d70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3714      	adds	r7, #20
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b095      	sub	sp, #84	; 0x54
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	330c      	adds	r3, #12
 8006d8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d92:	e853 3f00 	ldrex	r3, [r3]
 8006d96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	330c      	adds	r3, #12
 8006da6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006da8:	643a      	str	r2, [r7, #64]	; 0x40
 8006daa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006dae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006db0:	e841 2300 	strex	r3, r2, [r1]
 8006db4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1e5      	bne.n	8006d88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3314      	adds	r3, #20
 8006dc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	e853 3f00 	ldrex	r3, [r3]
 8006dca:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	f023 0301 	bic.w	r3, r3, #1
 8006dd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	3314      	adds	r3, #20
 8006dda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ddc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006dde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006de2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006de4:	e841 2300 	strex	r3, r2, [r1]
 8006de8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1e5      	bne.n	8006dbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d119      	bne.n	8006e2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	330c      	adds	r3, #12
 8006dfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	e853 3f00 	ldrex	r3, [r3]
 8006e06:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	f023 0310 	bic.w	r3, r3, #16
 8006e0e:	647b      	str	r3, [r7, #68]	; 0x44
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	330c      	adds	r3, #12
 8006e16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e18:	61ba      	str	r2, [r7, #24]
 8006e1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1c:	6979      	ldr	r1, [r7, #20]
 8006e1e:	69ba      	ldr	r2, [r7, #24]
 8006e20:	e841 2300 	strex	r3, r2, [r1]
 8006e24:	613b      	str	r3, [r7, #16]
   return(result);
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d1e5      	bne.n	8006df8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006e3a:	bf00      	nop
 8006e3c:	3754      	adds	r7, #84	; 0x54
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b084      	sub	sp, #16
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f7fa fc6b 	bl	800173c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e66:	bf00      	nop
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b085      	sub	sp, #20
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b21      	cmp	r3, #33	; 0x21
 8006e80:	d13e      	bne.n	8006f00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e8a:	d114      	bne.n	8006eb6 <UART_Transmit_IT+0x48>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d110      	bne.n	8006eb6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a1b      	ldr	r3, [r3, #32]
 8006e98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	881b      	ldrh	r3, [r3, #0]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ea8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	1c9a      	adds	r2, r3, #2
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	621a      	str	r2, [r3, #32]
 8006eb4:	e008      	b.n	8006ec8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	1c59      	adds	r1, r3, #1
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	6211      	str	r1, [r2, #32]
 8006ec0:	781a      	ldrb	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d10f      	bne.n	8006efc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68da      	ldr	r2, [r3, #12]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006eea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68da      	ldr	r2, [r3, #12]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006efa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006efc:	2300      	movs	r3, #0
 8006efe:	e000      	b.n	8006f02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f00:	2302      	movs	r3, #2
  }
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b082      	sub	sp, #8
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68da      	ldr	r2, [r3, #12]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2220      	movs	r2, #32
 8006f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7ff fe6a 	bl	8006c08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b08c      	sub	sp, #48	; 0x30
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b22      	cmp	r3, #34	; 0x22
 8006f50:	f040 80ab 	bne.w	80070aa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f5c:	d117      	bne.n	8006f8e <UART_Receive_IT+0x50>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d113      	bne.n	8006f8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006f66:	2300      	movs	r3, #0
 8006f68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f6e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f86:	1c9a      	adds	r2, r3, #2
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	629a      	str	r2, [r3, #40]	; 0x28
 8006f8c:	e026      	b.n	8006fdc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006f94:	2300      	movs	r3, #0
 8006f96:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fa0:	d007      	beq.n	8006fb2 <UART_Receive_IT+0x74>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10a      	bne.n	8006fc0 <UART_Receive_IT+0x82>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d106      	bne.n	8006fc0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fbc:	701a      	strb	r2, [r3, #0]
 8006fbe:	e008      	b.n	8006fd2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fcc:	b2da      	uxtb	r2, r3
 8006fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd6:	1c5a      	adds	r2, r3, #1
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	4619      	mov	r1, r3
 8006fea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d15a      	bne.n	80070a6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68da      	ldr	r2, [r3, #12]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 0220 	bic.w	r2, r2, #32
 8006ffe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68da      	ldr	r2, [r3, #12]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800700e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	695a      	ldr	r2, [r3, #20]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f022 0201 	bic.w	r2, r2, #1
 800701e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2220      	movs	r2, #32
 8007024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702c:	2b01      	cmp	r3, #1
 800702e:	d135      	bne.n	800709c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	330c      	adds	r3, #12
 800703c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	e853 3f00 	ldrex	r3, [r3]
 8007044:	613b      	str	r3, [r7, #16]
   return(result);
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	f023 0310 	bic.w	r3, r3, #16
 800704c:	627b      	str	r3, [r7, #36]	; 0x24
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	330c      	adds	r3, #12
 8007054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007056:	623a      	str	r2, [r7, #32]
 8007058:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705a:	69f9      	ldr	r1, [r7, #28]
 800705c:	6a3a      	ldr	r2, [r7, #32]
 800705e:	e841 2300 	strex	r3, r2, [r1]
 8007062:	61bb      	str	r3, [r7, #24]
   return(result);
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1e5      	bne.n	8007036 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0310 	and.w	r3, r3, #16
 8007074:	2b10      	cmp	r3, #16
 8007076:	d10a      	bne.n	800708e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007078:	2300      	movs	r3, #0
 800707a:	60fb      	str	r3, [r7, #12]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	60fb      	str	r3, [r7, #12]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	60fb      	str	r3, [r7, #12]
 800708c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007092:	4619      	mov	r1, r3
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f7fa fb3f 	bl	8001718 <HAL_UARTEx_RxEventCallback>
 800709a:	e002      	b.n	80070a2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f7ff fdbd 	bl	8006c1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80070a2:	2300      	movs	r3, #0
 80070a4:	e002      	b.n	80070ac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80070a6:	2300      	movs	r3, #0
 80070a8:	e000      	b.n	80070ac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80070aa:	2302      	movs	r3, #2
  }
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3730      	adds	r7, #48	; 0x30
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b8:	b09f      	sub	sp, #124	; 0x7c
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80070c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ca:	68d9      	ldr	r1, [r3, #12]
 80070cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	ea40 0301 	orr.w	r3, r0, r1
 80070d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070d8:	689a      	ldr	r2, [r3, #8]
 80070da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	431a      	orrs	r2, r3
 80070e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e2:	695b      	ldr	r3, [r3, #20]
 80070e4:	431a      	orrs	r2, r3
 80070e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e8:	69db      	ldr	r3, [r3, #28]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80070ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80070f8:	f021 010c 	bic.w	r1, r1, #12
 80070fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007102:	430b      	orrs	r3, r1
 8007104:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007112:	6999      	ldr	r1, [r3, #24]
 8007114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	ea40 0301 	orr.w	r3, r0, r1
 800711c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800711e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	4bc5      	ldr	r3, [pc, #788]	; (8007438 <UART_SetConfig+0x384>)
 8007124:	429a      	cmp	r2, r3
 8007126:	d004      	beq.n	8007132 <UART_SetConfig+0x7e>
 8007128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	4bc3      	ldr	r3, [pc, #780]	; (800743c <UART_SetConfig+0x388>)
 800712e:	429a      	cmp	r2, r3
 8007130:	d103      	bne.n	800713a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007132:	f7fd ffe1 	bl	80050f8 <HAL_RCC_GetPCLK2Freq>
 8007136:	6778      	str	r0, [r7, #116]	; 0x74
 8007138:	e002      	b.n	8007140 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800713a:	f7fd ffc9 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 800713e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007142:	69db      	ldr	r3, [r3, #28]
 8007144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007148:	f040 80b6 	bne.w	80072b8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800714c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800714e:	461c      	mov	r4, r3
 8007150:	f04f 0500 	mov.w	r5, #0
 8007154:	4622      	mov	r2, r4
 8007156:	462b      	mov	r3, r5
 8007158:	1891      	adds	r1, r2, r2
 800715a:	6439      	str	r1, [r7, #64]	; 0x40
 800715c:	415b      	adcs	r3, r3
 800715e:	647b      	str	r3, [r7, #68]	; 0x44
 8007160:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007164:	1912      	adds	r2, r2, r4
 8007166:	eb45 0303 	adc.w	r3, r5, r3
 800716a:	f04f 0000 	mov.w	r0, #0
 800716e:	f04f 0100 	mov.w	r1, #0
 8007172:	00d9      	lsls	r1, r3, #3
 8007174:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007178:	00d0      	lsls	r0, r2, #3
 800717a:	4602      	mov	r2, r0
 800717c:	460b      	mov	r3, r1
 800717e:	1911      	adds	r1, r2, r4
 8007180:	6639      	str	r1, [r7, #96]	; 0x60
 8007182:	416b      	adcs	r3, r5
 8007184:	667b      	str	r3, [r7, #100]	; 0x64
 8007186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	461a      	mov	r2, r3
 800718c:	f04f 0300 	mov.w	r3, #0
 8007190:	1891      	adds	r1, r2, r2
 8007192:	63b9      	str	r1, [r7, #56]	; 0x38
 8007194:	415b      	adcs	r3, r3
 8007196:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007198:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800719c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80071a0:	f7f9 fcee 	bl	8000b80 <__aeabi_uldivmod>
 80071a4:	4602      	mov	r2, r0
 80071a6:	460b      	mov	r3, r1
 80071a8:	4ba5      	ldr	r3, [pc, #660]	; (8007440 <UART_SetConfig+0x38c>)
 80071aa:	fba3 2302 	umull	r2, r3, r3, r2
 80071ae:	095b      	lsrs	r3, r3, #5
 80071b0:	011e      	lsls	r6, r3, #4
 80071b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071b4:	461c      	mov	r4, r3
 80071b6:	f04f 0500 	mov.w	r5, #0
 80071ba:	4622      	mov	r2, r4
 80071bc:	462b      	mov	r3, r5
 80071be:	1891      	adds	r1, r2, r2
 80071c0:	6339      	str	r1, [r7, #48]	; 0x30
 80071c2:	415b      	adcs	r3, r3
 80071c4:	637b      	str	r3, [r7, #52]	; 0x34
 80071c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80071ca:	1912      	adds	r2, r2, r4
 80071cc:	eb45 0303 	adc.w	r3, r5, r3
 80071d0:	f04f 0000 	mov.w	r0, #0
 80071d4:	f04f 0100 	mov.w	r1, #0
 80071d8:	00d9      	lsls	r1, r3, #3
 80071da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071de:	00d0      	lsls	r0, r2, #3
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	1911      	adds	r1, r2, r4
 80071e6:	65b9      	str	r1, [r7, #88]	; 0x58
 80071e8:	416b      	adcs	r3, r5
 80071ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	461a      	mov	r2, r3
 80071f2:	f04f 0300 	mov.w	r3, #0
 80071f6:	1891      	adds	r1, r2, r2
 80071f8:	62b9      	str	r1, [r7, #40]	; 0x28
 80071fa:	415b      	adcs	r3, r3
 80071fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007202:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007206:	f7f9 fcbb 	bl	8000b80 <__aeabi_uldivmod>
 800720a:	4602      	mov	r2, r0
 800720c:	460b      	mov	r3, r1
 800720e:	4b8c      	ldr	r3, [pc, #560]	; (8007440 <UART_SetConfig+0x38c>)
 8007210:	fba3 1302 	umull	r1, r3, r3, r2
 8007214:	095b      	lsrs	r3, r3, #5
 8007216:	2164      	movs	r1, #100	; 0x64
 8007218:	fb01 f303 	mul.w	r3, r1, r3
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	00db      	lsls	r3, r3, #3
 8007220:	3332      	adds	r3, #50	; 0x32
 8007222:	4a87      	ldr	r2, [pc, #540]	; (8007440 <UART_SetConfig+0x38c>)
 8007224:	fba2 2303 	umull	r2, r3, r2, r3
 8007228:	095b      	lsrs	r3, r3, #5
 800722a:	005b      	lsls	r3, r3, #1
 800722c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007230:	441e      	add	r6, r3
 8007232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007234:	4618      	mov	r0, r3
 8007236:	f04f 0100 	mov.w	r1, #0
 800723a:	4602      	mov	r2, r0
 800723c:	460b      	mov	r3, r1
 800723e:	1894      	adds	r4, r2, r2
 8007240:	623c      	str	r4, [r7, #32]
 8007242:	415b      	adcs	r3, r3
 8007244:	627b      	str	r3, [r7, #36]	; 0x24
 8007246:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800724a:	1812      	adds	r2, r2, r0
 800724c:	eb41 0303 	adc.w	r3, r1, r3
 8007250:	f04f 0400 	mov.w	r4, #0
 8007254:	f04f 0500 	mov.w	r5, #0
 8007258:	00dd      	lsls	r5, r3, #3
 800725a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800725e:	00d4      	lsls	r4, r2, #3
 8007260:	4622      	mov	r2, r4
 8007262:	462b      	mov	r3, r5
 8007264:	1814      	adds	r4, r2, r0
 8007266:	653c      	str	r4, [r7, #80]	; 0x50
 8007268:	414b      	adcs	r3, r1
 800726a:	657b      	str	r3, [r7, #84]	; 0x54
 800726c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	461a      	mov	r2, r3
 8007272:	f04f 0300 	mov.w	r3, #0
 8007276:	1891      	adds	r1, r2, r2
 8007278:	61b9      	str	r1, [r7, #24]
 800727a:	415b      	adcs	r3, r3
 800727c:	61fb      	str	r3, [r7, #28]
 800727e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007282:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007286:	f7f9 fc7b 	bl	8000b80 <__aeabi_uldivmod>
 800728a:	4602      	mov	r2, r0
 800728c:	460b      	mov	r3, r1
 800728e:	4b6c      	ldr	r3, [pc, #432]	; (8007440 <UART_SetConfig+0x38c>)
 8007290:	fba3 1302 	umull	r1, r3, r3, r2
 8007294:	095b      	lsrs	r3, r3, #5
 8007296:	2164      	movs	r1, #100	; 0x64
 8007298:	fb01 f303 	mul.w	r3, r1, r3
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	00db      	lsls	r3, r3, #3
 80072a0:	3332      	adds	r3, #50	; 0x32
 80072a2:	4a67      	ldr	r2, [pc, #412]	; (8007440 <UART_SetConfig+0x38c>)
 80072a4:	fba2 2303 	umull	r2, r3, r2, r3
 80072a8:	095b      	lsrs	r3, r3, #5
 80072aa:	f003 0207 	and.w	r2, r3, #7
 80072ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4432      	add	r2, r6
 80072b4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80072b6:	e0b9      	b.n	800742c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072ba:	461c      	mov	r4, r3
 80072bc:	f04f 0500 	mov.w	r5, #0
 80072c0:	4622      	mov	r2, r4
 80072c2:	462b      	mov	r3, r5
 80072c4:	1891      	adds	r1, r2, r2
 80072c6:	6139      	str	r1, [r7, #16]
 80072c8:	415b      	adcs	r3, r3
 80072ca:	617b      	str	r3, [r7, #20]
 80072cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80072d0:	1912      	adds	r2, r2, r4
 80072d2:	eb45 0303 	adc.w	r3, r5, r3
 80072d6:	f04f 0000 	mov.w	r0, #0
 80072da:	f04f 0100 	mov.w	r1, #0
 80072de:	00d9      	lsls	r1, r3, #3
 80072e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80072e4:	00d0      	lsls	r0, r2, #3
 80072e6:	4602      	mov	r2, r0
 80072e8:	460b      	mov	r3, r1
 80072ea:	eb12 0804 	adds.w	r8, r2, r4
 80072ee:	eb43 0905 	adc.w	r9, r3, r5
 80072f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f04f 0100 	mov.w	r1, #0
 80072fc:	f04f 0200 	mov.w	r2, #0
 8007300:	f04f 0300 	mov.w	r3, #0
 8007304:	008b      	lsls	r3, r1, #2
 8007306:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800730a:	0082      	lsls	r2, r0, #2
 800730c:	4640      	mov	r0, r8
 800730e:	4649      	mov	r1, r9
 8007310:	f7f9 fc36 	bl	8000b80 <__aeabi_uldivmod>
 8007314:	4602      	mov	r2, r0
 8007316:	460b      	mov	r3, r1
 8007318:	4b49      	ldr	r3, [pc, #292]	; (8007440 <UART_SetConfig+0x38c>)
 800731a:	fba3 2302 	umull	r2, r3, r3, r2
 800731e:	095b      	lsrs	r3, r3, #5
 8007320:	011e      	lsls	r6, r3, #4
 8007322:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007324:	4618      	mov	r0, r3
 8007326:	f04f 0100 	mov.w	r1, #0
 800732a:	4602      	mov	r2, r0
 800732c:	460b      	mov	r3, r1
 800732e:	1894      	adds	r4, r2, r2
 8007330:	60bc      	str	r4, [r7, #8]
 8007332:	415b      	adcs	r3, r3
 8007334:	60fb      	str	r3, [r7, #12]
 8007336:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800733a:	1812      	adds	r2, r2, r0
 800733c:	eb41 0303 	adc.w	r3, r1, r3
 8007340:	f04f 0400 	mov.w	r4, #0
 8007344:	f04f 0500 	mov.w	r5, #0
 8007348:	00dd      	lsls	r5, r3, #3
 800734a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800734e:	00d4      	lsls	r4, r2, #3
 8007350:	4622      	mov	r2, r4
 8007352:	462b      	mov	r3, r5
 8007354:	1814      	adds	r4, r2, r0
 8007356:	64bc      	str	r4, [r7, #72]	; 0x48
 8007358:	414b      	adcs	r3, r1
 800735a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800735c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	4618      	mov	r0, r3
 8007362:	f04f 0100 	mov.w	r1, #0
 8007366:	f04f 0200 	mov.w	r2, #0
 800736a:	f04f 0300 	mov.w	r3, #0
 800736e:	008b      	lsls	r3, r1, #2
 8007370:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007374:	0082      	lsls	r2, r0, #2
 8007376:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800737a:	f7f9 fc01 	bl	8000b80 <__aeabi_uldivmod>
 800737e:	4602      	mov	r2, r0
 8007380:	460b      	mov	r3, r1
 8007382:	4b2f      	ldr	r3, [pc, #188]	; (8007440 <UART_SetConfig+0x38c>)
 8007384:	fba3 1302 	umull	r1, r3, r3, r2
 8007388:	095b      	lsrs	r3, r3, #5
 800738a:	2164      	movs	r1, #100	; 0x64
 800738c:	fb01 f303 	mul.w	r3, r1, r3
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	011b      	lsls	r3, r3, #4
 8007394:	3332      	adds	r3, #50	; 0x32
 8007396:	4a2a      	ldr	r2, [pc, #168]	; (8007440 <UART_SetConfig+0x38c>)
 8007398:	fba2 2303 	umull	r2, r3, r2, r3
 800739c:	095b      	lsrs	r3, r3, #5
 800739e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073a2:	441e      	add	r6, r3
 80073a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073a6:	4618      	mov	r0, r3
 80073a8:	f04f 0100 	mov.w	r1, #0
 80073ac:	4602      	mov	r2, r0
 80073ae:	460b      	mov	r3, r1
 80073b0:	1894      	adds	r4, r2, r2
 80073b2:	603c      	str	r4, [r7, #0]
 80073b4:	415b      	adcs	r3, r3
 80073b6:	607b      	str	r3, [r7, #4]
 80073b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073bc:	1812      	adds	r2, r2, r0
 80073be:	eb41 0303 	adc.w	r3, r1, r3
 80073c2:	f04f 0400 	mov.w	r4, #0
 80073c6:	f04f 0500 	mov.w	r5, #0
 80073ca:	00dd      	lsls	r5, r3, #3
 80073cc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80073d0:	00d4      	lsls	r4, r2, #3
 80073d2:	4622      	mov	r2, r4
 80073d4:	462b      	mov	r3, r5
 80073d6:	eb12 0a00 	adds.w	sl, r2, r0
 80073da:	eb43 0b01 	adc.w	fp, r3, r1
 80073de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f04f 0100 	mov.w	r1, #0
 80073e8:	f04f 0200 	mov.w	r2, #0
 80073ec:	f04f 0300 	mov.w	r3, #0
 80073f0:	008b      	lsls	r3, r1, #2
 80073f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80073f6:	0082      	lsls	r2, r0, #2
 80073f8:	4650      	mov	r0, sl
 80073fa:	4659      	mov	r1, fp
 80073fc:	f7f9 fbc0 	bl	8000b80 <__aeabi_uldivmod>
 8007400:	4602      	mov	r2, r0
 8007402:	460b      	mov	r3, r1
 8007404:	4b0e      	ldr	r3, [pc, #56]	; (8007440 <UART_SetConfig+0x38c>)
 8007406:	fba3 1302 	umull	r1, r3, r3, r2
 800740a:	095b      	lsrs	r3, r3, #5
 800740c:	2164      	movs	r1, #100	; 0x64
 800740e:	fb01 f303 	mul.w	r3, r1, r3
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	011b      	lsls	r3, r3, #4
 8007416:	3332      	adds	r3, #50	; 0x32
 8007418:	4a09      	ldr	r2, [pc, #36]	; (8007440 <UART_SetConfig+0x38c>)
 800741a:	fba2 2303 	umull	r2, r3, r2, r3
 800741e:	095b      	lsrs	r3, r3, #5
 8007420:	f003 020f 	and.w	r2, r3, #15
 8007424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4432      	add	r2, r6
 800742a:	609a      	str	r2, [r3, #8]
}
 800742c:	bf00      	nop
 800742e:	377c      	adds	r7, #124	; 0x7c
 8007430:	46bd      	mov	sp, r7
 8007432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007436:	bf00      	nop
 8007438:	40011000 	.word	0x40011000
 800743c:	40011400 	.word	0x40011400
 8007440:	51eb851f 	.word	0x51eb851f

08007444 <__errno>:
 8007444:	4b01      	ldr	r3, [pc, #4]	; (800744c <__errno+0x8>)
 8007446:	6818      	ldr	r0, [r3, #0]
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	20000010 	.word	0x20000010

08007450 <__libc_init_array>:
 8007450:	b570      	push	{r4, r5, r6, lr}
 8007452:	4d0d      	ldr	r5, [pc, #52]	; (8007488 <__libc_init_array+0x38>)
 8007454:	4c0d      	ldr	r4, [pc, #52]	; (800748c <__libc_init_array+0x3c>)
 8007456:	1b64      	subs	r4, r4, r5
 8007458:	10a4      	asrs	r4, r4, #2
 800745a:	2600      	movs	r6, #0
 800745c:	42a6      	cmp	r6, r4
 800745e:	d109      	bne.n	8007474 <__libc_init_array+0x24>
 8007460:	4d0b      	ldr	r5, [pc, #44]	; (8007490 <__libc_init_array+0x40>)
 8007462:	4c0c      	ldr	r4, [pc, #48]	; (8007494 <__libc_init_array+0x44>)
 8007464:	f001 f83e 	bl	80084e4 <_init>
 8007468:	1b64      	subs	r4, r4, r5
 800746a:	10a4      	asrs	r4, r4, #2
 800746c:	2600      	movs	r6, #0
 800746e:	42a6      	cmp	r6, r4
 8007470:	d105      	bne.n	800747e <__libc_init_array+0x2e>
 8007472:	bd70      	pop	{r4, r5, r6, pc}
 8007474:	f855 3b04 	ldr.w	r3, [r5], #4
 8007478:	4798      	blx	r3
 800747a:	3601      	adds	r6, #1
 800747c:	e7ee      	b.n	800745c <__libc_init_array+0xc>
 800747e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007482:	4798      	blx	r3
 8007484:	3601      	adds	r6, #1
 8007486:	e7f2      	b.n	800746e <__libc_init_array+0x1e>
 8007488:	08008780 	.word	0x08008780
 800748c:	08008780 	.word	0x08008780
 8007490:	08008780 	.word	0x08008780
 8007494:	08008784 	.word	0x08008784

08007498 <__itoa>:
 8007498:	1e93      	subs	r3, r2, #2
 800749a:	2b22      	cmp	r3, #34	; 0x22
 800749c:	b510      	push	{r4, lr}
 800749e:	460c      	mov	r4, r1
 80074a0:	d904      	bls.n	80074ac <__itoa+0x14>
 80074a2:	2300      	movs	r3, #0
 80074a4:	700b      	strb	r3, [r1, #0]
 80074a6:	461c      	mov	r4, r3
 80074a8:	4620      	mov	r0, r4
 80074aa:	bd10      	pop	{r4, pc}
 80074ac:	2a0a      	cmp	r2, #10
 80074ae:	d109      	bne.n	80074c4 <__itoa+0x2c>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	da07      	bge.n	80074c4 <__itoa+0x2c>
 80074b4:	232d      	movs	r3, #45	; 0x2d
 80074b6:	700b      	strb	r3, [r1, #0]
 80074b8:	4240      	negs	r0, r0
 80074ba:	2101      	movs	r1, #1
 80074bc:	4421      	add	r1, r4
 80074be:	f000 f81b 	bl	80074f8 <__utoa>
 80074c2:	e7f1      	b.n	80074a8 <__itoa+0x10>
 80074c4:	2100      	movs	r1, #0
 80074c6:	e7f9      	b.n	80074bc <__itoa+0x24>

080074c8 <itoa>:
 80074c8:	f7ff bfe6 	b.w	8007498 <__itoa>

080074cc <memcpy>:
 80074cc:	440a      	add	r2, r1
 80074ce:	4291      	cmp	r1, r2
 80074d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80074d4:	d100      	bne.n	80074d8 <memcpy+0xc>
 80074d6:	4770      	bx	lr
 80074d8:	b510      	push	{r4, lr}
 80074da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074e2:	4291      	cmp	r1, r2
 80074e4:	d1f9      	bne.n	80074da <memcpy+0xe>
 80074e6:	bd10      	pop	{r4, pc}

080074e8 <memset>:
 80074e8:	4402      	add	r2, r0
 80074ea:	4603      	mov	r3, r0
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d100      	bne.n	80074f2 <memset+0xa>
 80074f0:	4770      	bx	lr
 80074f2:	f803 1b01 	strb.w	r1, [r3], #1
 80074f6:	e7f9      	b.n	80074ec <memset+0x4>

080074f8 <__utoa>:
 80074f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074fa:	4c1f      	ldr	r4, [pc, #124]	; (8007578 <__utoa+0x80>)
 80074fc:	b08b      	sub	sp, #44	; 0x2c
 80074fe:	4605      	mov	r5, r0
 8007500:	460b      	mov	r3, r1
 8007502:	466e      	mov	r6, sp
 8007504:	f104 0c20 	add.w	ip, r4, #32
 8007508:	6820      	ldr	r0, [r4, #0]
 800750a:	6861      	ldr	r1, [r4, #4]
 800750c:	4637      	mov	r7, r6
 800750e:	c703      	stmia	r7!, {r0, r1}
 8007510:	3408      	adds	r4, #8
 8007512:	4564      	cmp	r4, ip
 8007514:	463e      	mov	r6, r7
 8007516:	d1f7      	bne.n	8007508 <__utoa+0x10>
 8007518:	7921      	ldrb	r1, [r4, #4]
 800751a:	7139      	strb	r1, [r7, #4]
 800751c:	1e91      	subs	r1, r2, #2
 800751e:	6820      	ldr	r0, [r4, #0]
 8007520:	6038      	str	r0, [r7, #0]
 8007522:	2922      	cmp	r1, #34	; 0x22
 8007524:	f04f 0100 	mov.w	r1, #0
 8007528:	d904      	bls.n	8007534 <__utoa+0x3c>
 800752a:	7019      	strb	r1, [r3, #0]
 800752c:	460b      	mov	r3, r1
 800752e:	4618      	mov	r0, r3
 8007530:	b00b      	add	sp, #44	; 0x2c
 8007532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007534:	1e58      	subs	r0, r3, #1
 8007536:	4684      	mov	ip, r0
 8007538:	fbb5 f7f2 	udiv	r7, r5, r2
 800753c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8007540:	fb02 5617 	mls	r6, r2, r7, r5
 8007544:	4476      	add	r6, lr
 8007546:	460c      	mov	r4, r1
 8007548:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800754c:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007550:	462e      	mov	r6, r5
 8007552:	42b2      	cmp	r2, r6
 8007554:	f101 0101 	add.w	r1, r1, #1
 8007558:	463d      	mov	r5, r7
 800755a:	d9ed      	bls.n	8007538 <__utoa+0x40>
 800755c:	2200      	movs	r2, #0
 800755e:	545a      	strb	r2, [r3, r1]
 8007560:	1919      	adds	r1, r3, r4
 8007562:	1aa5      	subs	r5, r4, r2
 8007564:	42aa      	cmp	r2, r5
 8007566:	dae2      	bge.n	800752e <__utoa+0x36>
 8007568:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800756c:	780e      	ldrb	r6, [r1, #0]
 800756e:	7006      	strb	r6, [r0, #0]
 8007570:	3201      	adds	r2, #1
 8007572:	f801 5901 	strb.w	r5, [r1], #-1
 8007576:	e7f4      	b.n	8007562 <__utoa+0x6a>
 8007578:	08008710 	.word	0x08008710

0800757c <pow>:
 800757c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007580:	ec59 8b10 	vmov	r8, r9, d0
 8007584:	ec57 6b11 	vmov	r6, r7, d1
 8007588:	f000 f8a6 	bl	80076d8 <__ieee754_pow>
 800758c:	4b4e      	ldr	r3, [pc, #312]	; (80076c8 <pow+0x14c>)
 800758e:	f993 3000 	ldrsb.w	r3, [r3]
 8007592:	3301      	adds	r3, #1
 8007594:	ec55 4b10 	vmov	r4, r5, d0
 8007598:	d015      	beq.n	80075c6 <pow+0x4a>
 800759a:	4632      	mov	r2, r6
 800759c:	463b      	mov	r3, r7
 800759e:	4630      	mov	r0, r6
 80075a0:	4639      	mov	r1, r7
 80075a2:	f7f9 fa87 	bl	8000ab4 <__aeabi_dcmpun>
 80075a6:	b970      	cbnz	r0, 80075c6 <pow+0x4a>
 80075a8:	4642      	mov	r2, r8
 80075aa:	464b      	mov	r3, r9
 80075ac:	4640      	mov	r0, r8
 80075ae:	4649      	mov	r1, r9
 80075b0:	f7f9 fa80 	bl	8000ab4 <__aeabi_dcmpun>
 80075b4:	2200      	movs	r2, #0
 80075b6:	2300      	movs	r3, #0
 80075b8:	b148      	cbz	r0, 80075ce <pow+0x52>
 80075ba:	4630      	mov	r0, r6
 80075bc:	4639      	mov	r1, r7
 80075be:	f7f9 fa47 	bl	8000a50 <__aeabi_dcmpeq>
 80075c2:	2800      	cmp	r0, #0
 80075c4:	d17d      	bne.n	80076c2 <pow+0x146>
 80075c6:	ec45 4b10 	vmov	d0, r4, r5
 80075ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075ce:	4640      	mov	r0, r8
 80075d0:	4649      	mov	r1, r9
 80075d2:	f7f9 fa3d 	bl	8000a50 <__aeabi_dcmpeq>
 80075d6:	b1e0      	cbz	r0, 8007612 <pow+0x96>
 80075d8:	2200      	movs	r2, #0
 80075da:	2300      	movs	r3, #0
 80075dc:	4630      	mov	r0, r6
 80075de:	4639      	mov	r1, r7
 80075e0:	f7f9 fa36 	bl	8000a50 <__aeabi_dcmpeq>
 80075e4:	2800      	cmp	r0, #0
 80075e6:	d16c      	bne.n	80076c2 <pow+0x146>
 80075e8:	ec47 6b10 	vmov	d0, r6, r7
 80075ec:	f000 fe53 	bl	8008296 <finite>
 80075f0:	2800      	cmp	r0, #0
 80075f2:	d0e8      	beq.n	80075c6 <pow+0x4a>
 80075f4:	2200      	movs	r2, #0
 80075f6:	2300      	movs	r3, #0
 80075f8:	4630      	mov	r0, r6
 80075fa:	4639      	mov	r1, r7
 80075fc:	f7f9 fa32 	bl	8000a64 <__aeabi_dcmplt>
 8007600:	2800      	cmp	r0, #0
 8007602:	d0e0      	beq.n	80075c6 <pow+0x4a>
 8007604:	f7ff ff1e 	bl	8007444 <__errno>
 8007608:	2321      	movs	r3, #33	; 0x21
 800760a:	6003      	str	r3, [r0, #0]
 800760c:	2400      	movs	r4, #0
 800760e:	4d2f      	ldr	r5, [pc, #188]	; (80076cc <pow+0x150>)
 8007610:	e7d9      	b.n	80075c6 <pow+0x4a>
 8007612:	ec45 4b10 	vmov	d0, r4, r5
 8007616:	f000 fe3e 	bl	8008296 <finite>
 800761a:	bbb8      	cbnz	r0, 800768c <pow+0x110>
 800761c:	ec49 8b10 	vmov	d0, r8, r9
 8007620:	f000 fe39 	bl	8008296 <finite>
 8007624:	b390      	cbz	r0, 800768c <pow+0x110>
 8007626:	ec47 6b10 	vmov	d0, r6, r7
 800762a:	f000 fe34 	bl	8008296 <finite>
 800762e:	b368      	cbz	r0, 800768c <pow+0x110>
 8007630:	4622      	mov	r2, r4
 8007632:	462b      	mov	r3, r5
 8007634:	4620      	mov	r0, r4
 8007636:	4629      	mov	r1, r5
 8007638:	f7f9 fa3c 	bl	8000ab4 <__aeabi_dcmpun>
 800763c:	b160      	cbz	r0, 8007658 <pow+0xdc>
 800763e:	f7ff ff01 	bl	8007444 <__errno>
 8007642:	2321      	movs	r3, #33	; 0x21
 8007644:	6003      	str	r3, [r0, #0]
 8007646:	2200      	movs	r2, #0
 8007648:	2300      	movs	r3, #0
 800764a:	4610      	mov	r0, r2
 800764c:	4619      	mov	r1, r3
 800764e:	f7f9 f8c1 	bl	80007d4 <__aeabi_ddiv>
 8007652:	4604      	mov	r4, r0
 8007654:	460d      	mov	r5, r1
 8007656:	e7b6      	b.n	80075c6 <pow+0x4a>
 8007658:	f7ff fef4 	bl	8007444 <__errno>
 800765c:	2322      	movs	r3, #34	; 0x22
 800765e:	6003      	str	r3, [r0, #0]
 8007660:	2200      	movs	r2, #0
 8007662:	2300      	movs	r3, #0
 8007664:	4640      	mov	r0, r8
 8007666:	4649      	mov	r1, r9
 8007668:	f7f9 f9fc 	bl	8000a64 <__aeabi_dcmplt>
 800766c:	2400      	movs	r4, #0
 800766e:	b158      	cbz	r0, 8007688 <pow+0x10c>
 8007670:	ec47 6b10 	vmov	d0, r6, r7
 8007674:	f000 fe24 	bl	80082c0 <rint>
 8007678:	4632      	mov	r2, r6
 800767a:	ec51 0b10 	vmov	r0, r1, d0
 800767e:	463b      	mov	r3, r7
 8007680:	f7f9 f9e6 	bl	8000a50 <__aeabi_dcmpeq>
 8007684:	2800      	cmp	r0, #0
 8007686:	d0c2      	beq.n	800760e <pow+0x92>
 8007688:	4d11      	ldr	r5, [pc, #68]	; (80076d0 <pow+0x154>)
 800768a:	e79c      	b.n	80075c6 <pow+0x4a>
 800768c:	2200      	movs	r2, #0
 800768e:	2300      	movs	r3, #0
 8007690:	4620      	mov	r0, r4
 8007692:	4629      	mov	r1, r5
 8007694:	f7f9 f9dc 	bl	8000a50 <__aeabi_dcmpeq>
 8007698:	2800      	cmp	r0, #0
 800769a:	d094      	beq.n	80075c6 <pow+0x4a>
 800769c:	ec49 8b10 	vmov	d0, r8, r9
 80076a0:	f000 fdf9 	bl	8008296 <finite>
 80076a4:	2800      	cmp	r0, #0
 80076a6:	d08e      	beq.n	80075c6 <pow+0x4a>
 80076a8:	ec47 6b10 	vmov	d0, r6, r7
 80076ac:	f000 fdf3 	bl	8008296 <finite>
 80076b0:	2800      	cmp	r0, #0
 80076b2:	d088      	beq.n	80075c6 <pow+0x4a>
 80076b4:	f7ff fec6 	bl	8007444 <__errno>
 80076b8:	2322      	movs	r3, #34	; 0x22
 80076ba:	6003      	str	r3, [r0, #0]
 80076bc:	2400      	movs	r4, #0
 80076be:	2500      	movs	r5, #0
 80076c0:	e781      	b.n	80075c6 <pow+0x4a>
 80076c2:	4d04      	ldr	r5, [pc, #16]	; (80076d4 <pow+0x158>)
 80076c4:	2400      	movs	r4, #0
 80076c6:	e77e      	b.n	80075c6 <pow+0x4a>
 80076c8:	20000074 	.word	0x20000074
 80076cc:	fff00000 	.word	0xfff00000
 80076d0:	7ff00000 	.word	0x7ff00000
 80076d4:	3ff00000 	.word	0x3ff00000

080076d8 <__ieee754_pow>:
 80076d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076dc:	ed2d 8b06 	vpush	{d8-d10}
 80076e0:	b08d      	sub	sp, #52	; 0x34
 80076e2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80076e6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80076ea:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80076ee:	ea56 0100 	orrs.w	r1, r6, r0
 80076f2:	ec53 2b10 	vmov	r2, r3, d0
 80076f6:	f000 84d1 	beq.w	800809c <__ieee754_pow+0x9c4>
 80076fa:	497f      	ldr	r1, [pc, #508]	; (80078f8 <__ieee754_pow+0x220>)
 80076fc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8007700:	428c      	cmp	r4, r1
 8007702:	ee10 8a10 	vmov	r8, s0
 8007706:	4699      	mov	r9, r3
 8007708:	dc09      	bgt.n	800771e <__ieee754_pow+0x46>
 800770a:	d103      	bne.n	8007714 <__ieee754_pow+0x3c>
 800770c:	b97a      	cbnz	r2, 800772e <__ieee754_pow+0x56>
 800770e:	42a6      	cmp	r6, r4
 8007710:	dd02      	ble.n	8007718 <__ieee754_pow+0x40>
 8007712:	e00c      	b.n	800772e <__ieee754_pow+0x56>
 8007714:	428e      	cmp	r6, r1
 8007716:	dc02      	bgt.n	800771e <__ieee754_pow+0x46>
 8007718:	428e      	cmp	r6, r1
 800771a:	d110      	bne.n	800773e <__ieee754_pow+0x66>
 800771c:	b178      	cbz	r0, 800773e <__ieee754_pow+0x66>
 800771e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007722:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007726:	ea54 0308 	orrs.w	r3, r4, r8
 800772a:	f000 84b7 	beq.w	800809c <__ieee754_pow+0x9c4>
 800772e:	4873      	ldr	r0, [pc, #460]	; (80078fc <__ieee754_pow+0x224>)
 8007730:	b00d      	add	sp, #52	; 0x34
 8007732:	ecbd 8b06 	vpop	{d8-d10}
 8007736:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773a:	f000 bdb9 	b.w	80082b0 <nan>
 800773e:	f1b9 0f00 	cmp.w	r9, #0
 8007742:	da36      	bge.n	80077b2 <__ieee754_pow+0xda>
 8007744:	496e      	ldr	r1, [pc, #440]	; (8007900 <__ieee754_pow+0x228>)
 8007746:	428e      	cmp	r6, r1
 8007748:	dc51      	bgt.n	80077ee <__ieee754_pow+0x116>
 800774a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800774e:	428e      	cmp	r6, r1
 8007750:	f340 84af 	ble.w	80080b2 <__ieee754_pow+0x9da>
 8007754:	1531      	asrs	r1, r6, #20
 8007756:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800775a:	2914      	cmp	r1, #20
 800775c:	dd0f      	ble.n	800777e <__ieee754_pow+0xa6>
 800775e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8007762:	fa20 fc01 	lsr.w	ip, r0, r1
 8007766:	fa0c f101 	lsl.w	r1, ip, r1
 800776a:	4281      	cmp	r1, r0
 800776c:	f040 84a1 	bne.w	80080b2 <__ieee754_pow+0x9da>
 8007770:	f00c 0c01 	and.w	ip, ip, #1
 8007774:	f1cc 0102 	rsb	r1, ip, #2
 8007778:	9100      	str	r1, [sp, #0]
 800777a:	b180      	cbz	r0, 800779e <__ieee754_pow+0xc6>
 800777c:	e059      	b.n	8007832 <__ieee754_pow+0x15a>
 800777e:	2800      	cmp	r0, #0
 8007780:	d155      	bne.n	800782e <__ieee754_pow+0x156>
 8007782:	f1c1 0114 	rsb	r1, r1, #20
 8007786:	fa46 fc01 	asr.w	ip, r6, r1
 800778a:	fa0c f101 	lsl.w	r1, ip, r1
 800778e:	42b1      	cmp	r1, r6
 8007790:	f040 848c 	bne.w	80080ac <__ieee754_pow+0x9d4>
 8007794:	f00c 0c01 	and.w	ip, ip, #1
 8007798:	f1cc 0102 	rsb	r1, ip, #2
 800779c:	9100      	str	r1, [sp, #0]
 800779e:	4959      	ldr	r1, [pc, #356]	; (8007904 <__ieee754_pow+0x22c>)
 80077a0:	428e      	cmp	r6, r1
 80077a2:	d12d      	bne.n	8007800 <__ieee754_pow+0x128>
 80077a4:	2f00      	cmp	r7, #0
 80077a6:	da79      	bge.n	800789c <__ieee754_pow+0x1c4>
 80077a8:	4956      	ldr	r1, [pc, #344]	; (8007904 <__ieee754_pow+0x22c>)
 80077aa:	2000      	movs	r0, #0
 80077ac:	f7f9 f812 	bl	80007d4 <__aeabi_ddiv>
 80077b0:	e016      	b.n	80077e0 <__ieee754_pow+0x108>
 80077b2:	2100      	movs	r1, #0
 80077b4:	9100      	str	r1, [sp, #0]
 80077b6:	2800      	cmp	r0, #0
 80077b8:	d13b      	bne.n	8007832 <__ieee754_pow+0x15a>
 80077ba:	494f      	ldr	r1, [pc, #316]	; (80078f8 <__ieee754_pow+0x220>)
 80077bc:	428e      	cmp	r6, r1
 80077be:	d1ee      	bne.n	800779e <__ieee754_pow+0xc6>
 80077c0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80077c4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80077c8:	ea53 0308 	orrs.w	r3, r3, r8
 80077cc:	f000 8466 	beq.w	800809c <__ieee754_pow+0x9c4>
 80077d0:	4b4d      	ldr	r3, [pc, #308]	; (8007908 <__ieee754_pow+0x230>)
 80077d2:	429c      	cmp	r4, r3
 80077d4:	dd0d      	ble.n	80077f2 <__ieee754_pow+0x11a>
 80077d6:	2f00      	cmp	r7, #0
 80077d8:	f280 8464 	bge.w	80080a4 <__ieee754_pow+0x9cc>
 80077dc:	2000      	movs	r0, #0
 80077de:	2100      	movs	r1, #0
 80077e0:	ec41 0b10 	vmov	d0, r0, r1
 80077e4:	b00d      	add	sp, #52	; 0x34
 80077e6:	ecbd 8b06 	vpop	{d8-d10}
 80077ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ee:	2102      	movs	r1, #2
 80077f0:	e7e0      	b.n	80077b4 <__ieee754_pow+0xdc>
 80077f2:	2f00      	cmp	r7, #0
 80077f4:	daf2      	bge.n	80077dc <__ieee754_pow+0x104>
 80077f6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80077fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80077fe:	e7ef      	b.n	80077e0 <__ieee754_pow+0x108>
 8007800:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8007804:	d104      	bne.n	8007810 <__ieee754_pow+0x138>
 8007806:	4610      	mov	r0, r2
 8007808:	4619      	mov	r1, r3
 800780a:	f7f8 feb9 	bl	8000580 <__aeabi_dmul>
 800780e:	e7e7      	b.n	80077e0 <__ieee754_pow+0x108>
 8007810:	493e      	ldr	r1, [pc, #248]	; (800790c <__ieee754_pow+0x234>)
 8007812:	428f      	cmp	r7, r1
 8007814:	d10d      	bne.n	8007832 <__ieee754_pow+0x15a>
 8007816:	f1b9 0f00 	cmp.w	r9, #0
 800781a:	db0a      	blt.n	8007832 <__ieee754_pow+0x15a>
 800781c:	ec43 2b10 	vmov	d0, r2, r3
 8007820:	b00d      	add	sp, #52	; 0x34
 8007822:	ecbd 8b06 	vpop	{d8-d10}
 8007826:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800782a:	f000 bc77 	b.w	800811c <__ieee754_sqrt>
 800782e:	2100      	movs	r1, #0
 8007830:	9100      	str	r1, [sp, #0]
 8007832:	ec43 2b10 	vmov	d0, r2, r3
 8007836:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800783a:	f000 fd23 	bl	8008284 <fabs>
 800783e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007842:	ec51 0b10 	vmov	r0, r1, d0
 8007846:	f1b8 0f00 	cmp.w	r8, #0
 800784a:	d12a      	bne.n	80078a2 <__ieee754_pow+0x1ca>
 800784c:	b12c      	cbz	r4, 800785a <__ieee754_pow+0x182>
 800784e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8007904 <__ieee754_pow+0x22c>
 8007852:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8007856:	45e6      	cmp	lr, ip
 8007858:	d123      	bne.n	80078a2 <__ieee754_pow+0x1ca>
 800785a:	2f00      	cmp	r7, #0
 800785c:	da05      	bge.n	800786a <__ieee754_pow+0x192>
 800785e:	4602      	mov	r2, r0
 8007860:	460b      	mov	r3, r1
 8007862:	2000      	movs	r0, #0
 8007864:	4927      	ldr	r1, [pc, #156]	; (8007904 <__ieee754_pow+0x22c>)
 8007866:	f7f8 ffb5 	bl	80007d4 <__aeabi_ddiv>
 800786a:	f1b9 0f00 	cmp.w	r9, #0
 800786e:	dab7      	bge.n	80077e0 <__ieee754_pow+0x108>
 8007870:	9b00      	ldr	r3, [sp, #0]
 8007872:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007876:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800787a:	4323      	orrs	r3, r4
 800787c:	d108      	bne.n	8007890 <__ieee754_pow+0x1b8>
 800787e:	4602      	mov	r2, r0
 8007880:	460b      	mov	r3, r1
 8007882:	4610      	mov	r0, r2
 8007884:	4619      	mov	r1, r3
 8007886:	f7f8 fcc3 	bl	8000210 <__aeabi_dsub>
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	e78d      	b.n	80077ac <__ieee754_pow+0xd4>
 8007890:	9b00      	ldr	r3, [sp, #0]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d1a4      	bne.n	80077e0 <__ieee754_pow+0x108>
 8007896:	4602      	mov	r2, r0
 8007898:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800789c:	4610      	mov	r0, r2
 800789e:	4619      	mov	r1, r3
 80078a0:	e79e      	b.n	80077e0 <__ieee754_pow+0x108>
 80078a2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80078a6:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 80078aa:	950a      	str	r5, [sp, #40]	; 0x28
 80078ac:	9d00      	ldr	r5, [sp, #0]
 80078ae:	46ac      	mov	ip, r5
 80078b0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80078b2:	ea5c 0505 	orrs.w	r5, ip, r5
 80078b6:	d0e4      	beq.n	8007882 <__ieee754_pow+0x1aa>
 80078b8:	4b15      	ldr	r3, [pc, #84]	; (8007910 <__ieee754_pow+0x238>)
 80078ba:	429e      	cmp	r6, r3
 80078bc:	f340 80fc 	ble.w	8007ab8 <__ieee754_pow+0x3e0>
 80078c0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80078c4:	429e      	cmp	r6, r3
 80078c6:	4b10      	ldr	r3, [pc, #64]	; (8007908 <__ieee754_pow+0x230>)
 80078c8:	dd07      	ble.n	80078da <__ieee754_pow+0x202>
 80078ca:	429c      	cmp	r4, r3
 80078cc:	dc0a      	bgt.n	80078e4 <__ieee754_pow+0x20c>
 80078ce:	2f00      	cmp	r7, #0
 80078d0:	da84      	bge.n	80077dc <__ieee754_pow+0x104>
 80078d2:	a307      	add	r3, pc, #28	; (adr r3, 80078f0 <__ieee754_pow+0x218>)
 80078d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d8:	e795      	b.n	8007806 <__ieee754_pow+0x12e>
 80078da:	429c      	cmp	r4, r3
 80078dc:	dbf7      	blt.n	80078ce <__ieee754_pow+0x1f6>
 80078de:	4b09      	ldr	r3, [pc, #36]	; (8007904 <__ieee754_pow+0x22c>)
 80078e0:	429c      	cmp	r4, r3
 80078e2:	dd17      	ble.n	8007914 <__ieee754_pow+0x23c>
 80078e4:	2f00      	cmp	r7, #0
 80078e6:	dcf4      	bgt.n	80078d2 <__ieee754_pow+0x1fa>
 80078e8:	e778      	b.n	80077dc <__ieee754_pow+0x104>
 80078ea:	bf00      	nop
 80078ec:	f3af 8000 	nop.w
 80078f0:	8800759c 	.word	0x8800759c
 80078f4:	7e37e43c 	.word	0x7e37e43c
 80078f8:	7ff00000 	.word	0x7ff00000
 80078fc:	08008734 	.word	0x08008734
 8007900:	433fffff 	.word	0x433fffff
 8007904:	3ff00000 	.word	0x3ff00000
 8007908:	3fefffff 	.word	0x3fefffff
 800790c:	3fe00000 	.word	0x3fe00000
 8007910:	41e00000 	.word	0x41e00000
 8007914:	4b64      	ldr	r3, [pc, #400]	; (8007aa8 <__ieee754_pow+0x3d0>)
 8007916:	2200      	movs	r2, #0
 8007918:	f7f8 fc7a 	bl	8000210 <__aeabi_dsub>
 800791c:	a356      	add	r3, pc, #344	; (adr r3, 8007a78 <__ieee754_pow+0x3a0>)
 800791e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007922:	4604      	mov	r4, r0
 8007924:	460d      	mov	r5, r1
 8007926:	f7f8 fe2b 	bl	8000580 <__aeabi_dmul>
 800792a:	a355      	add	r3, pc, #340	; (adr r3, 8007a80 <__ieee754_pow+0x3a8>)
 800792c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007930:	4606      	mov	r6, r0
 8007932:	460f      	mov	r7, r1
 8007934:	4620      	mov	r0, r4
 8007936:	4629      	mov	r1, r5
 8007938:	f7f8 fe22 	bl	8000580 <__aeabi_dmul>
 800793c:	4b5b      	ldr	r3, [pc, #364]	; (8007aac <__ieee754_pow+0x3d4>)
 800793e:	4682      	mov	sl, r0
 8007940:	468b      	mov	fp, r1
 8007942:	2200      	movs	r2, #0
 8007944:	4620      	mov	r0, r4
 8007946:	4629      	mov	r1, r5
 8007948:	f7f8 fe1a 	bl	8000580 <__aeabi_dmul>
 800794c:	4602      	mov	r2, r0
 800794e:	460b      	mov	r3, r1
 8007950:	a14d      	add	r1, pc, #308	; (adr r1, 8007a88 <__ieee754_pow+0x3b0>)
 8007952:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007956:	f7f8 fc5b 	bl	8000210 <__aeabi_dsub>
 800795a:	4622      	mov	r2, r4
 800795c:	462b      	mov	r3, r5
 800795e:	f7f8 fe0f 	bl	8000580 <__aeabi_dmul>
 8007962:	4602      	mov	r2, r0
 8007964:	460b      	mov	r3, r1
 8007966:	2000      	movs	r0, #0
 8007968:	4951      	ldr	r1, [pc, #324]	; (8007ab0 <__ieee754_pow+0x3d8>)
 800796a:	f7f8 fc51 	bl	8000210 <__aeabi_dsub>
 800796e:	4622      	mov	r2, r4
 8007970:	4680      	mov	r8, r0
 8007972:	4689      	mov	r9, r1
 8007974:	462b      	mov	r3, r5
 8007976:	4620      	mov	r0, r4
 8007978:	4629      	mov	r1, r5
 800797a:	f7f8 fe01 	bl	8000580 <__aeabi_dmul>
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	4640      	mov	r0, r8
 8007984:	4649      	mov	r1, r9
 8007986:	f7f8 fdfb 	bl	8000580 <__aeabi_dmul>
 800798a:	a341      	add	r3, pc, #260	; (adr r3, 8007a90 <__ieee754_pow+0x3b8>)
 800798c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007990:	f7f8 fdf6 	bl	8000580 <__aeabi_dmul>
 8007994:	4602      	mov	r2, r0
 8007996:	460b      	mov	r3, r1
 8007998:	4650      	mov	r0, sl
 800799a:	4659      	mov	r1, fp
 800799c:	f7f8 fc38 	bl	8000210 <__aeabi_dsub>
 80079a0:	4602      	mov	r2, r0
 80079a2:	460b      	mov	r3, r1
 80079a4:	4680      	mov	r8, r0
 80079a6:	4689      	mov	r9, r1
 80079a8:	4630      	mov	r0, r6
 80079aa:	4639      	mov	r1, r7
 80079ac:	f7f8 fc32 	bl	8000214 <__adddf3>
 80079b0:	2400      	movs	r4, #0
 80079b2:	4632      	mov	r2, r6
 80079b4:	463b      	mov	r3, r7
 80079b6:	4620      	mov	r0, r4
 80079b8:	460d      	mov	r5, r1
 80079ba:	f7f8 fc29 	bl	8000210 <__aeabi_dsub>
 80079be:	4602      	mov	r2, r0
 80079c0:	460b      	mov	r3, r1
 80079c2:	4640      	mov	r0, r8
 80079c4:	4649      	mov	r1, r9
 80079c6:	f7f8 fc23 	bl	8000210 <__aeabi_dsub>
 80079ca:	9b00      	ldr	r3, [sp, #0]
 80079cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079ce:	3b01      	subs	r3, #1
 80079d0:	4313      	orrs	r3, r2
 80079d2:	4682      	mov	sl, r0
 80079d4:	468b      	mov	fp, r1
 80079d6:	f040 81f1 	bne.w	8007dbc <__ieee754_pow+0x6e4>
 80079da:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8007a98 <__ieee754_pow+0x3c0>
 80079de:	eeb0 8a47 	vmov.f32	s16, s14
 80079e2:	eef0 8a67 	vmov.f32	s17, s15
 80079e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80079ea:	2600      	movs	r6, #0
 80079ec:	4632      	mov	r2, r6
 80079ee:	463b      	mov	r3, r7
 80079f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079f4:	f7f8 fc0c 	bl	8000210 <__aeabi_dsub>
 80079f8:	4622      	mov	r2, r4
 80079fa:	462b      	mov	r3, r5
 80079fc:	f7f8 fdc0 	bl	8000580 <__aeabi_dmul>
 8007a00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a04:	4680      	mov	r8, r0
 8007a06:	4689      	mov	r9, r1
 8007a08:	4650      	mov	r0, sl
 8007a0a:	4659      	mov	r1, fp
 8007a0c:	f7f8 fdb8 	bl	8000580 <__aeabi_dmul>
 8007a10:	4602      	mov	r2, r0
 8007a12:	460b      	mov	r3, r1
 8007a14:	4640      	mov	r0, r8
 8007a16:	4649      	mov	r1, r9
 8007a18:	f7f8 fbfc 	bl	8000214 <__adddf3>
 8007a1c:	4632      	mov	r2, r6
 8007a1e:	463b      	mov	r3, r7
 8007a20:	4680      	mov	r8, r0
 8007a22:	4689      	mov	r9, r1
 8007a24:	4620      	mov	r0, r4
 8007a26:	4629      	mov	r1, r5
 8007a28:	f7f8 fdaa 	bl	8000580 <__aeabi_dmul>
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	4604      	mov	r4, r0
 8007a30:	460d      	mov	r5, r1
 8007a32:	4602      	mov	r2, r0
 8007a34:	4649      	mov	r1, r9
 8007a36:	4640      	mov	r0, r8
 8007a38:	f7f8 fbec 	bl	8000214 <__adddf3>
 8007a3c:	4b1d      	ldr	r3, [pc, #116]	; (8007ab4 <__ieee754_pow+0x3dc>)
 8007a3e:	4299      	cmp	r1, r3
 8007a40:	ec45 4b19 	vmov	d9, r4, r5
 8007a44:	4606      	mov	r6, r0
 8007a46:	460f      	mov	r7, r1
 8007a48:	468b      	mov	fp, r1
 8007a4a:	f340 82fe 	ble.w	800804a <__ieee754_pow+0x972>
 8007a4e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007a52:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007a56:	4303      	orrs	r3, r0
 8007a58:	f000 81f0 	beq.w	8007e3c <__ieee754_pow+0x764>
 8007a5c:	a310      	add	r3, pc, #64	; (adr r3, 8007aa0 <__ieee754_pow+0x3c8>)
 8007a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a62:	ec51 0b18 	vmov	r0, r1, d8
 8007a66:	f7f8 fd8b 	bl	8000580 <__aeabi_dmul>
 8007a6a:	a30d      	add	r3, pc, #52	; (adr r3, 8007aa0 <__ieee754_pow+0x3c8>)
 8007a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a70:	e6cb      	b.n	800780a <__ieee754_pow+0x132>
 8007a72:	bf00      	nop
 8007a74:	f3af 8000 	nop.w
 8007a78:	60000000 	.word	0x60000000
 8007a7c:	3ff71547 	.word	0x3ff71547
 8007a80:	f85ddf44 	.word	0xf85ddf44
 8007a84:	3e54ae0b 	.word	0x3e54ae0b
 8007a88:	55555555 	.word	0x55555555
 8007a8c:	3fd55555 	.word	0x3fd55555
 8007a90:	652b82fe 	.word	0x652b82fe
 8007a94:	3ff71547 	.word	0x3ff71547
 8007a98:	00000000 	.word	0x00000000
 8007a9c:	bff00000 	.word	0xbff00000
 8007aa0:	8800759c 	.word	0x8800759c
 8007aa4:	7e37e43c 	.word	0x7e37e43c
 8007aa8:	3ff00000 	.word	0x3ff00000
 8007aac:	3fd00000 	.word	0x3fd00000
 8007ab0:	3fe00000 	.word	0x3fe00000
 8007ab4:	408fffff 	.word	0x408fffff
 8007ab8:	4bd7      	ldr	r3, [pc, #860]	; (8007e18 <__ieee754_pow+0x740>)
 8007aba:	ea03 0309 	and.w	r3, r3, r9
 8007abe:	2200      	movs	r2, #0
 8007ac0:	b92b      	cbnz	r3, 8007ace <__ieee754_pow+0x3f6>
 8007ac2:	4bd6      	ldr	r3, [pc, #856]	; (8007e1c <__ieee754_pow+0x744>)
 8007ac4:	f7f8 fd5c 	bl	8000580 <__aeabi_dmul>
 8007ac8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007acc:	460c      	mov	r4, r1
 8007ace:	1523      	asrs	r3, r4, #20
 8007ad0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007ad4:	4413      	add	r3, r2
 8007ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ad8:	4bd1      	ldr	r3, [pc, #836]	; (8007e20 <__ieee754_pow+0x748>)
 8007ada:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007ade:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007ae2:	429c      	cmp	r4, r3
 8007ae4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007ae8:	dd08      	ble.n	8007afc <__ieee754_pow+0x424>
 8007aea:	4bce      	ldr	r3, [pc, #824]	; (8007e24 <__ieee754_pow+0x74c>)
 8007aec:	429c      	cmp	r4, r3
 8007aee:	f340 8163 	ble.w	8007db8 <__ieee754_pow+0x6e0>
 8007af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007af4:	3301      	adds	r3, #1
 8007af6:	9309      	str	r3, [sp, #36]	; 0x24
 8007af8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007afc:	2400      	movs	r4, #0
 8007afe:	00e3      	lsls	r3, r4, #3
 8007b00:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b02:	4bc9      	ldr	r3, [pc, #804]	; (8007e28 <__ieee754_pow+0x750>)
 8007b04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b08:	ed93 7b00 	vldr	d7, [r3]
 8007b0c:	4629      	mov	r1, r5
 8007b0e:	ec53 2b17 	vmov	r2, r3, d7
 8007b12:	eeb0 8a47 	vmov.f32	s16, s14
 8007b16:	eef0 8a67 	vmov.f32	s17, s15
 8007b1a:	4682      	mov	sl, r0
 8007b1c:	f7f8 fb78 	bl	8000210 <__aeabi_dsub>
 8007b20:	4652      	mov	r2, sl
 8007b22:	4606      	mov	r6, r0
 8007b24:	460f      	mov	r7, r1
 8007b26:	462b      	mov	r3, r5
 8007b28:	ec51 0b18 	vmov	r0, r1, d8
 8007b2c:	f7f8 fb72 	bl	8000214 <__adddf3>
 8007b30:	4602      	mov	r2, r0
 8007b32:	460b      	mov	r3, r1
 8007b34:	2000      	movs	r0, #0
 8007b36:	49bd      	ldr	r1, [pc, #756]	; (8007e2c <__ieee754_pow+0x754>)
 8007b38:	f7f8 fe4c 	bl	80007d4 <__aeabi_ddiv>
 8007b3c:	ec41 0b19 	vmov	d9, r0, r1
 8007b40:	4602      	mov	r2, r0
 8007b42:	460b      	mov	r3, r1
 8007b44:	4630      	mov	r0, r6
 8007b46:	4639      	mov	r1, r7
 8007b48:	f7f8 fd1a 	bl	8000580 <__aeabi_dmul>
 8007b4c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007b50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b54:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007b58:	2300      	movs	r3, #0
 8007b5a:	9304      	str	r3, [sp, #16]
 8007b5c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007b60:	46ab      	mov	fp, r5
 8007b62:	106d      	asrs	r5, r5, #1
 8007b64:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007b68:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007b6c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007b70:	2200      	movs	r2, #0
 8007b72:	4640      	mov	r0, r8
 8007b74:	4649      	mov	r1, r9
 8007b76:	4614      	mov	r4, r2
 8007b78:	461d      	mov	r5, r3
 8007b7a:	f7f8 fd01 	bl	8000580 <__aeabi_dmul>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	460b      	mov	r3, r1
 8007b82:	4630      	mov	r0, r6
 8007b84:	4639      	mov	r1, r7
 8007b86:	f7f8 fb43 	bl	8000210 <__aeabi_dsub>
 8007b8a:	ec53 2b18 	vmov	r2, r3, d8
 8007b8e:	4606      	mov	r6, r0
 8007b90:	460f      	mov	r7, r1
 8007b92:	4620      	mov	r0, r4
 8007b94:	4629      	mov	r1, r5
 8007b96:	f7f8 fb3b 	bl	8000210 <__aeabi_dsub>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	4650      	mov	r0, sl
 8007ba0:	4659      	mov	r1, fp
 8007ba2:	f7f8 fb35 	bl	8000210 <__aeabi_dsub>
 8007ba6:	4642      	mov	r2, r8
 8007ba8:	464b      	mov	r3, r9
 8007baa:	f7f8 fce9 	bl	8000580 <__aeabi_dmul>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	4630      	mov	r0, r6
 8007bb4:	4639      	mov	r1, r7
 8007bb6:	f7f8 fb2b 	bl	8000210 <__aeabi_dsub>
 8007bba:	ec53 2b19 	vmov	r2, r3, d9
 8007bbe:	f7f8 fcdf 	bl	8000580 <__aeabi_dmul>
 8007bc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007bc6:	ec41 0b18 	vmov	d8, r0, r1
 8007bca:	4610      	mov	r0, r2
 8007bcc:	4619      	mov	r1, r3
 8007bce:	f7f8 fcd7 	bl	8000580 <__aeabi_dmul>
 8007bd2:	a37d      	add	r3, pc, #500	; (adr r3, 8007dc8 <__ieee754_pow+0x6f0>)
 8007bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd8:	4604      	mov	r4, r0
 8007bda:	460d      	mov	r5, r1
 8007bdc:	f7f8 fcd0 	bl	8000580 <__aeabi_dmul>
 8007be0:	a37b      	add	r3, pc, #492	; (adr r3, 8007dd0 <__ieee754_pow+0x6f8>)
 8007be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be6:	f7f8 fb15 	bl	8000214 <__adddf3>
 8007bea:	4622      	mov	r2, r4
 8007bec:	462b      	mov	r3, r5
 8007bee:	f7f8 fcc7 	bl	8000580 <__aeabi_dmul>
 8007bf2:	a379      	add	r3, pc, #484	; (adr r3, 8007dd8 <__ieee754_pow+0x700>)
 8007bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf8:	f7f8 fb0c 	bl	8000214 <__adddf3>
 8007bfc:	4622      	mov	r2, r4
 8007bfe:	462b      	mov	r3, r5
 8007c00:	f7f8 fcbe 	bl	8000580 <__aeabi_dmul>
 8007c04:	a376      	add	r3, pc, #472	; (adr r3, 8007de0 <__ieee754_pow+0x708>)
 8007c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0a:	f7f8 fb03 	bl	8000214 <__adddf3>
 8007c0e:	4622      	mov	r2, r4
 8007c10:	462b      	mov	r3, r5
 8007c12:	f7f8 fcb5 	bl	8000580 <__aeabi_dmul>
 8007c16:	a374      	add	r3, pc, #464	; (adr r3, 8007de8 <__ieee754_pow+0x710>)
 8007c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1c:	f7f8 fafa 	bl	8000214 <__adddf3>
 8007c20:	4622      	mov	r2, r4
 8007c22:	462b      	mov	r3, r5
 8007c24:	f7f8 fcac 	bl	8000580 <__aeabi_dmul>
 8007c28:	a371      	add	r3, pc, #452	; (adr r3, 8007df0 <__ieee754_pow+0x718>)
 8007c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2e:	f7f8 faf1 	bl	8000214 <__adddf3>
 8007c32:	4622      	mov	r2, r4
 8007c34:	4606      	mov	r6, r0
 8007c36:	460f      	mov	r7, r1
 8007c38:	462b      	mov	r3, r5
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	4629      	mov	r1, r5
 8007c3e:	f7f8 fc9f 	bl	8000580 <__aeabi_dmul>
 8007c42:	4602      	mov	r2, r0
 8007c44:	460b      	mov	r3, r1
 8007c46:	4630      	mov	r0, r6
 8007c48:	4639      	mov	r1, r7
 8007c4a:	f7f8 fc99 	bl	8000580 <__aeabi_dmul>
 8007c4e:	4642      	mov	r2, r8
 8007c50:	4604      	mov	r4, r0
 8007c52:	460d      	mov	r5, r1
 8007c54:	464b      	mov	r3, r9
 8007c56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c5a:	f7f8 fadb 	bl	8000214 <__adddf3>
 8007c5e:	ec53 2b18 	vmov	r2, r3, d8
 8007c62:	f7f8 fc8d 	bl	8000580 <__aeabi_dmul>
 8007c66:	4622      	mov	r2, r4
 8007c68:	462b      	mov	r3, r5
 8007c6a:	f7f8 fad3 	bl	8000214 <__adddf3>
 8007c6e:	4642      	mov	r2, r8
 8007c70:	4682      	mov	sl, r0
 8007c72:	468b      	mov	fp, r1
 8007c74:	464b      	mov	r3, r9
 8007c76:	4640      	mov	r0, r8
 8007c78:	4649      	mov	r1, r9
 8007c7a:	f7f8 fc81 	bl	8000580 <__aeabi_dmul>
 8007c7e:	4b6c      	ldr	r3, [pc, #432]	; (8007e30 <__ieee754_pow+0x758>)
 8007c80:	2200      	movs	r2, #0
 8007c82:	4606      	mov	r6, r0
 8007c84:	460f      	mov	r7, r1
 8007c86:	f7f8 fac5 	bl	8000214 <__adddf3>
 8007c8a:	4652      	mov	r2, sl
 8007c8c:	465b      	mov	r3, fp
 8007c8e:	f7f8 fac1 	bl	8000214 <__adddf3>
 8007c92:	9c04      	ldr	r4, [sp, #16]
 8007c94:	460d      	mov	r5, r1
 8007c96:	4622      	mov	r2, r4
 8007c98:	460b      	mov	r3, r1
 8007c9a:	4640      	mov	r0, r8
 8007c9c:	4649      	mov	r1, r9
 8007c9e:	f7f8 fc6f 	bl	8000580 <__aeabi_dmul>
 8007ca2:	4b63      	ldr	r3, [pc, #396]	; (8007e30 <__ieee754_pow+0x758>)
 8007ca4:	4680      	mov	r8, r0
 8007ca6:	4689      	mov	r9, r1
 8007ca8:	2200      	movs	r2, #0
 8007caa:	4620      	mov	r0, r4
 8007cac:	4629      	mov	r1, r5
 8007cae:	f7f8 faaf 	bl	8000210 <__aeabi_dsub>
 8007cb2:	4632      	mov	r2, r6
 8007cb4:	463b      	mov	r3, r7
 8007cb6:	f7f8 faab 	bl	8000210 <__aeabi_dsub>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	4650      	mov	r0, sl
 8007cc0:	4659      	mov	r1, fp
 8007cc2:	f7f8 faa5 	bl	8000210 <__aeabi_dsub>
 8007cc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cca:	f7f8 fc59 	bl	8000580 <__aeabi_dmul>
 8007cce:	4622      	mov	r2, r4
 8007cd0:	4606      	mov	r6, r0
 8007cd2:	460f      	mov	r7, r1
 8007cd4:	462b      	mov	r3, r5
 8007cd6:	ec51 0b18 	vmov	r0, r1, d8
 8007cda:	f7f8 fc51 	bl	8000580 <__aeabi_dmul>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	4639      	mov	r1, r7
 8007ce6:	f7f8 fa95 	bl	8000214 <__adddf3>
 8007cea:	4606      	mov	r6, r0
 8007cec:	460f      	mov	r7, r1
 8007cee:	4602      	mov	r2, r0
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	4640      	mov	r0, r8
 8007cf4:	4649      	mov	r1, r9
 8007cf6:	f7f8 fa8d 	bl	8000214 <__adddf3>
 8007cfa:	9c04      	ldr	r4, [sp, #16]
 8007cfc:	a33e      	add	r3, pc, #248	; (adr r3, 8007df8 <__ieee754_pow+0x720>)
 8007cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d02:	4620      	mov	r0, r4
 8007d04:	460d      	mov	r5, r1
 8007d06:	f7f8 fc3b 	bl	8000580 <__aeabi_dmul>
 8007d0a:	4642      	mov	r2, r8
 8007d0c:	ec41 0b18 	vmov	d8, r0, r1
 8007d10:	464b      	mov	r3, r9
 8007d12:	4620      	mov	r0, r4
 8007d14:	4629      	mov	r1, r5
 8007d16:	f7f8 fa7b 	bl	8000210 <__aeabi_dsub>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	4630      	mov	r0, r6
 8007d20:	4639      	mov	r1, r7
 8007d22:	f7f8 fa75 	bl	8000210 <__aeabi_dsub>
 8007d26:	a336      	add	r3, pc, #216	; (adr r3, 8007e00 <__ieee754_pow+0x728>)
 8007d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2c:	f7f8 fc28 	bl	8000580 <__aeabi_dmul>
 8007d30:	a335      	add	r3, pc, #212	; (adr r3, 8007e08 <__ieee754_pow+0x730>)
 8007d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d36:	4606      	mov	r6, r0
 8007d38:	460f      	mov	r7, r1
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	4629      	mov	r1, r5
 8007d3e:	f7f8 fc1f 	bl	8000580 <__aeabi_dmul>
 8007d42:	4602      	mov	r2, r0
 8007d44:	460b      	mov	r3, r1
 8007d46:	4630      	mov	r0, r6
 8007d48:	4639      	mov	r1, r7
 8007d4a:	f7f8 fa63 	bl	8000214 <__adddf3>
 8007d4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d50:	4b38      	ldr	r3, [pc, #224]	; (8007e34 <__ieee754_pow+0x75c>)
 8007d52:	4413      	add	r3, r2
 8007d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d58:	f7f8 fa5c 	bl	8000214 <__adddf3>
 8007d5c:	4682      	mov	sl, r0
 8007d5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d60:	468b      	mov	fp, r1
 8007d62:	f7f8 fba3 	bl	80004ac <__aeabi_i2d>
 8007d66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d68:	4b33      	ldr	r3, [pc, #204]	; (8007e38 <__ieee754_pow+0x760>)
 8007d6a:	4413      	add	r3, r2
 8007d6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d70:	4606      	mov	r6, r0
 8007d72:	460f      	mov	r7, r1
 8007d74:	4652      	mov	r2, sl
 8007d76:	465b      	mov	r3, fp
 8007d78:	ec51 0b18 	vmov	r0, r1, d8
 8007d7c:	f7f8 fa4a 	bl	8000214 <__adddf3>
 8007d80:	4642      	mov	r2, r8
 8007d82:	464b      	mov	r3, r9
 8007d84:	f7f8 fa46 	bl	8000214 <__adddf3>
 8007d88:	4632      	mov	r2, r6
 8007d8a:	463b      	mov	r3, r7
 8007d8c:	f7f8 fa42 	bl	8000214 <__adddf3>
 8007d90:	9c04      	ldr	r4, [sp, #16]
 8007d92:	4632      	mov	r2, r6
 8007d94:	463b      	mov	r3, r7
 8007d96:	4620      	mov	r0, r4
 8007d98:	460d      	mov	r5, r1
 8007d9a:	f7f8 fa39 	bl	8000210 <__aeabi_dsub>
 8007d9e:	4642      	mov	r2, r8
 8007da0:	464b      	mov	r3, r9
 8007da2:	f7f8 fa35 	bl	8000210 <__aeabi_dsub>
 8007da6:	ec53 2b18 	vmov	r2, r3, d8
 8007daa:	f7f8 fa31 	bl	8000210 <__aeabi_dsub>
 8007dae:	4602      	mov	r2, r0
 8007db0:	460b      	mov	r3, r1
 8007db2:	4650      	mov	r0, sl
 8007db4:	4659      	mov	r1, fp
 8007db6:	e606      	b.n	80079c6 <__ieee754_pow+0x2ee>
 8007db8:	2401      	movs	r4, #1
 8007dba:	e6a0      	b.n	8007afe <__ieee754_pow+0x426>
 8007dbc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007e10 <__ieee754_pow+0x738>
 8007dc0:	e60d      	b.n	80079de <__ieee754_pow+0x306>
 8007dc2:	bf00      	nop
 8007dc4:	f3af 8000 	nop.w
 8007dc8:	4a454eef 	.word	0x4a454eef
 8007dcc:	3fca7e28 	.word	0x3fca7e28
 8007dd0:	93c9db65 	.word	0x93c9db65
 8007dd4:	3fcd864a 	.word	0x3fcd864a
 8007dd8:	a91d4101 	.word	0xa91d4101
 8007ddc:	3fd17460 	.word	0x3fd17460
 8007de0:	518f264d 	.word	0x518f264d
 8007de4:	3fd55555 	.word	0x3fd55555
 8007de8:	db6fabff 	.word	0xdb6fabff
 8007dec:	3fdb6db6 	.word	0x3fdb6db6
 8007df0:	33333303 	.word	0x33333303
 8007df4:	3fe33333 	.word	0x3fe33333
 8007df8:	e0000000 	.word	0xe0000000
 8007dfc:	3feec709 	.word	0x3feec709
 8007e00:	dc3a03fd 	.word	0xdc3a03fd
 8007e04:	3feec709 	.word	0x3feec709
 8007e08:	145b01f5 	.word	0x145b01f5
 8007e0c:	be3e2fe0 	.word	0xbe3e2fe0
 8007e10:	00000000 	.word	0x00000000
 8007e14:	3ff00000 	.word	0x3ff00000
 8007e18:	7ff00000 	.word	0x7ff00000
 8007e1c:	43400000 	.word	0x43400000
 8007e20:	0003988e 	.word	0x0003988e
 8007e24:	000bb679 	.word	0x000bb679
 8007e28:	08008738 	.word	0x08008738
 8007e2c:	3ff00000 	.word	0x3ff00000
 8007e30:	40080000 	.word	0x40080000
 8007e34:	08008758 	.word	0x08008758
 8007e38:	08008748 	.word	0x08008748
 8007e3c:	a3b5      	add	r3, pc, #724	; (adr r3, 8008114 <__ieee754_pow+0xa3c>)
 8007e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e42:	4640      	mov	r0, r8
 8007e44:	4649      	mov	r1, r9
 8007e46:	f7f8 f9e5 	bl	8000214 <__adddf3>
 8007e4a:	4622      	mov	r2, r4
 8007e4c:	ec41 0b1a 	vmov	d10, r0, r1
 8007e50:	462b      	mov	r3, r5
 8007e52:	4630      	mov	r0, r6
 8007e54:	4639      	mov	r1, r7
 8007e56:	f7f8 f9db 	bl	8000210 <__aeabi_dsub>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	ec51 0b1a 	vmov	r0, r1, d10
 8007e62:	f7f8 fe1d 	bl	8000aa0 <__aeabi_dcmpgt>
 8007e66:	2800      	cmp	r0, #0
 8007e68:	f47f adf8 	bne.w	8007a5c <__ieee754_pow+0x384>
 8007e6c:	4aa4      	ldr	r2, [pc, #656]	; (8008100 <__ieee754_pow+0xa28>)
 8007e6e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007e72:	4293      	cmp	r3, r2
 8007e74:	f340 810b 	ble.w	800808e <__ieee754_pow+0x9b6>
 8007e78:	151b      	asrs	r3, r3, #20
 8007e7a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007e7e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007e82:	fa4a f303 	asr.w	r3, sl, r3
 8007e86:	445b      	add	r3, fp
 8007e88:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007e8c:	4e9d      	ldr	r6, [pc, #628]	; (8008104 <__ieee754_pow+0xa2c>)
 8007e8e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007e92:	4116      	asrs	r6, r2
 8007e94:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007e98:	2000      	movs	r0, #0
 8007e9a:	ea23 0106 	bic.w	r1, r3, r6
 8007e9e:	f1c2 0214 	rsb	r2, r2, #20
 8007ea2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007ea6:	fa4a fa02 	asr.w	sl, sl, r2
 8007eaa:	f1bb 0f00 	cmp.w	fp, #0
 8007eae:	4602      	mov	r2, r0
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	4629      	mov	r1, r5
 8007eb6:	bfb8      	it	lt
 8007eb8:	f1ca 0a00 	rsblt	sl, sl, #0
 8007ebc:	f7f8 f9a8 	bl	8000210 <__aeabi_dsub>
 8007ec0:	ec41 0b19 	vmov	d9, r0, r1
 8007ec4:	4642      	mov	r2, r8
 8007ec6:	464b      	mov	r3, r9
 8007ec8:	ec51 0b19 	vmov	r0, r1, d9
 8007ecc:	f7f8 f9a2 	bl	8000214 <__adddf3>
 8007ed0:	2400      	movs	r4, #0
 8007ed2:	a379      	add	r3, pc, #484	; (adr r3, 80080b8 <__ieee754_pow+0x9e0>)
 8007ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed8:	4620      	mov	r0, r4
 8007eda:	460d      	mov	r5, r1
 8007edc:	f7f8 fb50 	bl	8000580 <__aeabi_dmul>
 8007ee0:	ec53 2b19 	vmov	r2, r3, d9
 8007ee4:	4606      	mov	r6, r0
 8007ee6:	460f      	mov	r7, r1
 8007ee8:	4620      	mov	r0, r4
 8007eea:	4629      	mov	r1, r5
 8007eec:	f7f8 f990 	bl	8000210 <__aeabi_dsub>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	4640      	mov	r0, r8
 8007ef6:	4649      	mov	r1, r9
 8007ef8:	f7f8 f98a 	bl	8000210 <__aeabi_dsub>
 8007efc:	a370      	add	r3, pc, #448	; (adr r3, 80080c0 <__ieee754_pow+0x9e8>)
 8007efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f02:	f7f8 fb3d 	bl	8000580 <__aeabi_dmul>
 8007f06:	a370      	add	r3, pc, #448	; (adr r3, 80080c8 <__ieee754_pow+0x9f0>)
 8007f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0c:	4680      	mov	r8, r0
 8007f0e:	4689      	mov	r9, r1
 8007f10:	4620      	mov	r0, r4
 8007f12:	4629      	mov	r1, r5
 8007f14:	f7f8 fb34 	bl	8000580 <__aeabi_dmul>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	4640      	mov	r0, r8
 8007f1e:	4649      	mov	r1, r9
 8007f20:	f7f8 f978 	bl	8000214 <__adddf3>
 8007f24:	4604      	mov	r4, r0
 8007f26:	460d      	mov	r5, r1
 8007f28:	4602      	mov	r2, r0
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	4630      	mov	r0, r6
 8007f2e:	4639      	mov	r1, r7
 8007f30:	f7f8 f970 	bl	8000214 <__adddf3>
 8007f34:	4632      	mov	r2, r6
 8007f36:	463b      	mov	r3, r7
 8007f38:	4680      	mov	r8, r0
 8007f3a:	4689      	mov	r9, r1
 8007f3c:	f7f8 f968 	bl	8000210 <__aeabi_dsub>
 8007f40:	4602      	mov	r2, r0
 8007f42:	460b      	mov	r3, r1
 8007f44:	4620      	mov	r0, r4
 8007f46:	4629      	mov	r1, r5
 8007f48:	f7f8 f962 	bl	8000210 <__aeabi_dsub>
 8007f4c:	4642      	mov	r2, r8
 8007f4e:	4606      	mov	r6, r0
 8007f50:	460f      	mov	r7, r1
 8007f52:	464b      	mov	r3, r9
 8007f54:	4640      	mov	r0, r8
 8007f56:	4649      	mov	r1, r9
 8007f58:	f7f8 fb12 	bl	8000580 <__aeabi_dmul>
 8007f5c:	a35c      	add	r3, pc, #368	; (adr r3, 80080d0 <__ieee754_pow+0x9f8>)
 8007f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f62:	4604      	mov	r4, r0
 8007f64:	460d      	mov	r5, r1
 8007f66:	f7f8 fb0b 	bl	8000580 <__aeabi_dmul>
 8007f6a:	a35b      	add	r3, pc, #364	; (adr r3, 80080d8 <__ieee754_pow+0xa00>)
 8007f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f70:	f7f8 f94e 	bl	8000210 <__aeabi_dsub>
 8007f74:	4622      	mov	r2, r4
 8007f76:	462b      	mov	r3, r5
 8007f78:	f7f8 fb02 	bl	8000580 <__aeabi_dmul>
 8007f7c:	a358      	add	r3, pc, #352	; (adr r3, 80080e0 <__ieee754_pow+0xa08>)
 8007f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f82:	f7f8 f947 	bl	8000214 <__adddf3>
 8007f86:	4622      	mov	r2, r4
 8007f88:	462b      	mov	r3, r5
 8007f8a:	f7f8 faf9 	bl	8000580 <__aeabi_dmul>
 8007f8e:	a356      	add	r3, pc, #344	; (adr r3, 80080e8 <__ieee754_pow+0xa10>)
 8007f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f94:	f7f8 f93c 	bl	8000210 <__aeabi_dsub>
 8007f98:	4622      	mov	r2, r4
 8007f9a:	462b      	mov	r3, r5
 8007f9c:	f7f8 faf0 	bl	8000580 <__aeabi_dmul>
 8007fa0:	a353      	add	r3, pc, #332	; (adr r3, 80080f0 <__ieee754_pow+0xa18>)
 8007fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa6:	f7f8 f935 	bl	8000214 <__adddf3>
 8007faa:	4622      	mov	r2, r4
 8007fac:	462b      	mov	r3, r5
 8007fae:	f7f8 fae7 	bl	8000580 <__aeabi_dmul>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	4640      	mov	r0, r8
 8007fb8:	4649      	mov	r1, r9
 8007fba:	f7f8 f929 	bl	8000210 <__aeabi_dsub>
 8007fbe:	4604      	mov	r4, r0
 8007fc0:	460d      	mov	r5, r1
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	4640      	mov	r0, r8
 8007fc8:	4649      	mov	r1, r9
 8007fca:	f7f8 fad9 	bl	8000580 <__aeabi_dmul>
 8007fce:	2200      	movs	r2, #0
 8007fd0:	ec41 0b19 	vmov	d9, r0, r1
 8007fd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007fd8:	4620      	mov	r0, r4
 8007fda:	4629      	mov	r1, r5
 8007fdc:	f7f8 f918 	bl	8000210 <__aeabi_dsub>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	ec51 0b19 	vmov	r0, r1, d9
 8007fe8:	f7f8 fbf4 	bl	80007d4 <__aeabi_ddiv>
 8007fec:	4632      	mov	r2, r6
 8007fee:	4604      	mov	r4, r0
 8007ff0:	460d      	mov	r5, r1
 8007ff2:	463b      	mov	r3, r7
 8007ff4:	4640      	mov	r0, r8
 8007ff6:	4649      	mov	r1, r9
 8007ff8:	f7f8 fac2 	bl	8000580 <__aeabi_dmul>
 8007ffc:	4632      	mov	r2, r6
 8007ffe:	463b      	mov	r3, r7
 8008000:	f7f8 f908 	bl	8000214 <__adddf3>
 8008004:	4602      	mov	r2, r0
 8008006:	460b      	mov	r3, r1
 8008008:	4620      	mov	r0, r4
 800800a:	4629      	mov	r1, r5
 800800c:	f7f8 f900 	bl	8000210 <__aeabi_dsub>
 8008010:	4642      	mov	r2, r8
 8008012:	464b      	mov	r3, r9
 8008014:	f7f8 f8fc 	bl	8000210 <__aeabi_dsub>
 8008018:	460b      	mov	r3, r1
 800801a:	4602      	mov	r2, r0
 800801c:	493a      	ldr	r1, [pc, #232]	; (8008108 <__ieee754_pow+0xa30>)
 800801e:	2000      	movs	r0, #0
 8008020:	f7f8 f8f6 	bl	8000210 <__aeabi_dsub>
 8008024:	e9cd 0100 	strd	r0, r1, [sp]
 8008028:	9b01      	ldr	r3, [sp, #4]
 800802a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800802e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008032:	da2f      	bge.n	8008094 <__ieee754_pow+0x9bc>
 8008034:	4650      	mov	r0, sl
 8008036:	ed9d 0b00 	vldr	d0, [sp]
 800803a:	f000 f9cd 	bl	80083d8 <scalbn>
 800803e:	ec51 0b10 	vmov	r0, r1, d0
 8008042:	ec53 2b18 	vmov	r2, r3, d8
 8008046:	f7ff bbe0 	b.w	800780a <__ieee754_pow+0x132>
 800804a:	4b30      	ldr	r3, [pc, #192]	; (800810c <__ieee754_pow+0xa34>)
 800804c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008050:	429e      	cmp	r6, r3
 8008052:	f77f af0b 	ble.w	8007e6c <__ieee754_pow+0x794>
 8008056:	4b2e      	ldr	r3, [pc, #184]	; (8008110 <__ieee754_pow+0xa38>)
 8008058:	440b      	add	r3, r1
 800805a:	4303      	orrs	r3, r0
 800805c:	d00b      	beq.n	8008076 <__ieee754_pow+0x99e>
 800805e:	a326      	add	r3, pc, #152	; (adr r3, 80080f8 <__ieee754_pow+0xa20>)
 8008060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008064:	ec51 0b18 	vmov	r0, r1, d8
 8008068:	f7f8 fa8a 	bl	8000580 <__aeabi_dmul>
 800806c:	a322      	add	r3, pc, #136	; (adr r3, 80080f8 <__ieee754_pow+0xa20>)
 800806e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008072:	f7ff bbca 	b.w	800780a <__ieee754_pow+0x132>
 8008076:	4622      	mov	r2, r4
 8008078:	462b      	mov	r3, r5
 800807a:	f7f8 f8c9 	bl	8000210 <__aeabi_dsub>
 800807e:	4642      	mov	r2, r8
 8008080:	464b      	mov	r3, r9
 8008082:	f7f8 fd03 	bl	8000a8c <__aeabi_dcmpge>
 8008086:	2800      	cmp	r0, #0
 8008088:	f43f aef0 	beq.w	8007e6c <__ieee754_pow+0x794>
 800808c:	e7e7      	b.n	800805e <__ieee754_pow+0x986>
 800808e:	f04f 0a00 	mov.w	sl, #0
 8008092:	e717      	b.n	8007ec4 <__ieee754_pow+0x7ec>
 8008094:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008098:	4619      	mov	r1, r3
 800809a:	e7d2      	b.n	8008042 <__ieee754_pow+0x96a>
 800809c:	491a      	ldr	r1, [pc, #104]	; (8008108 <__ieee754_pow+0xa30>)
 800809e:	2000      	movs	r0, #0
 80080a0:	f7ff bb9e 	b.w	80077e0 <__ieee754_pow+0x108>
 80080a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080a8:	f7ff bb9a 	b.w	80077e0 <__ieee754_pow+0x108>
 80080ac:	9000      	str	r0, [sp, #0]
 80080ae:	f7ff bb76 	b.w	800779e <__ieee754_pow+0xc6>
 80080b2:	2100      	movs	r1, #0
 80080b4:	f7ff bb60 	b.w	8007778 <__ieee754_pow+0xa0>
 80080b8:	00000000 	.word	0x00000000
 80080bc:	3fe62e43 	.word	0x3fe62e43
 80080c0:	fefa39ef 	.word	0xfefa39ef
 80080c4:	3fe62e42 	.word	0x3fe62e42
 80080c8:	0ca86c39 	.word	0x0ca86c39
 80080cc:	be205c61 	.word	0xbe205c61
 80080d0:	72bea4d0 	.word	0x72bea4d0
 80080d4:	3e663769 	.word	0x3e663769
 80080d8:	c5d26bf1 	.word	0xc5d26bf1
 80080dc:	3ebbbd41 	.word	0x3ebbbd41
 80080e0:	af25de2c 	.word	0xaf25de2c
 80080e4:	3f11566a 	.word	0x3f11566a
 80080e8:	16bebd93 	.word	0x16bebd93
 80080ec:	3f66c16c 	.word	0x3f66c16c
 80080f0:	5555553e 	.word	0x5555553e
 80080f4:	3fc55555 	.word	0x3fc55555
 80080f8:	c2f8f359 	.word	0xc2f8f359
 80080fc:	01a56e1f 	.word	0x01a56e1f
 8008100:	3fe00000 	.word	0x3fe00000
 8008104:	000fffff 	.word	0x000fffff
 8008108:	3ff00000 	.word	0x3ff00000
 800810c:	4090cbff 	.word	0x4090cbff
 8008110:	3f6f3400 	.word	0x3f6f3400
 8008114:	652b82fe 	.word	0x652b82fe
 8008118:	3c971547 	.word	0x3c971547

0800811c <__ieee754_sqrt>:
 800811c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008120:	ec55 4b10 	vmov	r4, r5, d0
 8008124:	4e56      	ldr	r6, [pc, #344]	; (8008280 <__ieee754_sqrt+0x164>)
 8008126:	43ae      	bics	r6, r5
 8008128:	ee10 0a10 	vmov	r0, s0
 800812c:	ee10 3a10 	vmov	r3, s0
 8008130:	4629      	mov	r1, r5
 8008132:	462a      	mov	r2, r5
 8008134:	d110      	bne.n	8008158 <__ieee754_sqrt+0x3c>
 8008136:	ee10 2a10 	vmov	r2, s0
 800813a:	462b      	mov	r3, r5
 800813c:	f7f8 fa20 	bl	8000580 <__aeabi_dmul>
 8008140:	4602      	mov	r2, r0
 8008142:	460b      	mov	r3, r1
 8008144:	4620      	mov	r0, r4
 8008146:	4629      	mov	r1, r5
 8008148:	f7f8 f864 	bl	8000214 <__adddf3>
 800814c:	4604      	mov	r4, r0
 800814e:	460d      	mov	r5, r1
 8008150:	ec45 4b10 	vmov	d0, r4, r5
 8008154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008158:	2d00      	cmp	r5, #0
 800815a:	dc10      	bgt.n	800817e <__ieee754_sqrt+0x62>
 800815c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008160:	4330      	orrs	r0, r6
 8008162:	d0f5      	beq.n	8008150 <__ieee754_sqrt+0x34>
 8008164:	b15d      	cbz	r5, 800817e <__ieee754_sqrt+0x62>
 8008166:	ee10 2a10 	vmov	r2, s0
 800816a:	462b      	mov	r3, r5
 800816c:	ee10 0a10 	vmov	r0, s0
 8008170:	f7f8 f84e 	bl	8000210 <__aeabi_dsub>
 8008174:	4602      	mov	r2, r0
 8008176:	460b      	mov	r3, r1
 8008178:	f7f8 fb2c 	bl	80007d4 <__aeabi_ddiv>
 800817c:	e7e6      	b.n	800814c <__ieee754_sqrt+0x30>
 800817e:	1509      	asrs	r1, r1, #20
 8008180:	d076      	beq.n	8008270 <__ieee754_sqrt+0x154>
 8008182:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008186:	07ce      	lsls	r6, r1, #31
 8008188:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800818c:	bf5e      	ittt	pl
 800818e:	0fda      	lsrpl	r2, r3, #31
 8008190:	005b      	lslpl	r3, r3, #1
 8008192:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8008196:	0fda      	lsrs	r2, r3, #31
 8008198:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800819c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80081a0:	2000      	movs	r0, #0
 80081a2:	106d      	asrs	r5, r5, #1
 80081a4:	005b      	lsls	r3, r3, #1
 80081a6:	f04f 0e16 	mov.w	lr, #22
 80081aa:	4684      	mov	ip, r0
 80081ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80081b0:	eb0c 0401 	add.w	r4, ip, r1
 80081b4:	4294      	cmp	r4, r2
 80081b6:	bfde      	ittt	le
 80081b8:	1b12      	suble	r2, r2, r4
 80081ba:	eb04 0c01 	addle.w	ip, r4, r1
 80081be:	1840      	addle	r0, r0, r1
 80081c0:	0052      	lsls	r2, r2, #1
 80081c2:	f1be 0e01 	subs.w	lr, lr, #1
 80081c6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80081ca:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80081ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80081d2:	d1ed      	bne.n	80081b0 <__ieee754_sqrt+0x94>
 80081d4:	4671      	mov	r1, lr
 80081d6:	2720      	movs	r7, #32
 80081d8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80081dc:	4562      	cmp	r2, ip
 80081de:	eb04 060e 	add.w	r6, r4, lr
 80081e2:	dc02      	bgt.n	80081ea <__ieee754_sqrt+0xce>
 80081e4:	d113      	bne.n	800820e <__ieee754_sqrt+0xf2>
 80081e6:	429e      	cmp	r6, r3
 80081e8:	d811      	bhi.n	800820e <__ieee754_sqrt+0xf2>
 80081ea:	2e00      	cmp	r6, #0
 80081ec:	eb06 0e04 	add.w	lr, r6, r4
 80081f0:	da43      	bge.n	800827a <__ieee754_sqrt+0x15e>
 80081f2:	f1be 0f00 	cmp.w	lr, #0
 80081f6:	db40      	blt.n	800827a <__ieee754_sqrt+0x15e>
 80081f8:	f10c 0801 	add.w	r8, ip, #1
 80081fc:	eba2 020c 	sub.w	r2, r2, ip
 8008200:	429e      	cmp	r6, r3
 8008202:	bf88      	it	hi
 8008204:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8008208:	1b9b      	subs	r3, r3, r6
 800820a:	4421      	add	r1, r4
 800820c:	46c4      	mov	ip, r8
 800820e:	0052      	lsls	r2, r2, #1
 8008210:	3f01      	subs	r7, #1
 8008212:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008216:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800821a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800821e:	d1dd      	bne.n	80081dc <__ieee754_sqrt+0xc0>
 8008220:	4313      	orrs	r3, r2
 8008222:	d006      	beq.n	8008232 <__ieee754_sqrt+0x116>
 8008224:	1c4c      	adds	r4, r1, #1
 8008226:	bf13      	iteet	ne
 8008228:	3101      	addne	r1, #1
 800822a:	3001      	addeq	r0, #1
 800822c:	4639      	moveq	r1, r7
 800822e:	f021 0101 	bicne.w	r1, r1, #1
 8008232:	1043      	asrs	r3, r0, #1
 8008234:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008238:	0849      	lsrs	r1, r1, #1
 800823a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800823e:	07c2      	lsls	r2, r0, #31
 8008240:	bf48      	it	mi
 8008242:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008246:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800824a:	460c      	mov	r4, r1
 800824c:	463d      	mov	r5, r7
 800824e:	e77f      	b.n	8008150 <__ieee754_sqrt+0x34>
 8008250:	0ada      	lsrs	r2, r3, #11
 8008252:	3815      	subs	r0, #21
 8008254:	055b      	lsls	r3, r3, #21
 8008256:	2a00      	cmp	r2, #0
 8008258:	d0fa      	beq.n	8008250 <__ieee754_sqrt+0x134>
 800825a:	02d7      	lsls	r7, r2, #11
 800825c:	d50a      	bpl.n	8008274 <__ieee754_sqrt+0x158>
 800825e:	f1c1 0420 	rsb	r4, r1, #32
 8008262:	fa23 f404 	lsr.w	r4, r3, r4
 8008266:	1e4d      	subs	r5, r1, #1
 8008268:	408b      	lsls	r3, r1
 800826a:	4322      	orrs	r2, r4
 800826c:	1b41      	subs	r1, r0, r5
 800826e:	e788      	b.n	8008182 <__ieee754_sqrt+0x66>
 8008270:	4608      	mov	r0, r1
 8008272:	e7f0      	b.n	8008256 <__ieee754_sqrt+0x13a>
 8008274:	0052      	lsls	r2, r2, #1
 8008276:	3101      	adds	r1, #1
 8008278:	e7ef      	b.n	800825a <__ieee754_sqrt+0x13e>
 800827a:	46e0      	mov	r8, ip
 800827c:	e7be      	b.n	80081fc <__ieee754_sqrt+0xe0>
 800827e:	bf00      	nop
 8008280:	7ff00000 	.word	0x7ff00000

08008284 <fabs>:
 8008284:	ec51 0b10 	vmov	r0, r1, d0
 8008288:	ee10 2a10 	vmov	r2, s0
 800828c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008290:	ec43 2b10 	vmov	d0, r2, r3
 8008294:	4770      	bx	lr

08008296 <finite>:
 8008296:	b082      	sub	sp, #8
 8008298:	ed8d 0b00 	vstr	d0, [sp]
 800829c:	9801      	ldr	r0, [sp, #4]
 800829e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80082a2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80082a6:	0fc0      	lsrs	r0, r0, #31
 80082a8:	b002      	add	sp, #8
 80082aa:	4770      	bx	lr
 80082ac:	0000      	movs	r0, r0
	...

080082b0 <nan>:
 80082b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80082b8 <nan+0x8>
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	00000000 	.word	0x00000000
 80082bc:	7ff80000 	.word	0x7ff80000

080082c0 <rint>:
 80082c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082c2:	ec51 0b10 	vmov	r0, r1, d0
 80082c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80082ca:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80082ce:	2e13      	cmp	r6, #19
 80082d0:	ee10 4a10 	vmov	r4, s0
 80082d4:	460b      	mov	r3, r1
 80082d6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80082da:	dc58      	bgt.n	800838e <rint+0xce>
 80082dc:	2e00      	cmp	r6, #0
 80082de:	da2b      	bge.n	8008338 <rint+0x78>
 80082e0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80082e4:	4302      	orrs	r2, r0
 80082e6:	d023      	beq.n	8008330 <rint+0x70>
 80082e8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80082ec:	4302      	orrs	r2, r0
 80082ee:	4254      	negs	r4, r2
 80082f0:	4314      	orrs	r4, r2
 80082f2:	0c4b      	lsrs	r3, r1, #17
 80082f4:	0b24      	lsrs	r4, r4, #12
 80082f6:	045b      	lsls	r3, r3, #17
 80082f8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80082fc:	ea44 0103 	orr.w	r1, r4, r3
 8008300:	4b32      	ldr	r3, [pc, #200]	; (80083cc <rint+0x10c>)
 8008302:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008306:	e9d3 6700 	ldrd	r6, r7, [r3]
 800830a:	4602      	mov	r2, r0
 800830c:	460b      	mov	r3, r1
 800830e:	4630      	mov	r0, r6
 8008310:	4639      	mov	r1, r7
 8008312:	f7f7 ff7f 	bl	8000214 <__adddf3>
 8008316:	e9cd 0100 	strd	r0, r1, [sp]
 800831a:	463b      	mov	r3, r7
 800831c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008320:	4632      	mov	r2, r6
 8008322:	f7f7 ff75 	bl	8000210 <__aeabi_dsub>
 8008326:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800832a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800832e:	4639      	mov	r1, r7
 8008330:	ec41 0b10 	vmov	d0, r0, r1
 8008334:	b003      	add	sp, #12
 8008336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008338:	4a25      	ldr	r2, [pc, #148]	; (80083d0 <rint+0x110>)
 800833a:	4132      	asrs	r2, r6
 800833c:	ea01 0702 	and.w	r7, r1, r2
 8008340:	4307      	orrs	r7, r0
 8008342:	d0f5      	beq.n	8008330 <rint+0x70>
 8008344:	0851      	lsrs	r1, r2, #1
 8008346:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800834a:	4314      	orrs	r4, r2
 800834c:	d00c      	beq.n	8008368 <rint+0xa8>
 800834e:	ea23 0201 	bic.w	r2, r3, r1
 8008352:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008356:	2e13      	cmp	r6, #19
 8008358:	fa43 f606 	asr.w	r6, r3, r6
 800835c:	bf0c      	ite	eq
 800835e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8008362:	2400      	movne	r4, #0
 8008364:	ea42 0306 	orr.w	r3, r2, r6
 8008368:	4918      	ldr	r1, [pc, #96]	; (80083cc <rint+0x10c>)
 800836a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800836e:	4622      	mov	r2, r4
 8008370:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008374:	4620      	mov	r0, r4
 8008376:	4629      	mov	r1, r5
 8008378:	f7f7 ff4c 	bl	8000214 <__adddf3>
 800837c:	e9cd 0100 	strd	r0, r1, [sp]
 8008380:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008384:	4622      	mov	r2, r4
 8008386:	462b      	mov	r3, r5
 8008388:	f7f7 ff42 	bl	8000210 <__aeabi_dsub>
 800838c:	e7d0      	b.n	8008330 <rint+0x70>
 800838e:	2e33      	cmp	r6, #51	; 0x33
 8008390:	dd07      	ble.n	80083a2 <rint+0xe2>
 8008392:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008396:	d1cb      	bne.n	8008330 <rint+0x70>
 8008398:	ee10 2a10 	vmov	r2, s0
 800839c:	f7f7 ff3a 	bl	8000214 <__adddf3>
 80083a0:	e7c6      	b.n	8008330 <rint+0x70>
 80083a2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80083a6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80083aa:	40d6      	lsrs	r6, r2
 80083ac:	4230      	tst	r0, r6
 80083ae:	d0bf      	beq.n	8008330 <rint+0x70>
 80083b0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80083b4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80083b8:	bf1f      	itttt	ne
 80083ba:	ea24 0101 	bicne.w	r1, r4, r1
 80083be:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80083c2:	fa44 f202 	asrne.w	r2, r4, r2
 80083c6:	ea41 0402 	orrne.w	r4, r1, r2
 80083ca:	e7cd      	b.n	8008368 <rint+0xa8>
 80083cc:	08008768 	.word	0x08008768
 80083d0:	000fffff 	.word	0x000fffff
 80083d4:	00000000 	.word	0x00000000

080083d8 <scalbn>:
 80083d8:	b570      	push	{r4, r5, r6, lr}
 80083da:	ec55 4b10 	vmov	r4, r5, d0
 80083de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80083e2:	4606      	mov	r6, r0
 80083e4:	462b      	mov	r3, r5
 80083e6:	b99a      	cbnz	r2, 8008410 <scalbn+0x38>
 80083e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80083ec:	4323      	orrs	r3, r4
 80083ee:	d036      	beq.n	800845e <scalbn+0x86>
 80083f0:	4b39      	ldr	r3, [pc, #228]	; (80084d8 <scalbn+0x100>)
 80083f2:	4629      	mov	r1, r5
 80083f4:	ee10 0a10 	vmov	r0, s0
 80083f8:	2200      	movs	r2, #0
 80083fa:	f7f8 f8c1 	bl	8000580 <__aeabi_dmul>
 80083fe:	4b37      	ldr	r3, [pc, #220]	; (80084dc <scalbn+0x104>)
 8008400:	429e      	cmp	r6, r3
 8008402:	4604      	mov	r4, r0
 8008404:	460d      	mov	r5, r1
 8008406:	da10      	bge.n	800842a <scalbn+0x52>
 8008408:	a32b      	add	r3, pc, #172	; (adr r3, 80084b8 <scalbn+0xe0>)
 800840a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840e:	e03a      	b.n	8008486 <scalbn+0xae>
 8008410:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008414:	428a      	cmp	r2, r1
 8008416:	d10c      	bne.n	8008432 <scalbn+0x5a>
 8008418:	ee10 2a10 	vmov	r2, s0
 800841c:	4620      	mov	r0, r4
 800841e:	4629      	mov	r1, r5
 8008420:	f7f7 fef8 	bl	8000214 <__adddf3>
 8008424:	4604      	mov	r4, r0
 8008426:	460d      	mov	r5, r1
 8008428:	e019      	b.n	800845e <scalbn+0x86>
 800842a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800842e:	460b      	mov	r3, r1
 8008430:	3a36      	subs	r2, #54	; 0x36
 8008432:	4432      	add	r2, r6
 8008434:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008438:	428a      	cmp	r2, r1
 800843a:	dd08      	ble.n	800844e <scalbn+0x76>
 800843c:	2d00      	cmp	r5, #0
 800843e:	a120      	add	r1, pc, #128	; (adr r1, 80084c0 <scalbn+0xe8>)
 8008440:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008444:	da1c      	bge.n	8008480 <scalbn+0xa8>
 8008446:	a120      	add	r1, pc, #128	; (adr r1, 80084c8 <scalbn+0xf0>)
 8008448:	e9d1 0100 	ldrd	r0, r1, [r1]
 800844c:	e018      	b.n	8008480 <scalbn+0xa8>
 800844e:	2a00      	cmp	r2, #0
 8008450:	dd08      	ble.n	8008464 <scalbn+0x8c>
 8008452:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008456:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800845a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800845e:	ec45 4b10 	vmov	d0, r4, r5
 8008462:	bd70      	pop	{r4, r5, r6, pc}
 8008464:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008468:	da19      	bge.n	800849e <scalbn+0xc6>
 800846a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800846e:	429e      	cmp	r6, r3
 8008470:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008474:	dd0a      	ble.n	800848c <scalbn+0xb4>
 8008476:	a112      	add	r1, pc, #72	; (adr r1, 80084c0 <scalbn+0xe8>)
 8008478:	e9d1 0100 	ldrd	r0, r1, [r1]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d1e2      	bne.n	8008446 <scalbn+0x6e>
 8008480:	a30f      	add	r3, pc, #60	; (adr r3, 80084c0 <scalbn+0xe8>)
 8008482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008486:	f7f8 f87b 	bl	8000580 <__aeabi_dmul>
 800848a:	e7cb      	b.n	8008424 <scalbn+0x4c>
 800848c:	a10a      	add	r1, pc, #40	; (adr r1, 80084b8 <scalbn+0xe0>)
 800848e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d0b8      	beq.n	8008408 <scalbn+0x30>
 8008496:	a10e      	add	r1, pc, #56	; (adr r1, 80084d0 <scalbn+0xf8>)
 8008498:	e9d1 0100 	ldrd	r0, r1, [r1]
 800849c:	e7b4      	b.n	8008408 <scalbn+0x30>
 800849e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80084a2:	3236      	adds	r2, #54	; 0x36
 80084a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80084a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80084ac:	4620      	mov	r0, r4
 80084ae:	4b0c      	ldr	r3, [pc, #48]	; (80084e0 <scalbn+0x108>)
 80084b0:	2200      	movs	r2, #0
 80084b2:	e7e8      	b.n	8008486 <scalbn+0xae>
 80084b4:	f3af 8000 	nop.w
 80084b8:	c2f8f359 	.word	0xc2f8f359
 80084bc:	01a56e1f 	.word	0x01a56e1f
 80084c0:	8800759c 	.word	0x8800759c
 80084c4:	7e37e43c 	.word	0x7e37e43c
 80084c8:	8800759c 	.word	0x8800759c
 80084cc:	fe37e43c 	.word	0xfe37e43c
 80084d0:	c2f8f359 	.word	0xc2f8f359
 80084d4:	81a56e1f 	.word	0x81a56e1f
 80084d8:	43500000 	.word	0x43500000
 80084dc:	ffff3cb0 	.word	0xffff3cb0
 80084e0:	3c900000 	.word	0x3c900000

080084e4 <_init>:
 80084e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084e6:	bf00      	nop
 80084e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ea:	bc08      	pop	{r3}
 80084ec:	469e      	mov	lr, r3
 80084ee:	4770      	bx	lr

080084f0 <_fini>:
 80084f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f2:	bf00      	nop
 80084f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084f6:	bc08      	pop	{r3}
 80084f8:	469e      	mov	lr, r3
 80084fa:	4770      	bx	lr
